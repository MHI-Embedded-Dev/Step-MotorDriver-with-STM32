
ByteSpark_Kartezyen_Sistem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006cf8  08006cf8  00016cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f00  08006f00  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006f00  08006f00  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f00  08006f00  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f04  08006f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000010  08006f18  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08006f18  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e698  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f39  00000000  00000000  0002e6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00030610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  000313b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186b1  00000000  00000000  00032098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f102  00000000  00000000  0004a749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904c3  00000000  00000000  0005984b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9d0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dac  00000000  00000000  000e9d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cdc 	.word	0x08006cdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006cdc 	.word	0x08006cdc

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_frsub>:
 800091c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000920:	e002      	b.n	8000928 <__addsf3>
 8000922:	bf00      	nop

08000924 <__aeabi_fsub>:
 8000924:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000928 <__addsf3>:
 8000928:	0042      	lsls	r2, r0, #1
 800092a:	bf1f      	itttt	ne
 800092c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000930:	ea92 0f03 	teqne	r2, r3
 8000934:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000938:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800093c:	d06a      	beq.n	8000a14 <__addsf3+0xec>
 800093e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000942:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000946:	bfc1      	itttt	gt
 8000948:	18d2      	addgt	r2, r2, r3
 800094a:	4041      	eorgt	r1, r0
 800094c:	4048      	eorgt	r0, r1
 800094e:	4041      	eorgt	r1, r0
 8000950:	bfb8      	it	lt
 8000952:	425b      	neglt	r3, r3
 8000954:	2b19      	cmp	r3, #25
 8000956:	bf88      	it	hi
 8000958:	4770      	bxhi	lr
 800095a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800095e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000962:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000966:	bf18      	it	ne
 8000968:	4240      	negne	r0, r0
 800096a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800096e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000972:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4249      	negne	r1, r1
 800097a:	ea92 0f03 	teq	r2, r3
 800097e:	d03f      	beq.n	8000a00 <__addsf3+0xd8>
 8000980:	f1a2 0201 	sub.w	r2, r2, #1
 8000984:	fa41 fc03 	asr.w	ip, r1, r3
 8000988:	eb10 000c 	adds.w	r0, r0, ip
 800098c:	f1c3 0320 	rsb	r3, r3, #32
 8000990:	fa01 f103 	lsl.w	r1, r1, r3
 8000994:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000998:	d502      	bpl.n	80009a0 <__addsf3+0x78>
 800099a:	4249      	negs	r1, r1
 800099c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009a4:	d313      	bcc.n	80009ce <__addsf3+0xa6>
 80009a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009aa:	d306      	bcc.n	80009ba <__addsf3+0x92>
 80009ac:	0840      	lsrs	r0, r0, #1
 80009ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80009b2:	f102 0201 	add.w	r2, r2, #1
 80009b6:	2afe      	cmp	r2, #254	; 0xfe
 80009b8:	d251      	bcs.n	8000a5e <__addsf3+0x136>
 80009ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009c2:	bf08      	it	eq
 80009c4:	f020 0001 	biceq.w	r0, r0, #1
 80009c8:	ea40 0003 	orr.w	r0, r0, r3
 80009cc:	4770      	bx	lr
 80009ce:	0049      	lsls	r1, r1, #1
 80009d0:	eb40 0000 	adc.w	r0, r0, r0
 80009d4:	3a01      	subs	r2, #1
 80009d6:	bf28      	it	cs
 80009d8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009dc:	d2ed      	bcs.n	80009ba <__addsf3+0x92>
 80009de:	fab0 fc80 	clz	ip, r0
 80009e2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009e6:	ebb2 020c 	subs.w	r2, r2, ip
 80009ea:	fa00 f00c 	lsl.w	r0, r0, ip
 80009ee:	bfaa      	itet	ge
 80009f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009f4:	4252      	neglt	r2, r2
 80009f6:	4318      	orrge	r0, r3
 80009f8:	bfbc      	itt	lt
 80009fa:	40d0      	lsrlt	r0, r2
 80009fc:	4318      	orrlt	r0, r3
 80009fe:	4770      	bx	lr
 8000a00:	f092 0f00 	teq	r2, #0
 8000a04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a08:	bf06      	itte	eq
 8000a0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a0e:	3201      	addeq	r2, #1
 8000a10:	3b01      	subne	r3, #1
 8000a12:	e7b5      	b.n	8000980 <__addsf3+0x58>
 8000a14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a1c:	bf18      	it	ne
 8000a1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a22:	d021      	beq.n	8000a68 <__addsf3+0x140>
 8000a24:	ea92 0f03 	teq	r2, r3
 8000a28:	d004      	beq.n	8000a34 <__addsf3+0x10c>
 8000a2a:	f092 0f00 	teq	r2, #0
 8000a2e:	bf08      	it	eq
 8000a30:	4608      	moveq	r0, r1
 8000a32:	4770      	bx	lr
 8000a34:	ea90 0f01 	teq	r0, r1
 8000a38:	bf1c      	itt	ne
 8000a3a:	2000      	movne	r0, #0
 8000a3c:	4770      	bxne	lr
 8000a3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a42:	d104      	bne.n	8000a4e <__addsf3+0x126>
 8000a44:	0040      	lsls	r0, r0, #1
 8000a46:	bf28      	it	cs
 8000a48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a4c:	4770      	bx	lr
 8000a4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a52:	bf3c      	itt	cc
 8000a54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bxcc	lr
 8000a5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a66:	4770      	bx	lr
 8000a68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a6c:	bf16      	itet	ne
 8000a6e:	4608      	movne	r0, r1
 8000a70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a74:	4601      	movne	r1, r0
 8000a76:	0242      	lsls	r2, r0, #9
 8000a78:	bf06      	itte	eq
 8000a7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a7e:	ea90 0f01 	teqeq	r0, r1
 8000a82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_ui2f>:
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	e004      	b.n	8000a98 <__aeabi_i2f+0x8>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_i2f>:
 8000a90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a94:	bf48      	it	mi
 8000a96:	4240      	negmi	r0, r0
 8000a98:	ea5f 0c00 	movs.w	ip, r0
 8000a9c:	bf08      	it	eq
 8000a9e:	4770      	bxeq	lr
 8000aa0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000aa4:	4601      	mov	r1, r0
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	e01c      	b.n	8000ae6 <__aeabi_l2f+0x2a>

08000aac <__aeabi_ul2f>:
 8000aac:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e00a      	b.n	8000ad0 <__aeabi_l2f+0x14>
 8000aba:	bf00      	nop

08000abc <__aeabi_l2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__aeabi_l2f+0x14>
 8000aca:	4240      	negs	r0, r0
 8000acc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad0:	ea5f 0c01 	movs.w	ip, r1
 8000ad4:	bf02      	ittt	eq
 8000ad6:	4684      	moveq	ip, r0
 8000ad8:	4601      	moveq	r1, r0
 8000ada:	2000      	moveq	r0, #0
 8000adc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000aea:	fabc f28c 	clz	r2, ip
 8000aee:	3a08      	subs	r2, #8
 8000af0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000af4:	db10      	blt.n	8000b18 <__aeabi_l2f+0x5c>
 8000af6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000afa:	4463      	add	r3, ip
 8000afc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b00:	f1c2 0220 	rsb	r2, r2, #32
 8000b04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b08:	fa20 f202 	lsr.w	r2, r0, r2
 8000b0c:	eb43 0002 	adc.w	r0, r3, r2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f102 0220 	add.w	r2, r2, #32
 8000b1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b28:	fa21 f202 	lsr.w	r2, r1, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_fmul>:
 8000b38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b40:	bf1e      	ittt	ne
 8000b42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b46:	ea92 0f0c 	teqne	r2, ip
 8000b4a:	ea93 0f0c 	teqne	r3, ip
 8000b4e:	d06f      	beq.n	8000c30 <__aeabi_fmul+0xf8>
 8000b50:	441a      	add	r2, r3
 8000b52:	ea80 0c01 	eor.w	ip, r0, r1
 8000b56:	0240      	lsls	r0, r0, #9
 8000b58:	bf18      	it	ne
 8000b5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b5e:	d01e      	beq.n	8000b9e <__aeabi_fmul+0x66>
 8000b60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b78:	bf3e      	ittt	cc
 8000b7a:	0049      	lslcc	r1, r1, #1
 8000b7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b80:	005b      	lslcc	r3, r3, #1
 8000b82:	ea40 0001 	orr.w	r0, r0, r1
 8000b86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b8a:	2afd      	cmp	r2, #253	; 0xfd
 8000b8c:	d81d      	bhi.n	8000bca <__aeabi_fmul+0x92>
 8000b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b96:	bf08      	it	eq
 8000b98:	f020 0001 	biceq.w	r0, r0, #1
 8000b9c:	4770      	bx	lr
 8000b9e:	f090 0f00 	teq	r0, #0
 8000ba2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ba6:	bf08      	it	eq
 8000ba8:	0249      	lsleq	r1, r1, #9
 8000baa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bb2:	3a7f      	subs	r2, #127	; 0x7f
 8000bb4:	bfc2      	ittt	gt
 8000bb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bbe:	4770      	bxgt	lr
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	3a01      	subs	r2, #1
 8000bca:	dc5d      	bgt.n	8000c88 <__aeabi_fmul+0x150>
 8000bcc:	f112 0f19 	cmn.w	r2, #25
 8000bd0:	bfdc      	itt	le
 8000bd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bxle	lr
 8000bd8:	f1c2 0200 	rsb	r2, r2, #0
 8000bdc:	0041      	lsls	r1, r0, #1
 8000bde:	fa21 f102 	lsr.w	r1, r1, r2
 8000be2:	f1c2 0220 	rsb	r2, r2, #32
 8000be6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bee:	f140 0000 	adc.w	r0, r0, #0
 8000bf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bf6:	bf08      	it	eq
 8000bf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bfc:	4770      	bx	lr
 8000bfe:	f092 0f00 	teq	r2, #0
 8000c02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c06:	bf02      	ittt	eq
 8000c08:	0040      	lsleq	r0, r0, #1
 8000c0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0e:	3a01      	subeq	r2, #1
 8000c10:	d0f9      	beq.n	8000c06 <__aeabi_fmul+0xce>
 8000c12:	ea40 000c 	orr.w	r0, r0, ip
 8000c16:	f093 0f00 	teq	r3, #0
 8000c1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1e:	bf02      	ittt	eq
 8000c20:	0049      	lsleq	r1, r1, #1
 8000c22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c26:	3b01      	subeq	r3, #1
 8000c28:	d0f9      	beq.n	8000c1e <__aeabi_fmul+0xe6>
 8000c2a:	ea41 010c 	orr.w	r1, r1, ip
 8000c2e:	e78f      	b.n	8000b50 <__aeabi_fmul+0x18>
 8000c30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c34:	ea92 0f0c 	teq	r2, ip
 8000c38:	bf18      	it	ne
 8000c3a:	ea93 0f0c 	teqne	r3, ip
 8000c3e:	d00a      	beq.n	8000c56 <__aeabi_fmul+0x11e>
 8000c40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c44:	bf18      	it	ne
 8000c46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c4a:	d1d8      	bne.n	8000bfe <__aeabi_fmul+0xc6>
 8000c4c:	ea80 0001 	eor.w	r0, r0, r1
 8000c50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f090 0f00 	teq	r0, #0
 8000c5a:	bf17      	itett	ne
 8000c5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c60:	4608      	moveq	r0, r1
 8000c62:	f091 0f00 	teqne	r1, #0
 8000c66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c6a:	d014      	beq.n	8000c96 <__aeabi_fmul+0x15e>
 8000c6c:	ea92 0f0c 	teq	r2, ip
 8000c70:	d101      	bne.n	8000c76 <__aeabi_fmul+0x13e>
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	d10f      	bne.n	8000c96 <__aeabi_fmul+0x15e>
 8000c76:	ea93 0f0c 	teq	r3, ip
 8000c7a:	d103      	bne.n	8000c84 <__aeabi_fmul+0x14c>
 8000c7c:	024b      	lsls	r3, r1, #9
 8000c7e:	bf18      	it	ne
 8000c80:	4608      	movne	r0, r1
 8000c82:	d108      	bne.n	8000c96 <__aeabi_fmul+0x15e>
 8000c84:	ea80 0001 	eor.w	r0, r0, r1
 8000c88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_fdiv>:
 8000ca0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca8:	bf1e      	ittt	ne
 8000caa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cae:	ea92 0f0c 	teqne	r2, ip
 8000cb2:	ea93 0f0c 	teqne	r3, ip
 8000cb6:	d069      	beq.n	8000d8c <__aeabi_fdiv+0xec>
 8000cb8:	eba2 0203 	sub.w	r2, r2, r3
 8000cbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc0:	0249      	lsls	r1, r1, #9
 8000cc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cc6:	d037      	beq.n	8000d38 <__aeabi_fdiv+0x98>
 8000cc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ccc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	bf38      	it	cc
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ce2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	bf24      	itt	cs
 8000cea:	1a5b      	subcs	r3, r3, r1
 8000cec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cf0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cf4:	bf24      	itt	cs
 8000cf6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d02:	bf24      	itt	cs
 8000d04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d10:	bf24      	itt	cs
 8000d12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	bf18      	it	ne
 8000d1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d22:	d1e0      	bne.n	8000ce6 <__aeabi_fdiv+0x46>
 8000d24:	2afd      	cmp	r2, #253	; 0xfd
 8000d26:	f63f af50 	bhi.w	8000bca <__aeabi_fmul+0x92>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d40:	327f      	adds	r2, #127	; 0x7f
 8000d42:	bfc2      	ittt	gt
 8000d44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4c:	4770      	bxgt	lr
 8000d4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	3a01      	subs	r2, #1
 8000d58:	e737      	b.n	8000bca <__aeabi_fmul+0x92>
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fdiv+0xc2>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fdiv+0xda>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e795      	b.n	8000cb8 <__aeabi_fdiv+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	d108      	bne.n	8000da8 <__aeabi_fdiv+0x108>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	f47f af7d 	bne.w	8000c96 <__aeabi_fmul+0x15e>
 8000d9c:	ea93 0f0c 	teq	r3, ip
 8000da0:	f47f af70 	bne.w	8000c84 <__aeabi_fmul+0x14c>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e776      	b.n	8000c96 <__aeabi_fmul+0x15e>
 8000da8:	ea93 0f0c 	teq	r3, ip
 8000dac:	d104      	bne.n	8000db8 <__aeabi_fdiv+0x118>
 8000dae:	024b      	lsls	r3, r1, #9
 8000db0:	f43f af4c 	beq.w	8000c4c <__aeabi_fmul+0x114>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e76e      	b.n	8000c96 <__aeabi_fmul+0x15e>
 8000db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dbc:	bf18      	it	ne
 8000dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	d1ca      	bne.n	8000d5a <__aeabi_fdiv+0xba>
 8000dc4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dc8:	f47f af5c 	bne.w	8000c84 <__aeabi_fmul+0x14c>
 8000dcc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dd0:	f47f af3c 	bne.w	8000c4c <__aeabi_fmul+0x114>
 8000dd4:	e75f      	b.n	8000c96 <__aeabi_fmul+0x15e>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_f2iz>:
 8000dd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ddc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000de0:	d30f      	bcc.n	8000e02 <__aeabi_f2iz+0x2a>
 8000de2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000de6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dea:	d90d      	bls.n	8000e08 <__aeabi_f2iz+0x30>
 8000dec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000df4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000df8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dfc:	bf18      	it	ne
 8000dfe:	4240      	negne	r0, r0
 8000e00:	4770      	bx	lr
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	4770      	bx	lr
 8000e08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_f2iz+0x3a>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d105      	bne.n	8000e1e <__aeabi_f2iz+0x46>
 8000e12:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e16:	bf08      	it	eq
 8000e18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e1c:	4770      	bx	lr
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_f2uiz>:
 8000e24:	0042      	lsls	r2, r0, #1
 8000e26:	d20e      	bcs.n	8000e46 <__aeabi_f2uiz+0x22>
 8000e28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e2c:	d30b      	bcc.n	8000e46 <__aeabi_f2uiz+0x22>
 8000e2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e36:	d409      	bmi.n	8000e4c <__aeabi_f2uiz+0x28>
 8000e38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e40:	fa23 f002 	lsr.w	r0, r3, r2
 8000e44:	4770      	bx	lr
 8000e46:	f04f 0000 	mov.w	r0, #0
 8000e4a:	4770      	bx	lr
 8000e4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e50:	d101      	bne.n	8000e56 <__aeabi_f2uiz+0x32>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d102      	bne.n	8000e5c <__aeabi_f2uiz+0x38>
 8000e56:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5a:	4770      	bx	lr
 8000e5c:	f04f 0000 	mov.w	r0, #0
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <carpim>:
*/


//Matris Çarpım Fonk
void carpim(float m[4][4], float n[4][4], float result[4][4])
{
 8000e64:	b5b0      	push	{r4, r5, r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  for(int i=0; i < 4; i++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	e043      	b.n	8000efe <carpim+0x9a>
  {
    for(int j=0; j < 4; j++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	e03a      	b.n	8000ef2 <carpim+0x8e>
    {
      result[i][j] = 0;
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	4413      	add	r3, r2
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	f04f 0100 	mov.w	r1, #0
 8000e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (int k = 0; k < 4; k++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e028      	b.n	8000ee6 <carpim+0x82>
      result[i][j] += m[i][k] * n[k][j];
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fe3a 	bl	8000b38 <__aeabi_fmul>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	18d4      	adds	r4, r2, r3
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	f7ff fd29 	bl	8000928 <__addsf3>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
      for (int k = 0; k < 4; k++)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	ddd3      	ble.n	8000e94 <carpim+0x30>
    for(int j=0; j < 4; j++)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	61bb      	str	r3, [r7, #24]
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	ddc1      	ble.n	8000e7c <carpim+0x18>
  for(int i=0; i < 4; i++)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	3301      	adds	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	ddb8      	ble.n	8000e76 <carpim+0x12>
    }
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bdb0      	pop	{r4, r5, r7, pc}

08000f0e <matris_donusturme>:

//Matris Live Expresion'da Gösterme Fonksiyonu
void matris_donusturme(float ham_matris[4][4], float islenmis_matris[4][4])
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
	for(int i=0;i<4;i++)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	e019      	b.n	8000f52 <matris_donusturme+0x44>
	{
		for(int j=0;j<4;j++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	e010      	b.n	8000f46 <matris_donusturme+0x38>
		{
			islenmis_matris[i][j]=ham_matris[i][j];
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	441a      	add	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	440b      	add	r3, r1
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int j=0;j<4;j++)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	ddeb      	ble.n	8000f24 <matris_donusturme+0x16>
	for(int i=0;i<4;i++)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	dde2      	ble.n	8000f1e <matris_donusturme+0x10>
		}
	}
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <aci_hesaplama>:
  HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
}

//Acı Hesaplama
uint16_t aci_hesaplama(float aci)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	float motor_aci = 3200*(aci/360);
 8000f6c:	4909      	ldr	r1, [pc, #36]	; (8000f94 <aci_hesaplama+0x30>)
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fe96 	bl	8000ca0 <__aeabi_fdiv>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <aci_hesaplama+0x34>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fddd 	bl	8000b38 <__aeabi_fmul>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	60fb      	str	r3, [r7, #12]
	return motor_aci;
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f7ff ff4e 	bl	8000e24 <__aeabi_f2uiz>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b29b      	uxth	r3, r3
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	43b40000 	.word	0x43b40000
 8000f98:	45480000 	.word	0x45480000

08000f9c <map>:

//Map Fonksiyonu
float map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	69b9      	ldr	r1, [r7, #24]
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	1a8a      	subs	r2, r1, r2
 8000fb6:	fb03 f202 	mul.w	r2, r3, r2
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1acb      	subs	r3, r1, r3
 8000fc0:	fb92 f2f3 	sdiv	r2, r2, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fd61 	bl	8000a90 <__aeabi_i2f>
 8000fce:	4603      	mov	r3, r0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_ADC_ConvCpltCallback>:

//ADC CallBack Fonksiyonu
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
	if(hadc -> Instance == ADC1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_ADC_ConvCpltCallback+0x74>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d12c      	bne.n	8001044 <HAL_ADC_ConvCpltCallback+0x6c>
	{
		//d1 d2 ve d3 parametreleri 3 adet POT'tan okunmaktadır.
		Pot1 = map(ADC_Buffer[0],0,4096,0,360);
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_ADC_ConvCpltCallback+0x78>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f7ff ffcd 	bl	8000f9c <map>
 8001002:	4603      	mov	r3, r0
 8001004:	4a13      	ldr	r2, [pc, #76]	; (8001054 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001006:	6013      	str	r3, [r2, #0]
		Pot2 = map(ADC_Buffer[1],0,4096,0,360);
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_ADC_ConvCpltCallback+0x78>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2300      	movs	r3, #0
 8001016:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800101a:	2100      	movs	r1, #0
 800101c:	f7ff ffbe 	bl	8000f9c <map>
 8001020:	4603      	mov	r3, r0
 8001022:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_ADC_ConvCpltCallback+0x80>)
 8001024:	6013      	str	r3, [r2, #0]
		Pot3 = map(ADC_Buffer[2],0,4096,0,360);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_ADC_ConvCpltCallback+0x78>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	4618      	mov	r0, r3
 800102c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2300      	movs	r3, #0
 8001034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001038:	2100      	movs	r1, #0
 800103a:	f7ff ffaf 	bl	8000f9c <map>
 800103e:	4603      	mov	r3, r0
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_ADC_ConvCpltCallback+0x84>)
 8001042:	6013      	str	r3, [r2, #0]
	}
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40012400 	.word	0x40012400
 8001050:	20000038 	.word	0x20000038
 8001054:	20000044 	.word	0x20000044
 8001058:	20000048 	.word	0x20000048
 800105c:	2000004c 	.word	0x2000004c

08001060 <yon_degistir_x>:

//Yon Toggle Yapma Fonk X
void yon_degistir_x(bool buton_input){
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]

	if(buton_input==true){
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d02d      	beq.n	80010cc <yon_degistir_x+0x6c>
		false_sayaci=0;
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <yon_degistir_x+0xa0>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]

		if(yon_degisim_chc==true && if_giris_kontrol==true){
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <yon_degistir_x+0xa4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00f      	beq.n	800109e <yon_degistir_x+0x3e>
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <yon_degistir_x+0xa8>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00b      	beq.n	800109e <yon_degistir_x+0x3e>
			HAL_GPIO_WritePin(DIR_X_GPIO_Port,DIR_X_Pin, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108c:	481f      	ldr	r0, [pc, #124]	; (800110c <yon_degistir_x+0xac>)
 800108e:	f002 ff66 	bl	8003f5e <HAL_GPIO_WritePin>
			if_giris_kontrol=false;
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <yon_degistir_x+0xa8>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
			yon_degisim_chc=false;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <yon_degistir_x+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		}
		if(yon_degisim_chc==false && if_giris_kontrol==true){
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <yon_degistir_x+0xa4>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	f083 0301 	eor.w	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00f      	beq.n	80010cc <yon_degistir_x+0x6c>
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <yon_degistir_x+0xa8>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <yon_degistir_x+0x6c>
			HAL_GPIO_WritePin(DIR_X_GPIO_Port,DIR_X_Pin, 1);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ba:	4814      	ldr	r0, [pc, #80]	; (800110c <yon_degistir_x+0xac>)
 80010bc:	f002 ff4f 	bl	8003f5e <HAL_GPIO_WritePin>
			if_giris_kontrol=false;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <yon_degistir_x+0xa8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
			yon_degisim_chc=true;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <yon_degistir_x+0xa4>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
		}
	}
	if(buton_input==false){
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f083 0301 	eor.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00f      	beq.n	80010f8 <yon_degistir_x+0x98>
		false_sayaci++;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <yon_degistir_x+0xa0>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <yon_degistir_x+0xa0>)
 80010e2:	701a      	strb	r2, [r3, #0]
		if(false_sayaci >= 3){
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <yon_degistir_x+0xa0>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d905      	bls.n	80010f8 <yon_degistir_x+0x98>
			if_giris_kontrol=true;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <yon_degistir_x+0xa8>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
			false_sayaci=0;
 80010f2:	4b03      	ldr	r3, [pc, #12]	; (8001100 <yon_degistir_x+0xa0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000002e 	.word	0x2000002e
 8001104:	2000002c 	.word	0x2000002c
 8001108:	2000002d 	.word	0x2000002d
 800110c:	40010c00 	.word	0x40010c00

08001110 <yon_degistir_y>:

//Yon Toggle Yapma Fonk Y
void yon_degistir_y(bool buton_input){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]

	if(buton_input==true){
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d02b      	beq.n	8001178 <yon_degistir_y+0x68>
		false_sayaci=0;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <yon_degistir_y+0x9c>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]

		if(yon_degisim_chc==true && if_giris_kontrol==true){
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <yon_degistir_y+0xa0>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00e      	beq.n	800114c <yon_degistir_y+0x3c>
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <yon_degistir_y+0xa4>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00a      	beq.n	800114c <yon_degistir_y+0x3c>
			HAL_GPIO_WritePin(DIR_Y_GPIO_Port,DIR_Y_Pin, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2120      	movs	r1, #32
 800113a:	481f      	ldr	r0, [pc, #124]	; (80011b8 <yon_degistir_y+0xa8>)
 800113c:	f002 ff0f 	bl	8003f5e <HAL_GPIO_WritePin>
			if_giris_kontrol=false;
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <yon_degistir_y+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
			yon_degisim_chc=false;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <yon_degistir_y+0xa0>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
		}
		if(yon_degisim_chc==false && if_giris_kontrol==true){
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <yon_degistir_y+0xa0>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	f083 0301 	eor.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00e      	beq.n	8001178 <yon_degistir_y+0x68>
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <yon_degistir_y+0xa4>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00a      	beq.n	8001178 <yon_degistir_y+0x68>
			HAL_GPIO_WritePin(DIR_Y_GPIO_Port,DIR_Y_Pin, 1);
 8001162:	2201      	movs	r2, #1
 8001164:	2120      	movs	r1, #32
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <yon_degistir_y+0xa8>)
 8001168:	f002 fef9 	bl	8003f5e <HAL_GPIO_WritePin>
			if_giris_kontrol=false;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <yon_degistir_y+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
			yon_degisim_chc=true;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <yon_degistir_y+0xa0>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
		}
	}
	if(buton_input==false){
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00f      	beq.n	80011a4 <yon_degistir_y+0x94>
		false_sayaci++;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <yon_degistir_y+0x9c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <yon_degistir_y+0x9c>)
 800118e:	701a      	strb	r2, [r3, #0]
		if(false_sayaci >= 3){
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <yon_degistir_y+0x9c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d905      	bls.n	80011a4 <yon_degistir_y+0x94>
			if_giris_kontrol=true;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <yon_degistir_y+0xa4>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
			false_sayaci=0;
 800119e:	4b03      	ldr	r3, [pc, #12]	; (80011ac <yon_degistir_y+0x9c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000002e 	.word	0x2000002e
 80011b0:	2000002c 	.word	0x2000002c
 80011b4:	2000002d 	.word	0x2000002d
 80011b8:	40010c00 	.word	0x40010c00

080011bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80011bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c0:	b0d6      	sub	sp, #344	; 0x158
 80011c2:	af02      	add	r7, sp, #8
 80011c4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80011cc:	6018      	str	r0, [r3, #0]
	if (htim == &htim1)//10Hz	Kinematik Matris İşlemleri
 80011ce:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4ade      	ldr	r2, [pc, #888]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	f040 865d 	bne.w	8001e9a <HAL_TIM_PeriodElapsedCallback+0xcde>
	{
		float d1 = Pot1;	// Degisken UzunluÄŸu 1. Kol
 80011e0:	4bdd      	ldr	r3, [pc, #884]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		float d2 = Pot2;	// Degisken UzunluÄŸu 2. Kol
 80011e8:	4bdc      	ldr	r3, [pc, #880]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		float d3 = Pot3;	// Degisken UzunluÄŸu 3. Kol
 80011f0:	4bdb      	ldr	r3, [pc, #876]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

		float val = PI/180; //Radyan Çevirme Çarpanı
 80011f8:	4bda      	ldr	r3, [pc, #872]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80011fa:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		float teta_1=90, alfa_1=90, r_1=0, d_1=a1+d1; //1 DH Satır
 80011fe:	4bda      	ldr	r3, [pc, #872]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001200:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001204:	4bd8      	ldr	r3, [pc, #864]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001206:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001212:	49d6      	ldr	r1, [pc, #856]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001214:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8001218:	f7ff fb86 	bl	8000928 <__addsf3>
 800121c:	4603      	mov	r3, r0
 800121e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		float teta_2=90, alfa_2=-90, r_2=0, d_2=a2+d2; //2 DH Satır
 8001222:	4bd1      	ldr	r3, [pc, #836]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001224:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001228:	4bd1      	ldr	r3, [pc, #836]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800122a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001236:	49cf      	ldr	r1, [pc, #828]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001238:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800123c:	f7ff fb74 	bl	8000928 <__addsf3>
 8001240:	4603      	mov	r3, r0
 8001242:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		float teta_3=0, alfa_3=0, r_3=0, d_3=a3+d3; //3 DH Satır
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800125e:	49c6      	ldr	r1, [pc, #792]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001260:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8001264:	f7ff fb60 	bl	8000928 <__addsf3>
 8001268:	4603      	mov	r3, r0
 800126a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

		//T01 matrisi Degiskenleri
		float a_00 = (cos(teta_1*val));
 800126e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001272:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8001276:	f7ff fc5f 	bl	8000b38 <__aeabi_fmul>
 800127a:	4603      	mov	r3, r0
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f9f5 	bl	800066c <__aeabi_f2d>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f004 fce9 	bl	8005c60 <cos>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff faf1 	bl	800087c <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		float a_01 = -sin(teta_1*val)*cos(alfa_1*val);
 80012a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012a4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80012a8:	f7ff fc46 	bl	8000b38 <__aeabi_fmul>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f9dc 	bl	800066c <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f004 fd16 	bl	8005cec <sin>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4614      	mov	r4, r2
 80012c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012ce:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80012d2:	f7ff fc31 	bl	8000b38 <__aeabi_fmul>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f9c7 	bl	800066c <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f004 fcbb 	bl	8005c60 <cos>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4620      	mov	r0, r4
 80012f0:	4629      	mov	r1, r5
 80012f2:	f7fe ff2d 	bl	8000150 <__aeabi_dmul>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fabd 	bl	800087c <__aeabi_d2f>
 8001302:	4603      	mov	r3, r0
 8001304:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		float a_11 = cos(teta_1*val)*cos(alfa_1*val);
 8001308:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800130c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8001310:	f7ff fc12 	bl	8000b38 <__aeabi_fmul>
 8001314:	4603      	mov	r3, r0
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f9a8 	bl	800066c <__aeabi_f2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f004 fc9c 	bl	8005c60 <cos>
 8001328:	4604      	mov	r4, r0
 800132a:	460d      	mov	r5, r1
 800132c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001330:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8001334:	f7ff fc00 	bl	8000b38 <__aeabi_fmul>
 8001338:	4603      	mov	r3, r0
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f996 	bl	800066c <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f004 fc8a 	bl	8005c60 <cos>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7fe fefc 	bl	8000150 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff fa8c 	bl	800087c <__aeabi_d2f>
 8001364:	4603      	mov	r3, r0
 8001366:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		float a_12 = -cos(teta_1*val)*sin(alfa_1*val);
 800136a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800136e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8001372:	f7ff fbe1 	bl	8000b38 <__aeabi_fmul>
 8001376:	4603      	mov	r3, r0
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f977 	bl	800066c <__aeabi_f2d>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f004 fc6b 	bl	8005c60 <cos>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4690      	mov	r8, r2
 8001390:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001394:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001398:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800139c:	f7ff fbcc 	bl	8000b38 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f962 	bl	800066c <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f004 fc9c 	bl	8005cec <sin>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4640      	mov	r0, r8
 80013ba:	4649      	mov	r1, r9
 80013bc:	f7fe fec8 	bl	8000150 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fa58 	bl	800087c <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		float a_22 = cos(alfa_1*val);
 80013d2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013d6:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80013da:	f7ff fbad 	bl	8000b38 <__aeabi_fmul>
 80013de:	4603      	mov	r3, r0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f943 	bl	800066c <__aeabi_f2d>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f004 fc37 	bl	8005c60 <cos>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fa3f 	bl	800087c <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

		//T12 matrisi Degiskenleri
		float b_00 = cos(teta_2*val);
 8001404:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001408:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800140c:	f7ff fb94 	bl	8000b38 <__aeabi_fmul>
 8001410:	4603      	mov	r3, r0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f92a 	bl	800066c <__aeabi_f2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f004 fc1e 	bl	8005c60 <cos>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fa26 	bl	800087c <__aeabi_d2f>
 8001430:	4603      	mov	r3, r0
 8001432:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		float b_01 = -sin(teta_2*val)*cos(alfa_2*val);
 8001436:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800143a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800143e:	f7ff fb7b 	bl	8000b38 <__aeabi_fmul>
 8001442:	4603      	mov	r3, r0
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f911 	bl	800066c <__aeabi_f2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f004 fc4b 	bl	8005cec <sin>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	613a      	str	r2, [r7, #16]
 800145c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001466:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800146a:	f7ff fb65 	bl	8000b38 <__aeabi_fmul>
 800146e:	4603      	mov	r3, r0
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f8fb 	bl	800066c <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f004 fbef 	bl	8005c60 <cos>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800148a:	f7fe fe61 	bl	8000150 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff f9f1 	bl	800087c <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		float b_11 = cos(teta_2*val)*cos(alfa_2*val);
 80014a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014a4:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80014a8:	f7ff fb46 	bl	8000b38 <__aeabi_fmul>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f8dc 	bl	800066c <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f004 fbd0 	bl	8005c60 <cos>
 80014c0:	4604      	mov	r4, r0
 80014c2:	460d      	mov	r5, r1
 80014c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014c8:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80014cc:	f7ff fb34 	bl	8000b38 <__aeabi_fmul>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f8ca 	bl	800066c <__aeabi_f2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f004 fbbe 	bl	8005c60 <cos>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fe30 	bl	8000150 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff f9c0 	bl	800087c <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		float b_12 = -cos(teta_2*val)*sin(alfa_2*val);
 8001502:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001506:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800150a:	f7ff fb15 	bl	8000b38 <__aeabi_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f8ab 	bl	800066c <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f004 fb9f 	bl	8005c60 <cos>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001532:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001536:	f7ff faff 	bl	8000b38 <__aeabi_fmul>
 800153a:	4603      	mov	r3, r0
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f895 	bl	800066c <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f004 fbcf 	bl	8005cec <sin>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	e013      	b.n	800157c <HAL_TIM_PeriodElapsedCallback+0x3c0>
 8001554:	20000224 	.word	0x20000224
 8001558:	20000044 	.word	0x20000044
 800155c:	20000048 	.word	0x20000048
 8001560:	2000004c 	.word	0x2000004c
 8001564:	3c8efa35 	.word	0x3c8efa35
 8001568:	42b40000 	.word	0x42b40000
 800156c:	42700000 	.word	0x42700000
 8001570:	c2b40000 	.word	0xc2b40000
 8001574:	42480000 	.word	0x42480000
 8001578:	42200000 	.word	0x42200000
 800157c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001580:	f7fe fde6 	bl	8000150 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff f976 	bl	800087c <__aeabi_d2f>
 8001590:	4603      	mov	r3, r0
 8001592:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		float b_22 = cos(alfa_2*val);
 8001596:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800159a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800159e:	f7ff facb 	bl	8000b38 <__aeabi_fmul>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff f861 	bl	800066c <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f004 fb55 	bl	8005c60 <cos>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff f95d 	bl	800087c <__aeabi_d2f>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

		//T23 matrisi Degiskenleri
		float c_01 = (-sin(teta_3*val)*cos(alfa_3*val));
 80015c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015cc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80015d0:	f7ff fab2 	bl	8000b38 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f848 	bl	800066c <__aeabi_f2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f004 fb82 	bl	8005cec <sin>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	603a      	str	r2, [r7, #0]
 80015ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015f8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80015fc:	f7ff fa9c 	bl	8000b38 <__aeabi_fmul>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f832 	bl	800066c <__aeabi_f2d>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f004 fb26 	bl	8005c60 <cos>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800161c:	f7fe fd98 	bl	8000150 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff f928 	bl	800087c <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		float c_12 = -cos(teta_3*val)*sin(alfa_3*val);
 8001632:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001636:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800163a:	f7ff fa7d 	bl	8000b38 <__aeabi_fmul>
 800163e:	4603      	mov	r3, r0
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff f813 	bl	800066c <__aeabi_f2d>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f004 fb07 	bl	8005c60 <cos>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4692      	mov	sl, r2
 8001658:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800165c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001660:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001664:	f7ff fa68 	bl	8000b38 <__aeabi_fmul>
 8001668:	4603      	mov	r3, r0
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fffe 	bl	800066c <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f004 fb38 	bl	8005cec <sin>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4650      	mov	r0, sl
 8001682:	4659      	mov	r1, fp
 8001684:	f7fe fd64 	bl	8000150 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff f8f4 	bl	800087c <__aeabi_d2f>
 8001694:	4603      	mov	r3, r0
 8001696:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

		//ASIL MATRÄ°SLER
		float a[4][4]={
 800169a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800169e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016a2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80016ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016b0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80016b4:	605a      	str	r2, [r3, #4]
			{ a_00, a_01, sin(teta_1*val)*sin(alfa_1*val), r_1*cos(teta_1*val)},
 80016b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016ba:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80016be:	f7ff fa3b 	bl	8000b38 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ffd1 	bl	800066c <__aeabi_f2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f004 fb0b 	bl	8005cec <sin>
 80016d6:	4604      	mov	r4, r0
 80016d8:	460d      	mov	r5, r1
 80016da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016de:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80016e2:	f7ff fa29 	bl	8000b38 <__aeabi_fmul>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ffbf 	bl	800066c <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f004 faf9 	bl	8005cec <sin>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4620      	mov	r0, r4
 8001700:	4629      	mov	r1, r5
 8001702:	f7fe fd25 	bl	8000150 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff f8b5 	bl	800087c <__aeabi_d2f>
 8001712:	4602      	mov	r2, r0
		float a[4][4]={
 8001714:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800171c:	609a      	str	r2, [r3, #8]
			{ a_00, a_01, sin(teta_1*val)*sin(alfa_1*val), r_1*cos(teta_1*val)},
 800171e:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8001722:	f7fe ffa3 	bl	800066c <__aeabi_f2d>
 8001726:	4604      	mov	r4, r0
 8001728:	460d      	mov	r5, r1
 800172a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800172e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8001732:	f7ff fa01 	bl	8000b38 <__aeabi_fmul>
 8001736:	4603      	mov	r3, r0
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe ff97 	bl	800066c <__aeabi_f2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f004 fa8b 	bl	8005c60 <cos>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f7fe fcfd 	bl	8000150 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff f88d 	bl	800087c <__aeabi_d2f>
 8001762:	4602      	mov	r2, r0
		float a[4][4]={
 8001764:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800176c:	60da      	str	r2, [r3, #12]
			{ sin(teta_1*val), a_11, a_12, r_1*sin(teta_1*val)},
 800176e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001772:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8001776:	f7ff f9df 	bl	8000b38 <__aeabi_fmul>
 800177a:	4603      	mov	r3, r0
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe ff75 	bl	800066c <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f004 faaf 	bl	8005cec <sin>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff f871 	bl	800087c <__aeabi_d2f>
 800179a:	4602      	mov	r2, r0
		float a[4][4]={
 800179c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80017a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017a4:	611a      	str	r2, [r3, #16]
 80017a6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80017aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017ae:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80017b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80017bc:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80017c0:	619a      	str	r2, [r3, #24]
			{ sin(teta_1*val), a_11, a_12, r_1*sin(teta_1*val)},
 80017c2:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80017c6:	f7fe ff51 	bl	800066c <__aeabi_f2d>
 80017ca:	4604      	mov	r4, r0
 80017cc:	460d      	mov	r5, r1
 80017ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017d2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80017d6:	f7ff f9af 	bl	8000b38 <__aeabi_fmul>
 80017da:	4603      	mov	r3, r0
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe ff45 	bl	800066c <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f004 fa7f 	bl	8005cec <sin>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4620      	mov	r0, r4
 80017f4:	4629      	mov	r1, r5
 80017f6:	f7fe fcab 	bl	8000150 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f83b 	bl	800087c <__aeabi_d2f>
 8001806:	4602      	mov	r2, r0
		float a[4][4]={
 8001808:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800180c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001810:	61da      	str	r2, [r3, #28]
 8001812:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
			{0, sin(alfa_1*val), a_22, d_1},
 8001820:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001824:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8001828:	f7ff f986 	bl	8000b38 <__aeabi_fmul>
 800182c:	4603      	mov	r3, r0
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe ff1c 	bl	800066c <__aeabi_f2d>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f004 fa56 	bl	8005cec <sin>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f818 	bl	800087c <__aeabi_d2f>
 800184c:	4602      	mov	r2, r0
		float a[4][4]={
 800184e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
 8001858:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800185c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001860:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
 8001866:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800186a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800186e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
 8001874:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	631a      	str	r2, [r3, #48]	; 0x30
 8001882:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	635a      	str	r2, [r3, #52]	; 0x34
 8001890:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001894:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
 800189e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80018a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80018a6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018aa:	63da      	str	r2, [r3, #60]	; 0x3c
			{0, 0, 0, 1}};

		float b[4][4]={
 80018ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80018b0:	663b      	str	r3, [r7, #96]	; 0x60
 80018b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018b6:	667b      	str	r3, [r7, #100]	; 0x64
			{ b_00, b_01, sin(teta_2*val)*sin(alfa_2*val), r_2*cos(teta_2*val)},
 80018b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018bc:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80018c0:	f7ff f93a 	bl	8000b38 <__aeabi_fmul>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fed0 	bl	800066c <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f004 fa0a 	bl	8005cec <sin>
 80018d8:	4604      	mov	r4, r0
 80018da:	460d      	mov	r5, r1
 80018dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018e0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80018e4:	f7ff f928 	bl	8000b38 <__aeabi_fmul>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe febe 	bl	800066c <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f004 f9f8 	bl	8005cec <sin>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4620      	mov	r0, r4
 8001902:	4629      	mov	r1, r5
 8001904:	f7fe fc24 	bl	8000150 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7fe ffb4 	bl	800087c <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
		float b[4][4]={
 8001916:	66bb      	str	r3, [r7, #104]	; 0x68
			{ b_00, b_01, sin(teta_2*val)*sin(alfa_2*val), r_2*cos(teta_2*val)},
 8001918:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800191c:	f7fe fea6 	bl	800066c <__aeabi_f2d>
 8001920:	4604      	mov	r4, r0
 8001922:	460d      	mov	r5, r1
 8001924:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001928:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800192c:	f7ff f904 	bl	8000b38 <__aeabi_fmul>
 8001930:	4603      	mov	r3, r0
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fe9a 	bl	800066c <__aeabi_f2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f004 f98e 	bl	8005c60 <cos>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4620      	mov	r0, r4
 800194a:	4629      	mov	r1, r5
 800194c:	f7fe fc00 	bl	8000150 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7fe ff90 	bl	800087c <__aeabi_d2f>
 800195c:	4603      	mov	r3, r0
		float b[4][4]={
 800195e:	66fb      	str	r3, [r7, #108]	; 0x6c
			{ sin(teta_2*val), b_11, b_12, r_2*sin(teta_2*val)},
 8001960:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001964:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8001968:	f7ff f8e6 	bl	8000b38 <__aeabi_fmul>
 800196c:	4603      	mov	r3, r0
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe7c 	bl	800066c <__aeabi_f2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f004 f9b6 	bl	8005cec <sin>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7fe ff78 	bl	800087c <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
		float b[4][4]={
 800198e:	673b      	str	r3, [r7, #112]	; 0x70
 8001990:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001994:	677b      	str	r3, [r7, #116]	; 0x74
 8001996:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800199a:	67bb      	str	r3, [r7, #120]	; 0x78
			{ sin(teta_2*val), b_11, b_12, r_2*sin(teta_2*val)},
 800199c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80019a0:	f7fe fe64 	bl	800066c <__aeabi_f2d>
 80019a4:	4604      	mov	r4, r0
 80019a6:	460d      	mov	r5, r1
 80019a8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019ac:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80019b0:	f7ff f8c2 	bl	8000b38 <__aeabi_fmul>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fe58 	bl	800066c <__aeabi_f2d>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f004 f992 	bl	8005cec <sin>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fbbe 	bl	8000150 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7fe ff4e 	bl	800087c <__aeabi_d2f>
 80019e0:	4603      	mov	r3, r0
		float b[4][4]={
 80019e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			{0, sin(alfa_2*val), b_22, d_2},
 80019ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019f0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80019f4:	f7ff f8a0 	bl	8000b38 <__aeabi_fmul>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fe36 	bl	800066c <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f004 f970 	bl	8005cec <sin>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7fe ff32 	bl	800087c <__aeabi_d2f>
 8001a18:	4603      	mov	r3, r0
		float b[4][4]={
 8001a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001a22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			{0, 0, 0, 1}};

		float c[4][4]={
			{cos(teta_3*val), c_01, sin(teta_3*val)*sin(alfa_3*val), r_3*cos(teta_3*val)},
 8001a4e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a52:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001a56:	f7ff f86f 	bl	8000b38 <__aeabi_fmul>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fe05 	bl	800066c <__aeabi_f2d>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f004 f8f9 	bl	8005c60 <cos>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7fe ff01 	bl	800087c <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
		float c[4][4]={
 8001a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			{cos(teta_3*val), c_01, sin(teta_3*val)*sin(alfa_3*val), r_3*cos(teta_3*val)},
 8001a88:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001a8c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001a90:	f7ff f852 	bl	8000b38 <__aeabi_fmul>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fde8 	bl	800066c <__aeabi_f2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f004 f922 	bl	8005cec <sin>
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	460d      	mov	r5, r1
 8001aac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ab0:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001ab4:	f7ff f840 	bl	8000b38 <__aeabi_fmul>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fdd6 	bl	800066c <__aeabi_f2d>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f004 f910 	bl	8005cec <sin>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f7fe fb3c 	bl	8000150 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7fe fecc 	bl	800087c <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
		float c[4][4]={
 8001ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			{cos(teta_3*val), c_01, sin(teta_3*val)*sin(alfa_3*val), r_3*cos(teta_3*val)},
 8001aea:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001aee:	f7fe fdbd 	bl	800066c <__aeabi_f2d>
 8001af2:	4604      	mov	r4, r0
 8001af4:	460d      	mov	r5, r1
 8001af6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001afa:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001afe:	f7ff f81b 	bl	8000b38 <__aeabi_fmul>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fdb1 	bl	800066c <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f004 f8a5 	bl	8005c60 <cos>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fb17 	bl	8000150 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7fe fea7 	bl	800087c <__aeabi_d2f>
 8001b2e:	4603      	mov	r3, r0
		float c[4][4]={
 8001b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			{ sin(teta_3*val), cos(teta_3*val)*cos(alfa_3*val), c_12, r_3*sin(teta_3*val)},
 8001b34:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b38:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001b3c:	f7fe fffc 	bl	8000b38 <__aeabi_fmul>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd92 	bl	800066c <__aeabi_f2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f004 f8cc 	bl	8005cec <sin>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7fe fe8e 	bl	800087c <__aeabi_d2f>
 8001b60:	4603      	mov	r3, r0
		float c[4][4]={
 8001b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			{ sin(teta_3*val), cos(teta_3*val)*cos(alfa_3*val), c_12, r_3*sin(teta_3*val)},
 8001b66:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b6a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001b6e:	f7fe ffe3 	bl	8000b38 <__aeabi_fmul>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fd79 	bl	800066c <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f004 f86d 	bl	8005c60 <cos>
 8001b86:	4604      	mov	r4, r0
 8001b88:	460d      	mov	r5, r1
 8001b8a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b8e:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001b92:	f7fe ffd1 	bl	8000b38 <__aeabi_fmul>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fd67 	bl	800066c <__aeabi_f2d>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f004 f85b 	bl	8005c60 <cos>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4620      	mov	r0, r4
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7fe facd 	bl	8000150 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7fe fe5d 	bl	800087c <__aeabi_d2f>
 8001bc2:	4603      	mov	r3, r0
		float c[4][4]={
 8001bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			{ sin(teta_3*val), cos(teta_3*val)*cos(alfa_3*val), c_12, r_3*sin(teta_3*val)},
 8001bd0:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001bd4:	f7fe fd4a 	bl	800066c <__aeabi_f2d>
 8001bd8:	4604      	mov	r4, r0
 8001bda:	460d      	mov	r5, r1
 8001bdc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001be0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001be4:	f7fe ffa8 	bl	8000b38 <__aeabi_fmul>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fd3e 	bl	800066c <__aeabi_f2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f004 f878 	bl	8005cec <sin>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe faa4 	bl	8000150 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe fe34 	bl	800087c <__aeabi_d2f>
 8001c14:	4603      	mov	r3, r0
		float c[4][4]={
 8001c16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			{0, sin(alfa_3*val), cos(alfa_3*val), d_3},
 8001c22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c26:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001c2a:	f7fe ff85 	bl	8000b38 <__aeabi_fmul>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fd1b 	bl	800066c <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f004 f855 	bl	8005cec <sin>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe fe17 	bl	800087c <__aeabi_d2f>
 8001c4e:	4603      	mov	r3, r0
		float c[4][4]={
 8001c50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			{0, sin(alfa_3*val), cos(alfa_3*val), d_3},
 8001c54:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c58:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001c5c:	f7fe ff6c 	bl	8000b38 <__aeabi_fmul>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fd02 	bl	800066c <__aeabi_f2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f003 fff6 	bl	8005c60 <cos>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7fe fdfe 	bl	800087c <__aeabi_d2f>
 8001c80:	4603      	mov	r3, r0
		float c[4][4]={
 8001c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001ca6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			{0, 0, 0, 1}};

		  matris_donusturme(a, T01);
 8001cae:	f107 0320 	add.w	r3, r7, #32
 8001cb2:	49a2      	ldr	r1, [pc, #648]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f92a 	bl	8000f0e <matris_donusturme>
		  matris_donusturme(b, T12);
 8001cba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cbe:	49a0      	ldr	r1, [pc, #640]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f924 	bl	8000f0e <matris_donusturme>
		  matris_donusturme(c, T23);
 8001cc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cca:	499e      	ldr	r1, [pc, #632]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f91e 	bl	8000f0e <matris_donusturme>

		  carpim(T01, T12, T02);
 8001cd2:	4a9d      	ldr	r2, [pc, #628]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 8001cd4:	499a      	ldr	r1, [pc, #616]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0xd84>)
 8001cd6:	4899      	ldr	r0, [pc, #612]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0xd80>)
 8001cd8:	f7ff f8c4 	bl	8000e64 <carpim>
		  carpim(T02, T23, T03);
 8001cdc:	4a9b      	ldr	r2, [pc, #620]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0xd90>)
 8001cde:	4999      	ldr	r1, [pc, #612]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0xd88>)
 8001ce0:	4899      	ldr	r0, [pc, #612]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0xd8c>)
 8001ce2:	f7ff f8bf 	bl	8000e64 <carpim>

		  P[0][0] = T03[0][3];
 8001ce6:	4b99      	ldr	r3, [pc, #612]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0xd90>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	4a99      	ldr	r2, [pc, #612]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001cec:	6013      	str	r3, [r2, #0]
		  P[1][0] = T03[1][3];
 8001cee:	4b97      	ldr	r3, [pc, #604]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0xd90>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a97      	ldr	r2, [pc, #604]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001cf4:	6053      	str	r3, [r2, #4]
		  P[2][0] = T03[2][3];
 8001cf6:	4b95      	ldr	r3, [pc, #596]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0xd90>)
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	4a95      	ldr	r2, [pc, #596]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001cfc:	6093      	str	r3, [r2, #8]

		  //X ve Y ekseni Ölçekleme
		  eksen_X = map(P[0][0],50,405,0,59);
 8001cfe:	4b94      	ldr	r3, [pc, #592]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f868 	bl	8000dd8 <__aeabi_f2iz>
 8001d08:	233b      	movs	r3, #59	; 0x3b
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f240 1295 	movw	r2, #405	; 0x195
 8001d12:	2132      	movs	r1, #50	; 0x32
 8001d14:	f7ff f942 	bl	8000f9c <map>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a8e      	ldr	r2, [pc, #568]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 8001d1c:	6013      	str	r3, [r2, #0]
		  eksen_Y = map(P[1][0],-40,-395,0,130);
 8001d1e:	4b8c      	ldr	r3, [pc, #560]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0xd94>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f858 	bl	8000dd8 <__aeabi_f2iz>
 8001d28:	2382      	movs	r3, #130	; 0x82
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f46f 72c5 	mvn.w	r2, #394	; 0x18a
 8001d32:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8001d36:	f7ff f931 	bl	8000f9c <map>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4a86      	ldr	r2, [pc, #536]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8001d3e:	6013      	str	r3, [r2, #0]


		  if(adım_takip == true)//
 8001d40:	4b86      	ldr	r3, [pc, #536]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0xda0>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d031      	beq.n	8001dac <HAL_TIM_PeriodElapsedCallback+0xbf0>
		  {
			  x_ekseni_mesafe_aci_cevrimi = ((eksen_X*10) / motor_tam_tur_mesafe)*360;
 8001d48:	4b82      	ldr	r3, [pc, #520]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4984      	ldr	r1, [pc, #528]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fef2 	bl	8000b38 <__aeabi_fmul>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ffa0 	bl	8000ca0 <__aeabi_fdiv>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4980      	ldr	r1, [pc, #512]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fee7 	bl	8000b38 <__aeabi_fmul>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f859 	bl	8000e24 <__aeabi_f2uiz>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b7c      	ldr	r3, [pc, #496]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8001d78:	801a      	strh	r2, [r3, #0]
			  y_ekseni_mesafe_aci_cevrimi = ((eksen_Y*10) / motor_tam_tur_mesafe)*360;
 8001d7a:	4b77      	ldr	r3, [pc, #476]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4978      	ldr	r1, [pc, #480]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fed9 	bl	8000b38 <__aeabi_fmul>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe ff87 	bl	8000ca0 <__aeabi_fdiv>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4973      	ldr	r1, [pc, #460]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fece 	bl	8000b38 <__aeabi_fmul>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f840 	bl	8000e24 <__aeabi_f2uiz>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b70      	ldr	r3, [pc, #448]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8001daa:	801a      	strh	r2, [r3, #0]
		  }

		  if(adım_takip == false)
 8001dac:	4b6b      	ldr	r3, [pc, #428]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0xda0>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f083 0301 	eor.w	r3, r3, #1
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d031      	beq.n	8001e1e <HAL_TIM_PeriodElapsedCallback+0xc62>
		  {
			  x_ekseni_mesafe_aci_cevrimi_son = ((eksen_X*10) / motor_tam_tur_mesafe)*360;
 8001dba:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0xd98>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4968      	ldr	r1, [pc, #416]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe feb9 	bl	8000b38 <__aeabi_fmul>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ff67 	bl	8000ca0 <__aeabi_fdiv>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4963      	ldr	r1, [pc, #396]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe feae 	bl	8000b38 <__aeabi_fmul>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f820 	bl	8000e24 <__aeabi_f2uiz>
 8001de4:	4603      	mov	r3, r0
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 8001dea:	801a      	strh	r2, [r3, #0]
			  y_ekseni_mesafe_aci_cevrimi_son = ((eksen_Y*10) / motor_tam_tur_mesafe)*360;
 8001dec:	4b5a      	ldr	r3, [pc, #360]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0xd9c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	495b      	ldr	r1, [pc, #364]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0xda4>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fea0 	bl	8000b38 <__aeabi_fmul>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe ff4e 	bl	8000ca0 <__aeabi_fdiv>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4957      	ldr	r1, [pc, #348]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fe95 	bl	8000b38 <__aeabi_fmul>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f807 	bl	8000e24 <__aeabi_f2uiz>
 8001e16:	4603      	mov	r3, r0
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 8001e1c:	801a      	strh	r2, [r3, #0]
		  }


		  //Acı Değerleri Yazdırma Koşulları
		  if(x_ekseni_mesafe_aci_cevrimi > x_ekseni_mesafe_aci_cevrimi_son)
 8001e1e:	4b52      	ldr	r3, [pc, #328]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8001e20:	881a      	ldrh	r2, [r3, #0]
 8001e22:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d90a      	bls.n	8001e40 <HAL_TIM_PeriodElapsedCallback+0xc84>
		  {
			  yon_degistir_x(1);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7ff f918 	bl	8001060 <yon_degistir_x>
			  x_yeni_dönme_acı_cevrimi = x_ekseni_mesafe_aci_cevrimi- x_ekseni_mesafe_aci_cevrimi_son;
 8001e30:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8001e32:	881a      	ldrh	r2, [r3, #0]
 8001e34:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 8001e3e:	801a      	strh	r2, [r3, #0]
		  }

		  if(x_ekseni_mesafe_aci_cevrimi < x_ekseni_mesafe_aci_cevrimi_son)
 8001e40:	4b49      	ldr	r3, [pc, #292]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8001e42:	881a      	ldrh	r2, [r3, #0]
 8001e44:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0xca0>
		  {
			  x_yeni_dönme_acı_cevrimi = x_ekseni_mesafe_aci_cevrimi- x_ekseni_mesafe_aci_cevrimi_son;
 8001e4c:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8001e4e:	881a      	ldrh	r2, [r3, #0]
 8001e50:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0xdbc>)
 8001e5a:	801a      	strh	r2, [r3, #0]
		  }

		  if(y_ekseni_mesafe_aci_cevrimi > y_ekseni_mesafe_aci_cevrimi_son)
 8001e5c:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d90a      	bls.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0xcc2>
		  {
			  yon_degistir_y(1);
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f7ff f951 	bl	8001110 <yon_degistir_y>
			  y_yeni_dönme_acı_cevrimi = y_ekseni_mesafe_aci_cevrimi- y_ekseni_mesafe_aci_cevrimi_son;
 8001e6e:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8001e70:	881a      	ldrh	r2, [r3, #0]
 8001e72:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b40      	ldr	r3, [pc, #256]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8001e7c:	801a      	strh	r2, [r3, #0]
		  }

		  if(y_ekseni_mesafe_aci_cevrimi < y_ekseni_mesafe_aci_cevrimi_son)
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d207      	bcs.n	8001e9a <HAL_TIM_PeriodElapsedCallback+0xcde>
		  {
			  y_yeni_dönme_acı_cevrimi = y_ekseni_mesafe_aci_cevrimi- y_ekseni_mesafe_aci_cevrimi_son;
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8001e8c:	881a      	ldrh	r2, [r3, #0]
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0xdb8>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0xdc0>)
 8001e98:	801a      	strh	r2, [r3, #0]


	}


	if (htim == &htim2)//2KHz	Genel Step Motor Ayarları
 8001e9a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e9e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a36      	ldr	r2, [pc, #216]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0xdc4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d17a      	bne.n	8001fa0 <HAL_TIM_PeriodElapsedCallback+0xde4>
	{

		HAL_GPIO_WritePin(EN_X_GPIO_Port, EN_X_Pin, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eb0:	4834      	ldr	r0, [pc, #208]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0xdc8>)
 8001eb2:	f002 f854 	bl	8003f5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_Y_GPIO_Port, EN_Y_Pin, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2110      	movs	r1, #16
 8001eba:	4832      	ldr	r0, [pc, #200]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0xdc8>)
 8001ebc:	f002 f84f 	bl	8003f5e <HAL_GPIO_WritePin>

		yon_degistir_x(HAL_GPIO_ReadPin(X_YON_GPIO_Port, X_YON_Pin));
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	4830      	ldr	r0, [pc, #192]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0xdc8>)
 8001ec4:	f002 f834 	bl	8003f30 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f8c3 	bl	8001060 <yon_degistir_x>
		yon_degistir_y(HAL_GPIO_ReadPin(Y_YON_GPIO_Port, Y_YON_Pin));
 8001eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ede:	482a      	ldr	r0, [pc, #168]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0xdcc>)
 8001ee0:	f002 f826 	bl	8003f30 <HAL_GPIO_ReadPin>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	bf14      	ite	ne
 8001eea:	2301      	movne	r3, #1
 8001eec:	2300      	moveq	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f90d 	bl	8001110 <yon_degistir_y>

		if(HAL_GPIO_ReadPin(Y_ON_OFF_GPIO_Port, Y_ON_OFF_Pin)){
 8001ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001efa:	4823      	ldr	r0, [pc, #140]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0xdcc>)
 8001efc:	f002 f818 	bl	8003f30 <HAL_GPIO_ReadPin>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d008      	beq.n	8001f18 <HAL_TIM_PeriodElapsedCallback+0xd5c>
			hareket_izin_y=true;
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0xdd0>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]

			adım_takip = true;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0xda0>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Start_IT(&htim4);
 8001f12:	481f      	ldr	r0, [pc, #124]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0xdd4>)
 8001f14:	f002 fd6a 	bl	80049ec <HAL_TIM_Base_Start_IT>
		}

		if(HAL_GPIO_ReadPin(X_ON_OFF_GPIO_Port, X_ON_OFF_Pin)){
 8001f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1c:	481d      	ldr	r0, [pc, #116]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0xdd8>)
 8001f1e:	f002 f807 	bl	8003f30 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d03b      	beq.n	8001fa0 <HAL_TIM_PeriodElapsedCallback+0xde4>
			hareket_izin_x=true;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0xddc>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]

			adım_takip = true;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0xda0>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Start_IT(&htim3);
 8001f34:	4819      	ldr	r0, [pc, #100]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0xde0>)
 8001f36:	f002 fd59 	bl	80049ec <HAL_TIM_Base_Start_IT>
 8001f3a:	e031      	b.n	8001fa0 <HAL_TIM_PeriodElapsedCallback+0xde4>
 8001f3c:	20000058 	.word	0x20000058
 8001f40:	20000098 	.word	0x20000098
 8001f44:	200000d8 	.word	0x200000d8
 8001f48:	20000118 	.word	0x20000118
 8001f4c:	20000158 	.word	0x20000158
 8001f50:	20000198 	.word	0x20000198
 8001f54:	20000050 	.word	0x20000050
 8001f58:	20000054 	.word	0x20000054
 8001f5c:	20000036 	.word	0x20000036
 8001f60:	41200000 	.word	0x41200000
 8001f64:	43b40000 	.word	0x43b40000
 8001f68:	200001a4 	.word	0x200001a4
 8001f6c:	200001a6 	.word	0x200001a6
 8001f70:	200001a8 	.word	0x200001a8
 8001f74:	200001aa 	.word	0x200001aa
 8001f78:	200001ac 	.word	0x200001ac
 8001f7c:	200001ae 	.word	0x200001ae
 8001f80:	2000026c 	.word	0x2000026c
 8001f84:	40010c00 	.word	0x40010c00
 8001f88:	40010800 	.word	0x40010800
 8001f8c:	20000035 	.word	0x20000035
 8001f90:	200002fc 	.word	0x200002fc
 8001f94:	40011000 	.word	0x40011000
 8001f98:	20000034 	.word	0x20000034
 8001f9c:	200002b4 	.word	0x200002b4
		}
	}

	if (htim == &htim3)//2KHz	X Ekseni Step Motor Hareket
 8001fa0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001fa4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a62      	ldr	r2, [pc, #392]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d15a      	bne.n	8002066 <HAL_TIM_PeriodElapsedCallback+0xeaa>
	{
		if(hareket_izin_x==true){
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00c      	beq.n	8001fd2 <HAL_TIM_PeriodElapsedCallback+0xe16>
			limit_x=aci_hesaplama(x_ekseni_mesafe_aci_cevrimi);
 8001fb8:	4b60      	ldr	r3, [pc, #384]	; (800213c <HAL_TIM_PeriodElapsedCallback+0xf80>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fd63 	bl	8000a88 <__aeabi_ui2f>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe ffcd 	bl	8000f64 <aci_hesaplama>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b5c      	ldr	r3, [pc, #368]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8001fd0:	801a      	strh	r2, [r3, #0]
		}

		HAL_GPIO_TogglePin(STEP_X_GPIO_Port, STEP_X_Pin);
 8001fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fd6:	485b      	ldr	r0, [pc, #364]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 8001fd8:	f001 ffd9 	bl	8003f8e <HAL_GPIO_TogglePin>
		sayac_x++;
 8001fdc:	4b5a      	ldr	r3, [pc, #360]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	4b58      	ldr	r3, [pc, #352]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 8001fe6:	801a      	strh	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(LimitSwitch_X1_GPIO_Port, LimitSwitch_X1_Pin)){
 8001fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fec:	4855      	ldr	r0, [pc, #340]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 8001fee:	f001 ff9f 	bl	8003f30 <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00f      	beq.n	8002018 <HAL_TIM_PeriodElapsedCallback+0xe5c>
			yon_degistir_x(1);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7ff f831 	bl	8001060 <yon_degistir_x>
			sayac_x=0;
 8001ffe:	4b52      	ldr	r3, [pc, #328]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 8002000:	2200      	movs	r2, #0
 8002002:	801a      	strh	r2, [r3, #0]
			limit_x=aci_hesaplama(75);
 8002004:	4851      	ldr	r0, [pc, #324]	; (800214c <HAL_TIM_PeriodElapsedCallback+0xf90>)
 8002006:	f7fe ffad 	bl	8000f64 <aci_hesaplama>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8002010:	801a      	strh	r2, [r3, #0]
			hareket_izin_x=false;
 8002012:	4b49      	ldr	r3, [pc, #292]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(LimitSwitch_X2_GPIO_Port, LimitSwitch_X2_Pin)){
 8002018:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800201c:	484c      	ldr	r0, [pc, #304]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0xf94>)
 800201e:	f001 ff87 	bl	8003f30 <HAL_GPIO_ReadPin>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00f      	beq.n	8002048 <HAL_TIM_PeriodElapsedCallback+0xe8c>
			yon_degistir_x(1);
 8002028:	2001      	movs	r0, #1
 800202a:	f7ff f819 	bl	8001060 <yon_degistir_x>
			sayac_x=0;
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 8002030:	2200      	movs	r2, #0
 8002032:	801a      	strh	r2, [r3, #0]
			limit_x=aci_hesaplama(75);
 8002034:	4845      	ldr	r0, [pc, #276]	; (800214c <HAL_TIM_PeriodElapsedCallback+0xf90>)
 8002036:	f7fe ff95 	bl	8000f64 <aci_hesaplama>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 8002040:	801a      	strh	r2, [r3, #0]
			hareket_izin_x=false;
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0xf7c>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
		}

		if(sayac_x >= limit_x){
 8002048:	4b3f      	ldr	r3, [pc, #252]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 800204a:	881a      	ldrh	r2, [r3, #0]
 800204c:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xf84>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d308      	bcc.n	8002066 <HAL_TIM_PeriodElapsedCallback+0xeaa>
			sayac_x=0;
 8002054:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0xf8c>)
 8002056:	2200      	movs	r2, #0
 8002058:	801a      	strh	r2, [r3, #0]
			adım_takip = false;
 800205a:	4b3e      	ldr	r3, [pc, #248]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Stop_IT(&htim3);
 8002060:	4834      	ldr	r0, [pc, #208]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xf78>)
 8002062:	f002 fd15 	bl	8004a90 <HAL_TIM_Base_Stop_IT>

			//HAL_TIM_Base_Stop_IT(&htim1);
		}
	}

	if (htim == &htim4)//2KHz	Y Ekseni Step Motor Hareket
 8002066:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800206a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a39      	ldr	r2, [pc, #228]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d157      	bne.n	8002126 <HAL_TIM_PeriodElapsedCallback+0xf6a>
	{
		if(hareket_izin_y==true){
 8002076:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <HAL_TIM_PeriodElapsedCallback+0xedc>
			limit_y=aci_hesaplama(y_ekseni_mesafe_aci_cevrimi);
 800207e:	4b38      	ldr	r3, [pc, #224]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0xfa4>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fd00 	bl	8000a88 <__aeabi_ui2f>
 8002088:	4603      	mov	r3, r0
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe ff6a 	bl	8000f64 <aci_hesaplama>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8002096:	801a      	strh	r2, [r3, #0]
		}
		HAL_GPIO_TogglePin(STEP_Y_GPIO_Port, STEP_Y_Pin);
 8002098:	2108      	movs	r1, #8
 800209a:	482a      	ldr	r0, [pc, #168]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0xf88>)
 800209c:	f001 ff77 	bl	8003f8e <HAL_GPIO_TogglePin>
		sayac_y++;
 80020a0:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0xfac>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0xfac>)
 80020aa:	801a      	strh	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(LimitSwitch_Y1_GPIO_Port, LimitSwitch_Y1_Pin)){
 80020ac:	2108      	movs	r1, #8
 80020ae:	482f      	ldr	r0, [pc, #188]	; (800216c <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 80020b0:	f001 ff3e 	bl	8003f30 <HAL_GPIO_ReadPin>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00f      	beq.n	80020da <HAL_TIM_PeriodElapsedCallback+0xf1e>
			yon_degistir_y(1);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7ff f828 	bl	8001110 <yon_degistir_y>
			sayac_y=0;
 80020c0:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0xfac>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	801a      	strh	r2, [r3, #0]
			limit_y=aci_hesaplama(75);
 80020c6:	4821      	ldr	r0, [pc, #132]	; (800214c <HAL_TIM_PeriodElapsedCallback+0xf90>)
 80020c8:	f7fe ff4c 	bl	8000f64 <aci_hesaplama>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 80020d2:	801a      	strh	r2, [r3, #0]
			hareket_izin_y=false;
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(LimitSwitch_Y2_GPIO_Port, LimitSwitch_Y2_Pin)){
 80020da:	2110      	movs	r1, #16
 80020dc:	4823      	ldr	r0, [pc, #140]	; (800216c <HAL_TIM_PeriodElapsedCallback+0xfb0>)
 80020de:	f001 ff27 	bl	8003f30 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00f      	beq.n	8002108 <HAL_TIM_PeriodElapsedCallback+0xf4c>
			yon_degistir_y(1);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f7ff f811 	bl	8001110 <yon_degistir_y>
			sayac_y=0;
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0xfac>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	801a      	strh	r2, [r3, #0]
			limit_y=aci_hesaplama(75);
 80020f4:	4815      	ldr	r0, [pc, #84]	; (800214c <HAL_TIM_PeriodElapsedCallback+0xf90>)
 80020f6:	f7fe ff35 	bl	8000f64 <aci_hesaplama>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 8002100:	801a      	strh	r2, [r3, #0]
			hareket_izin_y=false;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_TIM_PeriodElapsedCallback+0xfa0>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
		}

		if(sayac_y >= limit_y){
 8002108:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0xfac>)
 800210a:	881a      	ldrh	r2, [r3, #0]
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0xfa8>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d308      	bcc.n	8002126 <HAL_TIM_PeriodElapsedCallback+0xf6a>
			sayac_y=0;
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0xfac>)
 8002116:	2200      	movs	r2, #0
 8002118:	801a      	strh	r2, [r3, #0]
			adım_takip = false;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0xf98>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]

			HAL_TIM_Base_Stop_IT(&htim4);
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0xf9c>)
 8002122:	f002 fcb5 	bl	8004a90 <HAL_TIM_Base_Stop_IT>

			//HAL_TIM_Base_Stop_IT(&htim1);
		}
	}
}
 8002126:	bf00      	nop
 8002128:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800212c:	46bd      	mov	sp, r7
 800212e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002132:	bf00      	nop
 8002134:	200002b4 	.word	0x200002b4
 8002138:	20000034 	.word	0x20000034
 800213c:	200001a4 	.word	0x200001a4
 8002140:	20000000 	.word	0x20000000
 8002144:	40010c00 	.word	0x40010c00
 8002148:	20000030 	.word	0x20000030
 800214c:	42960000 	.word	0x42960000
 8002150:	40011000 	.word	0x40011000
 8002154:	20000036 	.word	0x20000036
 8002158:	200002fc 	.word	0x200002fc
 800215c:	20000035 	.word	0x20000035
 8002160:	200001a6 	.word	0x200001a6
 8002164:	20000002 	.word	0x20000002
 8002168:	20000032 	.word	0x20000032
 800216c:	40010800 	.word	0x40010800

08002170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8002174:	f000 fd84 	bl	8002c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002178:	f000 f826 	bl	80021c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800217c:	f000 fa88 	bl	8002690 <MX_GPIO_Init>
  MX_DMA_Init();
 8002180:	f000 fa68 	bl	8002654 <MX_DMA_Init>
  MX_ADC1_Init();
 8002184:	f000 f87c 	bl	8002280 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002188:	f000 fa10 	bl	80025ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800218c:	f000 fa38 	bl	8002600 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002190:	f000 f924 	bl	80023dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002194:	f000 f96e 	bl	8002474 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002198:	f000 f9ba 	bl	8002510 <MX_TIM4_Init>
  MX_TIM1_Init();
 800219c:	f000 f8cc 	bl	8002338 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Timer Start
  HAL_TIM_Base_Start_IT(&htim2);
 80021a0:	4805      	ldr	r0, [pc, #20]	; (80021b8 <main+0x48>)
 80021a2:	f002 fc23 	bl	80049ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80021a6:	4805      	ldr	r0, [pc, #20]	; (80021bc <main+0x4c>)
 80021a8:	f002 fc20 	bl	80049ec <HAL_TIM_Base_Start_IT>

  //ADC DMA Start
  HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, 3);
 80021ac:	2203      	movs	r2, #3
 80021ae:	4904      	ldr	r1, [pc, #16]	; (80021c0 <main+0x50>)
 80021b0:	4804      	ldr	r0, [pc, #16]	; (80021c4 <main+0x54>)
 80021b2:	f000 fe9f 	bl	8002ef4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80021b6:	e7fe      	b.n	80021b6 <main+0x46>
 80021b8:	2000026c 	.word	0x2000026c
 80021bc:	20000224 	.word	0x20000224
 80021c0:	20000038 	.word	0x20000038
 80021c4:	200001b0 	.word	0x200001b0

080021c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b094      	sub	sp, #80	; 0x50
 80021cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d2:	2228      	movs	r2, #40	; 0x28
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fd3a 	bl	8005c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002202:	2300      	movs	r3, #0
 8002204:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002206:	2301      	movs	r3, #1
 8002208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220a:	2302      	movs	r3, #2
 800220c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800220e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002214:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002218:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221e:	4618      	mov	r0, r3
 8002220:	f001 fece 	bl	8003fc0 <HAL_RCC_OscConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800222a:	f000 fadf 	bl	80027ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222e:	230f      	movs	r3, #15
 8002230:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800223a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800223e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2102      	movs	r1, #2
 800224a:	4618      	mov	r0, r3
 800224c:	f002 f93a 	bl	80044c4 <HAL_RCC_ClockConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002256:	f000 fac9 	bl	80027ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800225a:	2302      	movs	r3, #2
 800225c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800225e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002262:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	4618      	mov	r0, r3
 8002268:	f002 faba 	bl	80047e0 <HAL_RCCEx_PeriphCLKConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002272:	f000 fabb 	bl	80027ec <Error_Handler>
  }
}
 8002276:	bf00      	nop
 8002278:	3750      	adds	r7, #80	; 0x50
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <MX_ADC1_Init+0xb0>)
 8002292:	4a28      	ldr	r2, [pc, #160]	; (8002334 <MX_ADC1_Init+0xb4>)
 8002294:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <MX_ADC1_Init+0xb0>)
 8002298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800229e:	4b24      	ldr	r3, [pc, #144]	; (8002330 <MX_ADC1_Init+0xb0>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <MX_ADC1_Init+0xb0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <MX_ADC1_Init+0xb0>)
 80022ac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80022b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022b2:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <MX_ADC1_Init+0xb0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <MX_ADC1_Init+0xb0>)
 80022ba:	2203      	movs	r2, #3
 80022bc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022be:	481c      	ldr	r0, [pc, #112]	; (8002330 <MX_ADC1_Init+0xb0>)
 80022c0:	f000 fd40 	bl	8002d44 <HAL_ADC_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80022ca:	f000 fa8f 	bl	80027ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80022d6:	2305      	movs	r3, #5
 80022d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4814      	ldr	r0, [pc, #80]	; (8002330 <MX_ADC1_Init+0xb0>)
 80022e0:	f000 fef8 	bl	80030d4 <HAL_ADC_ConfigChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80022ea:	f000 fa7f 	bl	80027ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80022f2:	2302      	movs	r3, #2
 80022f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	480d      	ldr	r0, [pc, #52]	; (8002330 <MX_ADC1_Init+0xb0>)
 80022fc:	f000 feea 	bl	80030d4 <HAL_ADC_ConfigChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002306:	f000 fa71 	bl	80027ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800230a:	2302      	movs	r3, #2
 800230c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800230e:	2303      	movs	r3, #3
 8002310:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	4619      	mov	r1, r3
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <MX_ADC1_Init+0xb0>)
 8002318:	f000 fedc 	bl	80030d4 <HAL_ADC_ConfigChannel>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002322:	f000 fa63 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200001b0 	.word	0x200001b0
 8002334:	40012400 	.word	0x40012400

08002338 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233e:	f107 0308 	add.w	r3, r7, #8
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234c:	463b      	mov	r3, r7
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <MX_TIM1_Init+0x9c>)
 8002356:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <MX_TIM1_Init+0xa0>)
 8002358:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 800235a:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <MX_TIM1_Init+0x9c>)
 800235c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002360:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <MX_TIM1_Init+0x9c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <MX_TIM1_Init+0x9c>)
 800236a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800236e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <MX_TIM1_Init+0x9c>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <MX_TIM1_Init+0x9c>)
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <MX_TIM1_Init+0x9c>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002382:	4814      	ldr	r0, [pc, #80]	; (80023d4 <MX_TIM1_Init+0x9c>)
 8002384:	f002 fae2 	bl	800494c <HAL_TIM_Base_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800238e:	f000 fa2d 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002396:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	4619      	mov	r1, r3
 800239e:	480d      	ldr	r0, [pc, #52]	; (80023d4 <MX_TIM1_Init+0x9c>)
 80023a0:	f002 fcac 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80023aa:	f000 fa1f 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023b6:	463b      	mov	r3, r7
 80023b8:	4619      	mov	r1, r3
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <MX_TIM1_Init+0x9c>)
 80023bc:	f002 fe82 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80023c6:	f000 fa11 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000224 	.word	0x20000224
 80023d8:	40012c00 	.word	0x40012c00

080023dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f0:	463b      	mov	r3, r7
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <MX_TIM2_Init+0x94>)
 80023fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <MX_TIM2_Init+0x94>)
 8002402:	2247      	movs	r2, #71	; 0x47
 8002404:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <MX_TIM2_Init+0x94>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <MX_TIM2_Init+0x94>)
 800240e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002412:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <MX_TIM2_Init+0x94>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <MX_TIM2_Init+0x94>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002420:	4813      	ldr	r0, [pc, #76]	; (8002470 <MX_TIM2_Init+0x94>)
 8002422:	f002 fa93 	bl	800494c <HAL_TIM_Base_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800242c:	f000 f9de 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002436:	f107 0308 	add.w	r3, r7, #8
 800243a:	4619      	mov	r1, r3
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <MX_TIM2_Init+0x94>)
 800243e:	f002 fc5d 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002448:	f000 f9d0 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244c:	2300      	movs	r3, #0
 800244e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002454:	463b      	mov	r3, r7
 8002456:	4619      	mov	r1, r3
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_TIM2_Init+0x94>)
 800245a:	f002 fe33 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002464:	f000 f9c2 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002468:	bf00      	nop
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	2000026c 	.word	0x2000026c

08002474 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	463b      	mov	r3, r7
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_TIM3_Init+0x94>)
 8002492:	4a1e      	ldr	r2, [pc, #120]	; (800250c <MX_TIM3_Init+0x98>)
 8002494:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <MX_TIM3_Init+0x94>)
 8002498:	2247      	movs	r2, #71	; 0x47
 800249a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <MX_TIM3_Init+0x94>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <MX_TIM3_Init+0x94>)
 80024a4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80024a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <MX_TIM3_Init+0x94>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <MX_TIM3_Init+0x94>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024b6:	4814      	ldr	r0, [pc, #80]	; (8002508 <MX_TIM3_Init+0x94>)
 80024b8:	f002 fa48 	bl	800494c <HAL_TIM_Base_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80024c2:	f000 f993 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024cc:	f107 0308 	add.w	r3, r7, #8
 80024d0:	4619      	mov	r1, r3
 80024d2:	480d      	ldr	r0, [pc, #52]	; (8002508 <MX_TIM3_Init+0x94>)
 80024d4:	f002 fc12 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80024de:	f000 f985 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024ea:	463b      	mov	r3, r7
 80024ec:	4619      	mov	r1, r3
 80024ee:	4806      	ldr	r0, [pc, #24]	; (8002508 <MX_TIM3_Init+0x94>)
 80024f0:	f002 fde8 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80024fa:	f000 f977 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200002b4 	.word	0x200002b4
 800250c:	40000400 	.word	0x40000400

08002510 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002516:	f107 0308 	add.w	r3, r7, #8
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002524:	463b      	mov	r3, r7
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_TIM4_Init+0x94>)
 800252e:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <MX_TIM4_Init+0x98>)
 8002530:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002534:	2247      	movs	r2, #71	; 0x47
 8002536:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <MX_TIM4_Init+0x94>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500-1;
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002540:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002544:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <MX_TIM4_Init+0x94>)
 800254e:	2200      	movs	r2, #0
 8002550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002552:	4814      	ldr	r0, [pc, #80]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002554:	f002 f9fa 	bl	800494c <HAL_TIM_Base_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800255e:	f000 f945 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002566:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	4619      	mov	r1, r3
 800256e:	480d      	ldr	r0, [pc, #52]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002570:	f002 fbc4 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800257a:	f000 f937 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002586:	463b      	mov	r3, r7
 8002588:	4619      	mov	r1, r3
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <MX_TIM4_Init+0x94>)
 800258c:	f002 fd9a 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002596:	f000 f929 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200002fc 	.word	0x200002fc
 80025a8:	40000800 	.word	0x40000800

080025ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <MX_USART1_UART_Init+0x4c>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <MX_USART1_UART_Init+0x50>)
 80025b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <MX_USART1_UART_Init+0x4c>)
 80025b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <MX_USART1_UART_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_USART1_UART_Init+0x4c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <MX_USART1_UART_Init+0x4c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_USART1_UART_Init+0x4c>)
 80025d2:	2204      	movs	r2, #4
 80025d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <MX_USART1_UART_Init+0x4c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_USART1_UART_Init+0x4c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025e2:	4805      	ldr	r0, [pc, #20]	; (80025f8 <MX_USART1_UART_Init+0x4c>)
 80025e4:	f002 fdde 	bl	80051a4 <HAL_UART_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025ee:	f000 f8fd 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000344 	.word	0x20000344
 80025fc:	40013800 	.word	0x40013800

08002600 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <MX_USART3_UART_Init+0x4c>)
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <MX_USART3_UART_Init+0x50>)
 8002608:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <MX_USART3_UART_Init+0x4c>)
 800260c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002610:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <MX_USART3_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <MX_USART3_UART_Init+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <MX_USART3_UART_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <MX_USART3_UART_Init+0x4c>)
 8002626:	2204      	movs	r2, #4
 8002628:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <MX_USART3_UART_Init+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <MX_USART3_UART_Init+0x4c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002636:	4805      	ldr	r0, [pc, #20]	; (800264c <MX_USART3_UART_Init+0x4c>)
 8002638:	f002 fdb4 	bl	80051a4 <HAL_UART_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002642:	f000 f8d3 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000038c 	.word	0x2000038c
 8002650:	40004800 	.word	0x40004800

08002654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <MX_DMA_Init+0x38>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	4a0b      	ldr	r2, [pc, #44]	; (800268c <MX_DMA_Init+0x38>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6153      	str	r3, [r2, #20]
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <MX_DMA_Init+0x38>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	200b      	movs	r0, #11
 8002678:	f000 fffd 	bl	8003676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800267c:	200b      	movs	r0, #11
 800267e:	f001 f816 	bl	80036ae <HAL_NVIC_EnableIRQ>

}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002696:	f107 0310 	add.w	r3, r7, #16
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a4:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026aa:	f043 0310 	orr.w	r3, r3, #16
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026bc:	4b47      	ldr	r3, [pc, #284]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a46      	ldr	r2, [pc, #280]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026c2:	f043 0320 	orr.w	r3, r3, #32
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b44      	ldr	r3, [pc, #272]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	4b41      	ldr	r3, [pc, #260]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a40      	ldr	r2, [pc, #256]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b3e      	ldr	r3, [pc, #248]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026f2:	f043 0308 	orr.w	r3, r3, #8
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b38      	ldr	r3, [pc, #224]	; (80027dc <MX_GPIO_Init+0x14c>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED4_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	21e0      	movs	r1, #224	; 0xe0
 8002708:	4835      	ldr	r0, [pc, #212]	; (80027e0 <MX_GPIO_Init+0x150>)
 800270a:	f001 fc28 	bl	8003f5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|STEP_X_Pin|EN_X_Pin|DIR_X_Pin
 800270e:	2200      	movs	r2, #0
 8002710:	f24e 0139 	movw	r1, #57401	; 0xe039
 8002714:	4833      	ldr	r0, [pc, #204]	; (80027e4 <MX_GPIO_Init+0x154>)
 8002716:	f001 fc22 	bl	8003f5e <HAL_GPIO_WritePin>
                          |STEP_Y_Pin|EN_Y_Pin|DIR_Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : X_ON_OFF_Pin */
  GPIO_InitStruct.Pin = X_ON_OFF_Pin;
 800271a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800271e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8002728:	f107 0310 	add.w	r3, r7, #16
 800272c:	4619      	mov	r1, r3
 800272e:	482e      	ldr	r0, [pc, #184]	; (80027e8 <MX_GPIO_Init+0x158>)
 8002730:	f001 fa7a 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitch_X2_Pin */
  GPIO_InitStruct.Pin = LimitSwitch_X2_Pin;
 8002734:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800273e:	2302      	movs	r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LimitSwitch_X2_GPIO_Port, &GPIO_InitStruct);
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	4619      	mov	r1, r3
 8002748:	4827      	ldr	r0, [pc, #156]	; (80027e8 <MX_GPIO_Init+0x158>)
 800274a:	f001 fa6d 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LimitSwitch_Y1_Pin LimitSwitch_Y2_Pin Y_YON_Pin Y_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LimitSwitch_Y1_Pin|LimitSwitch_Y2_Pin|Y_YON_Pin|Y_ON_OFF_Pin;
 800274e:	f648 0318 	movw	r3, #34840	; 0x8818
 8002752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002758:	2302      	movs	r3, #2
 800275a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	4619      	mov	r1, r3
 8002762:	481f      	ldr	r0, [pc, #124]	; (80027e0 <MX_GPIO_Init+0x150>)
 8002764:	f001 fa60 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED3_Pin;
 8002768:	23e0      	movs	r3, #224	; 0xe0
 800276a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276c:	2301      	movs	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2302      	movs	r3, #2
 8002776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	4619      	mov	r1, r3
 800277e:	4818      	ldr	r0, [pc, #96]	; (80027e0 <MX_GPIO_Init+0x150>)
 8002780:	f001 fa52 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin STEP_X_Pin EN_X_Pin DIR_X_Pin
                           STEP_Y_Pin EN_Y_Pin DIR_Y_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|STEP_X_Pin|EN_X_Pin|DIR_X_Pin
 8002784:	f24e 0339 	movw	r3, #57401	; 0xe039
 8002788:	613b      	str	r3, [r7, #16]
                          |STEP_Y_Pin|EN_Y_Pin|DIR_Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278a:	2301      	movs	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2302      	movs	r3, #2
 8002794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0310 	add.w	r3, r7, #16
 800279a:	4619      	mov	r1, r3
 800279c:	4811      	ldr	r0, [pc, #68]	; (80027e4 <MX_GPIO_Init+0x154>)
 800279e:	f001 fa43 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_YON_Pin */
  GPIO_InitStruct.Pin = X_YON_Pin;
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X_YON_GPIO_Port, &GPIO_InitStruct);
 80027ae:	f107 0310 	add.w	r3, r7, #16
 80027b2:	4619      	mov	r1, r3
 80027b4:	480b      	ldr	r0, [pc, #44]	; (80027e4 <MX_GPIO_Init+0x154>)
 80027b6:	f001 fa37 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LimitSwitch_X1_Pin */
  GPIO_InitStruct.Pin = LimitSwitch_X1_Pin;
 80027ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027c4:	2302      	movs	r3, #2
 80027c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LimitSwitch_X1_GPIO_Port, &GPIO_InitStruct);
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4619      	mov	r1, r3
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <MX_GPIO_Init+0x154>)
 80027d0:	f001 fa2a 	bl	8003c28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027d4:	bf00      	nop
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010800 	.word	0x40010800
 80027e4:	40010c00 	.word	0x40010c00
 80027e8:	40011000 	.word	0x40011000

080027ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f0:	b672      	cpsid	i
}
 80027f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <Error_Handler+0x8>
	...

080027f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <HAL_MspInit+0x5c>)
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_MspInit+0x5c>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6193      	str	r3, [r2, #24]
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_MspInit+0x5c>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_MspInit+0x5c>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <HAL_MspInit+0x5c>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	61d3      	str	r3, [r2, #28]
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_MspInit+0x5c>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_MspInit+0x60>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_MspInit+0x60>)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40021000 	.word	0x40021000
 8002858:	40010000 	.word	0x40010000

0800285c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a28      	ldr	r2, [pc, #160]	; (8002918 <HAL_ADC_MspInit+0xbc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d149      	bne.n	8002910 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_ADC_MspInit+0xc0>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_ADC_MspInit+0xc0>)
 8002882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002886:	6193      	str	r3, [r2, #24]
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_ADC_MspInit+0xc0>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_ADC_MspInit+0xc0>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_ADC_MspInit+0xc0>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6193      	str	r3, [r2, #24]
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_ADC_MspInit+0xc0>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|POT3_Pin;
 80028ac:	2307      	movs	r3, #7
 80028ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028b0:	2303      	movs	r3, #3
 80028b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	4619      	mov	r1, r3
 80028ba:	4819      	ldr	r0, [pc, #100]	; (8002920 <HAL_ADC_MspInit+0xc4>)
 80028bc:	f001 f9b4 	bl	8003c28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 80028c2:	4a19      	ldr	r2, [pc, #100]	; (8002928 <HAL_ADC_MspInit+0xcc>)
 80028c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 80028da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 80028e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 80028ea:	2220      	movs	r2, #32
 80028ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028f4:	480b      	ldr	r0, [pc, #44]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 80028f6:	f000 fef5 	bl	80036e4 <HAL_DMA_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002900:	f7ff ff74 	bl	80027ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a07      	ldr	r2, [pc, #28]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 8002908:	621a      	str	r2, [r3, #32]
 800290a:	4a06      	ldr	r2, [pc, #24]	; (8002924 <HAL_ADC_MspInit+0xc8>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002910:	bf00      	nop
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40012400 	.word	0x40012400
 800291c:	40021000 	.word	0x40021000
 8002920:	40010800 	.word	0x40010800
 8002924:	200001e0 	.word	0x200001e0
 8002928:	40020008 	.word	0x40020008

0800292c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <HAL_TIM_Base_MspInit+0xe0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d114      	bne.n	8002968 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	4a33      	ldr	r2, [pc, #204]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 8002944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002948:	6193      	str	r3, [r2, #24]
 800294a:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2019      	movs	r0, #25
 800295c:	f000 fe8b 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002960:	2019      	movs	r0, #25
 8002962:	f000 fea4 	bl	80036ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002966:	e04c      	b.n	8002a02 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d114      	bne.n	800299c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002972:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	61d3      	str	r3, [r2, #28]
 800297e:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2100      	movs	r1, #0
 800298e:	201c      	movs	r0, #28
 8002990:	f000 fe71 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002994:	201c      	movs	r0, #28
 8002996:	f000 fe8a 	bl	80036ae <HAL_NVIC_EnableIRQ>
}
 800299a:	e032      	b.n	8002a02 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <HAL_TIM_Base_MspInit+0xe8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d114      	bne.n	80029d0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	61d3      	str	r3, [r2, #28]
 80029b2:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2100      	movs	r1, #0
 80029c2:	201d      	movs	r0, #29
 80029c4:	f000 fe57 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029c8:	201d      	movs	r0, #29
 80029ca:	f000 fe70 	bl	80036ae <HAL_NVIC_EnableIRQ>
}
 80029ce:	e018      	b.n	8002a02 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <HAL_TIM_Base_MspInit+0xec>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d113      	bne.n	8002a02 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	61d3      	str	r3, [r2, #28]
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_TIM_Base_MspInit+0xe4>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	201e      	movs	r0, #30
 80029f8:	f000 fe3d 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029fc:	201e      	movs	r0, #30
 80029fe:	f000 fe56 	bl	80036ae <HAL_NVIC_EnableIRQ>
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40012c00 	.word	0x40012c00
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800

08002a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0318 	add.w	r3, r7, #24
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a40      	ldr	r2, [pc, #256]	; (8002b38 <HAL_UART_MspInit+0x11c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d13a      	bne.n	8002ab2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a3c:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	4a3e      	ldr	r2, [pc, #248]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a46:	6193      	str	r3, [r2, #24]
 8002a48:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a54:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4a38      	ldr	r2, [pc, #224]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	6193      	str	r3, [r2, #24]
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = HC05_TX1_Pin;
 8002a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a76:	2303      	movs	r3, #3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC05_TX1_GPIO_Port, &GPIO_InitStruct);
 8002a7a:	f107 0318 	add.w	r3, r7, #24
 8002a7e:	4619      	mov	r1, r3
 8002a80:	482f      	ldr	r0, [pc, #188]	; (8002b40 <HAL_UART_MspInit+0x124>)
 8002a82:	f001 f8d1 	bl	8003c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HC05_RX1_Pin;
 8002a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HC05_RX1_GPIO_Port, &GPIO_InitStruct);
 8002a94:	f107 0318 	add.w	r3, r7, #24
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4829      	ldr	r0, [pc, #164]	; (8002b40 <HAL_UART_MspInit+0x124>)
 8002a9c:	f001 f8c4 	bl	8003c28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	2025      	movs	r0, #37	; 0x25
 8002aa6:	f000 fde6 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002aaa:	2025      	movs	r0, #37	; 0x25
 8002aac:	f000 fdff 	bl	80036ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ab0:	e03e      	b.n	8002b30 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <HAL_UART_MspInit+0x128>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d139      	bne.n	8002b30 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002abc:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac6:	61d3      	str	r3, [r2, #28]
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002ada:	f043 0308 	orr.w	r3, r3, #8
 8002ade:	6193      	str	r3, [r2, #24]
 8002ae0:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <HAL_UART_MspInit+0x120>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC05_TX3_Pin;
 8002aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HC05_TX3_GPIO_Port, &GPIO_InitStruct);
 8002afa:	f107 0318 	add.w	r3, r7, #24
 8002afe:	4619      	mov	r1, r3
 8002b00:	4811      	ldr	r0, [pc, #68]	; (8002b48 <HAL_UART_MspInit+0x12c>)
 8002b02:	f001 f891 	bl	8003c28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HC05_RX3_Pin;
 8002b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HC05_RX3_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 0318 	add.w	r3, r7, #24
 8002b18:	4619      	mov	r1, r3
 8002b1a:	480b      	ldr	r0, [pc, #44]	; (8002b48 <HAL_UART_MspInit+0x12c>)
 8002b1c:	f001 f884 	bl	8003c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b20:	2200      	movs	r2, #0
 8002b22:	2100      	movs	r1, #0
 8002b24:	2027      	movs	r0, #39	; 0x27
 8002b26:	f000 fda6 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b2a:	2027      	movs	r0, #39	; 0x27
 8002b2c:	f000 fdbf 	bl	80036ae <HAL_NVIC_EnableIRQ>
}
 8002b30:	bf00      	nop
 8002b32:	3728      	adds	r7, #40	; 0x28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013800 	.word	0x40013800
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010800 	.word	0x40010800
 8002b44:	40004800 	.word	0x40004800
 8002b48:	40010c00 	.word	0x40010c00

08002b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <NMI_Handler+0x4>

08002b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <HardFault_Handler+0x4>

08002b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <MemManage_Handler+0x4>

08002b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <BusFault_Handler+0x4>

08002b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <UsageFault_Handler+0x4>

08002b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b92:	f000 f8bb 	bl	8002d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <DMA1_Channel1_IRQHandler+0x10>)
 8002ba2:	f000 ff0d 	bl	80039c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200001e0 	.word	0x200001e0

08002bb0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <TIM1_UP_IRQHandler+0x10>)
 8002bb6:	f001 ff99 	bl	8004aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000224 	.word	0x20000224

08002bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <TIM2_IRQHandler+0x10>)
 8002bca:	f001 ff8f 	bl	8004aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000026c 	.word	0x2000026c

08002bd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <TIM3_IRQHandler+0x10>)
 8002bde:	f001 ff85 	bl	8004aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	200002b4 	.word	0x200002b4

08002bec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <TIM4_IRQHandler+0x10>)
 8002bf2:	f001 ff7b 	bl	8004aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200002fc 	.word	0x200002fc

08002c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <USART1_IRQHandler+0x10>)
 8002c06:	f002 fb1d 	bl	8005244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000344 	.word	0x20000344

08002c14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <USART3_IRQHandler+0x10>)
 8002c1a:	f002 fb13 	bl	8005244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	2000038c 	.word	0x2000038c

08002c28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c34:	f7ff fff8 	bl	8002c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c38:	480b      	ldr	r0, [pc, #44]	; (8002c68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c3a:	490c      	ldr	r1, [pc, #48]	; (8002c6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c40:	e002      	b.n	8002c48 <LoopCopyDataInit>

08002c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c46:	3304      	adds	r3, #4

08002c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c4c:	d3f9      	bcc.n	8002c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4e:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c50:	4c09      	ldr	r4, [pc, #36]	; (8002c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c54:	e001      	b.n	8002c5a <LoopFillZerobss>

08002c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c58:	3204      	adds	r2, #4

08002c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c5c:	d3fb      	bcc.n	8002c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c5e:	f002 ffd3 	bl	8005c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c62:	f7ff fa85 	bl	8002170 <main>
  bx lr
 8002c66:	4770      	bx	lr
  ldr r0, =_sdata
 8002c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c6c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002c70:	08006f08 	.word	0x08006f08
  ldr r2, =_sbss
 8002c74:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002c78:	200003d8 	.word	0x200003d8

08002c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c7c:	e7fe      	b.n	8002c7c <ADC1_2_IRQHandler>
	...

08002c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_Init+0x28>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_Init+0x28>)
 8002c8a:	f043 0310 	orr.w	r3, r3, #16
 8002c8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c90:	2003      	movs	r0, #3
 8002c92:	f000 fce5 	bl	8003660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c96:	200f      	movs	r0, #15
 8002c98:	f000 f808 	bl	8002cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c9c:	f7ff fdac 	bl	80027f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40022000 	.word	0x40022000

08002cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_InitTick+0x54>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_InitTick+0x58>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fcfd 	bl	80036ca <HAL_SYSTICK_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00e      	b.n	8002cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d80a      	bhi.n	8002cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	f000 fcc5 	bl	8003676 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cec:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <HAL_InitTick+0x5c>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e000      	b.n	8002cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000004 	.word	0x20000004
 8002d04:	2000000c 	.word	0x2000000c
 8002d08:	20000008 	.word	0x20000008

08002d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_IncTick+0x1c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_IncTick+0x20>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a03      	ldr	r2, [pc, #12]	; (8002d2c <HAL_IncTick+0x20>)
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	2000000c 	.word	0x2000000c
 8002d2c:	200003d4 	.word	0x200003d4

08002d30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return uwTick;
 8002d34:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <HAL_GetTick+0x10>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	200003d4 	.word	0x200003d4

08002d44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0be      	b.n	8002ee4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff fd6a 	bl	800285c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 faf5 	bl	8003378 <ADC_ConversionStop_Disable>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 8099 	bne.w	8002ed2 <HAL_ADC_Init+0x18e>
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 8095 	bne.w	8002ed2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002db0:	f023 0302 	bic.w	r3, r3, #2
 8002db4:	f043 0202 	orr.w	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7b1b      	ldrb	r3, [r3, #12]
 8002dca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dcc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ddc:	d003      	beq.n	8002de6 <HAL_ADC_Init+0xa2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d102      	bne.n	8002dec <HAL_ADC_Init+0xa8>
 8002de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dea:	e000      	b.n	8002dee <HAL_ADC_Init+0xaa>
 8002dec:	2300      	movs	r3, #0
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7d1b      	ldrb	r3, [r3, #20]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d119      	bne.n	8002e30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	7b1b      	ldrb	r3, [r3, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	035a      	lsls	r2, r3, #13
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	e00b      	b.n	8002e30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_ADC_Init+0x1a8>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e60:	d003      	beq.n	8002e6a <HAL_ADC_Init+0x126>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d104      	bne.n	8002e74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	051b      	lsls	r3, r3, #20
 8002e72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <HAL_ADC_Init+0x1ac>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d10b      	bne.n	8002eb0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002eae:	e018      	b.n	8002ee2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	f023 0312 	bic.w	r3, r3, #18
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	f043 0201 	orr.w	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ed0:	e007      	b.n	8002ee2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	f043 0210 	orr.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	ffe1f7fd 	.word	0xffe1f7fd
 8002ef0:	ff1f0efe 	.word	0xff1f0efe

08002ef4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a64      	ldr	r2, [pc, #400]	; (800309c <HAL_ADC_Start_DMA+0x1a8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_ADC_Start_DMA+0x24>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a63      	ldr	r2, [pc, #396]	; (80030a0 <HAL_ADC_Start_DMA+0x1ac>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d106      	bne.n	8002f26 <HAL_ADC_Start_DMA+0x32>
 8002f18:	4b60      	ldr	r3, [pc, #384]	; (800309c <HAL_ADC_Start_DMA+0x1a8>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 80b3 	bne.w	800308c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_Start_DMA+0x40>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e0ae      	b.n	8003092 <HAL_ADC_Start_DMA+0x19e>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f9c1 	bl	80032c4 <ADC_Enable>
 8002f42:	4603      	mov	r3, r0
 8002f44:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f040 809a 	bne.w	8003082 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a4e      	ldr	r2, [pc, #312]	; (80030a0 <HAL_ADC_Start_DMA+0x1ac>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d105      	bne.n	8002f78 <HAL_ADC_Start_DMA+0x84>
 8002f6c:	4b4b      	ldr	r3, [pc, #300]	; (800309c <HAL_ADC_Start_DMA+0x1a8>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d115      	bne.n	8002fa4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d026      	beq.n	8002fe0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fa2:	e01d      	b.n	8002fe0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a39      	ldr	r2, [pc, #228]	; (800309c <HAL_ADC_Start_DMA+0x1a8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_ADC_Start_DMA+0xd0>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a38      	ldr	r2, [pc, #224]	; (80030a0 <HAL_ADC_Start_DMA+0x1ac>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d10d      	bne.n	8002fe0 <HAL_ADC_Start_DMA+0xec>
 8002fc4:	4b35      	ldr	r3, [pc, #212]	; (800309c <HAL_ADC_Start_DMA+0x1a8>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fd8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d006      	beq.n	8002ffa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f023 0206 	bic.w	r2, r3, #6
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ff8:	e002      	b.n	8003000 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4a25      	ldr	r2, [pc, #148]	; (80030a4 <HAL_ADC_Start_DMA+0x1b0>)
 800300e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <HAL_ADC_Start_DMA+0x1b4>)
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4a23      	ldr	r2, [pc, #140]	; (80030ac <HAL_ADC_Start_DMA+0x1b8>)
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0202 	mvn.w	r2, #2
 8003028:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003038:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a18      	ldr	r0, [r3, #32]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	334c      	adds	r3, #76	; 0x4c
 8003044:	4619      	mov	r1, r3
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f000 fba5 	bl	8003798 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003058:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800305c:	d108      	bne.n	8003070 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800306c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800306e:	e00f      	b.n	8003090 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800307e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003080:	e006      	b.n	8003090 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800308a:	e001      	b.n	8003090 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003090:	7dfb      	ldrb	r3, [r7, #23]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40012400 	.word	0x40012400
 80030a0:	40012800 	.word	0x40012800
 80030a4:	080033fb 	.word	0x080033fb
 80030a8:	08003477 	.word	0x08003477
 80030ac:	08003493 	.word	0x08003493

080030b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x20>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e0dc      	b.n	80032ae <HAL_ADC_ConfigChannel+0x1da>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b06      	cmp	r3, #6
 8003102:	d81c      	bhi.n	800313e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	3b05      	subs	r3, #5
 8003116:	221f      	movs	r2, #31
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	4019      	ands	r1, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	3b05      	subs	r3, #5
 8003130:	fa00 f203 	lsl.w	r2, r0, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	635a      	str	r2, [r3, #52]	; 0x34
 800313c:	e03c      	b.n	80031b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d81c      	bhi.n	8003180 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	3b23      	subs	r3, #35	; 0x23
 8003158:	221f      	movs	r2, #31
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	4019      	ands	r1, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	3b23      	subs	r3, #35	; 0x23
 8003172:	fa00 f203 	lsl.w	r2, r0, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
 800317e:	e01b      	b.n	80031b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	3b41      	subs	r3, #65	; 0x41
 8003192:	221f      	movs	r2, #31
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	4019      	ands	r1, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	3b41      	subs	r3, #65	; 0x41
 80031ac:	fa00 f203 	lsl.w	r2, r0, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b09      	cmp	r3, #9
 80031be:	d91c      	bls.n	80031fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68d9      	ldr	r1, [r3, #12]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	3b1e      	subs	r3, #30
 80031d2:	2207      	movs	r2, #7
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	4019      	ands	r1, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6898      	ldr	r0, [r3, #8]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	3b1e      	subs	r3, #30
 80031ec:	fa00 f203 	lsl.w	r2, r0, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	e019      	b.n	800322e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6919      	ldr	r1, [r3, #16]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	2207      	movs	r2, #7
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	4019      	ands	r1, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6898      	ldr	r0, [r3, #8]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	fa00 f203 	lsl.w	r2, r0, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b10      	cmp	r3, #16
 8003234:	d003      	beq.n	800323e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800323a:	2b11      	cmp	r3, #17
 800323c:	d132      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d125      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d126      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003264:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b10      	cmp	r3, #16
 800326c:	d11a      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <HAL_ADC_ConfigChannel+0x1e8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	0c9a      	lsrs	r2, r3, #18
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003284:	e002      	b.n	800328c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	3b01      	subs	r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f9      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x1b2>
 8003292:	e007      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40012400 	.word	0x40012400
 80032bc:	20000004 	.word	0x20000004
 80032c0:	431bde83 	.word	0x431bde83

080032c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d040      	beq.n	8003364 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032f2:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <ADC_Enable+0xac>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <ADC_Enable+0xb0>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	0c9b      	lsrs	r3, r3, #18
 80032fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003300:	e002      	b.n	8003308 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3b01      	subs	r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f9      	bne.n	8003302 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800330e:	f7ff fd0f 	bl	8002d30 <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003314:	e01f      	b.n	8003356 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003316:	f7ff fd0b 	bl	8002d30 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d918      	bls.n	8003356 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d011      	beq.n	8003356 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e007      	b.n	8003366 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d1d8      	bne.n	8003316 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000004 	.word	0x20000004
 8003374:	431bde83 	.word	0x431bde83

08003378 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d12e      	bne.n	80033f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033a2:	f7ff fcc5 	bl	8002d30 <HAL_GetTick>
 80033a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033a8:	e01b      	b.n	80033e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033aa:	f7ff fcc1 	bl	8002d30 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d914      	bls.n	80033e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10d      	bne.n	80033e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e007      	b.n	80033f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d0dc      	beq.n	80033aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003410:	2b00      	cmp	r3, #0
 8003412:	d127      	bne.n	8003464 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800342a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800342e:	d115      	bne.n	800345c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003434:	2b00      	cmp	r3, #0
 8003436:	d111      	bne.n	800345c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f7fd fdbb 	bl	8000fd8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003462:	e004      	b.n	800346e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	4798      	blx	r3
}
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff fe13 	bl	80030b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	f043 0204 	orr.w	r2, r3, #4
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff fe02 	bl	80030c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <__NVIC_SetPriorityGrouping+0x44>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e4:	4013      	ands	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034fa:	4a04      	ldr	r2, [pc, #16]	; (800350c <__NVIC_SetPriorityGrouping+0x44>)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	60d3      	str	r3, [r2, #12]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <__NVIC_GetPriorityGrouping+0x18>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	f003 0307 	and.w	r3, r3, #7
}
 800351e:	4618      	mov	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	2b00      	cmp	r3, #0
 800353c:	db0b      	blt.n	8003556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	f003 021f 	and.w	r2, r3, #31
 8003544:	4906      	ldr	r1, [pc, #24]	; (8003560 <__NVIC_EnableIRQ+0x34>)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	2001      	movs	r0, #1
 800354e:	fa00 f202 	lsl.w	r2, r0, r2
 8003552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	e000e100 	.word	0xe000e100

08003564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	6039      	str	r1, [r7, #0]
 800356e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003574:	2b00      	cmp	r3, #0
 8003576:	db0a      	blt.n	800358e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	490c      	ldr	r1, [pc, #48]	; (80035b0 <__NVIC_SetPriority+0x4c>)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	0112      	lsls	r2, r2, #4
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	440b      	add	r3, r1
 8003588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800358c:	e00a      	b.n	80035a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4908      	ldr	r1, [pc, #32]	; (80035b4 <__NVIC_SetPriority+0x50>)
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	3b04      	subs	r3, #4
 800359c:	0112      	lsls	r2, r2, #4
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	440b      	add	r3, r1
 80035a2:	761a      	strb	r2, [r3, #24]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000e100 	.word	0xe000e100
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b089      	sub	sp, #36	; 0x24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f1c3 0307 	rsb	r3, r3, #7
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	bf28      	it	cs
 80035d6:	2304      	movcs	r3, #4
 80035d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3304      	adds	r3, #4
 80035de:	2b06      	cmp	r3, #6
 80035e0:	d902      	bls.n	80035e8 <NVIC_EncodePriority+0x30>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	3b03      	subs	r3, #3
 80035e6:	e000      	b.n	80035ea <NVIC_EncodePriority+0x32>
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ec:	f04f 32ff 	mov.w	r2, #4294967295
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	401a      	ands	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003600:	f04f 31ff 	mov.w	r1, #4294967295
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43d9      	mvns	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	4313      	orrs	r3, r2
         );
}
 8003612:	4618      	mov	r0, r3
 8003614:	3724      	adds	r7, #36	; 0x24
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800362c:	d301      	bcc.n	8003632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362e:	2301      	movs	r3, #1
 8003630:	e00f      	b.n	8003652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <SysTick_Config+0x40>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800363a:	210f      	movs	r1, #15
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	f7ff ff90 	bl	8003564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <SysTick_Config+0x40>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800364a:	4b04      	ldr	r3, [pc, #16]	; (800365c <SysTick_Config+0x40>)
 800364c:	2207      	movs	r2, #7
 800364e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	e000e010 	.word	0xe000e010

08003660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff2d 	bl	80034c8 <__NVIC_SetPriorityGrouping>
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003688:	f7ff ff42 	bl	8003510 <__NVIC_GetPriorityGrouping>
 800368c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f7ff ff90 	bl	80035b8 <NVIC_EncodePriority>
 8003698:	4602      	mov	r2, r0
 800369a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369e:	4611      	mov	r1, r2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff5f 	bl	8003564 <__NVIC_SetPriority>
}
 80036a6:	bf00      	nop
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4603      	mov	r3, r0
 80036b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff35 	bl	800352c <__NVIC_EnableIRQ>
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff ffa2 	bl	800361c <SysTick_Config>
 80036d8:	4603      	mov	r3, r0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e043      	b.n	8003782 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	4b22      	ldr	r3, [pc, #136]	; (800378c <HAL_DMA_Init+0xa8>)
 8003702:	4413      	add	r3, r2
 8003704:	4a22      	ldr	r2, [pc, #136]	; (8003790 <HAL_DMA_Init+0xac>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	009a      	lsls	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_DMA_Init+0xb0>)
 8003716:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800372e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003732:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800373c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	bffdfff8 	.word	0xbffdfff8
 8003790:	cccccccd 	.word	0xcccccccd
 8003794:	40020000 	.word	0x40020000

08003798 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_DMA_Start_IT+0x20>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e04b      	b.n	8003850 <HAL_DMA_Start_IT+0xb8>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d13a      	bne.n	8003842 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f9eb 	bl	8003bcc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 020e 	orr.w	r2, r2, #14
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e00f      	b.n	8003830 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 020a 	orr.w	r2, r2, #10
 800382e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0201 	orr.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e005      	b.n	800384e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800384e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d008      	beq.n	8003882 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2204      	movs	r2, #4
 8003874:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e020      	b.n	80038c4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 020e 	bic.w	r2, r2, #14
 8003890:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	2101      	movs	r1, #1
 80038ac:	fa01 f202 	lsl.w	r2, r1, r2
 80038b0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d005      	beq.n	80038f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2204      	movs	r2, #4
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
 80038f2:	e051      	b.n	8003998 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 020e 	bic.w	r2, r2, #14
 8003902:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a22      	ldr	r2, [pc, #136]	; (80039a4 <HAL_DMA_Abort_IT+0xd4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d029      	beq.n	8003972 <HAL_DMA_Abort_IT+0xa2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a21      	ldr	r2, [pc, #132]	; (80039a8 <HAL_DMA_Abort_IT+0xd8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d022      	beq.n	800396e <HAL_DMA_Abort_IT+0x9e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1f      	ldr	r2, [pc, #124]	; (80039ac <HAL_DMA_Abort_IT+0xdc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01a      	beq.n	8003968 <HAL_DMA_Abort_IT+0x98>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <HAL_DMA_Abort_IT+0xe0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d012      	beq.n	8003962 <HAL_DMA_Abort_IT+0x92>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <HAL_DMA_Abort_IT+0xe4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00a      	beq.n	800395c <HAL_DMA_Abort_IT+0x8c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <HAL_DMA_Abort_IT+0xe8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d102      	bne.n	8003956 <HAL_DMA_Abort_IT+0x86>
 8003950:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003954:	e00e      	b.n	8003974 <HAL_DMA_Abort_IT+0xa4>
 8003956:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800395a:	e00b      	b.n	8003974 <HAL_DMA_Abort_IT+0xa4>
 800395c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003960:	e008      	b.n	8003974 <HAL_DMA_Abort_IT+0xa4>
 8003962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003966:	e005      	b.n	8003974 <HAL_DMA_Abort_IT+0xa4>
 8003968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800396c:	e002      	b.n	8003974 <HAL_DMA_Abort_IT+0xa4>
 800396e:	2310      	movs	r3, #16
 8003970:	e000      	b.n	8003974 <HAL_DMA_Abort_IT+0xa4>
 8003972:	2301      	movs	r3, #1
 8003974:	4a11      	ldr	r2, [pc, #68]	; (80039bc <HAL_DMA_Abort_IT+0xec>)
 8003976:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	4798      	blx	r3
    } 
  }
  return status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40020008 	.word	0x40020008
 80039a8:	4002001c 	.word	0x4002001c
 80039ac:	40020030 	.word	0x40020030
 80039b0:	40020044 	.word	0x40020044
 80039b4:	40020058 	.word	0x40020058
 80039b8:	4002006c 	.word	0x4002006c
 80039bc:	40020000 	.word	0x40020000

080039c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	2204      	movs	r2, #4
 80039de:	409a      	lsls	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d04f      	beq.n	8003a88 <HAL_DMA_IRQHandler+0xc8>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d04a      	beq.n	8003a88 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d107      	bne.n	8003a10 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0204 	bic.w	r2, r2, #4
 8003a0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a66      	ldr	r2, [pc, #408]	; (8003bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d029      	beq.n	8003a6e <HAL_DMA_IRQHandler+0xae>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a65      	ldr	r2, [pc, #404]	; (8003bb4 <HAL_DMA_IRQHandler+0x1f4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d022      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xaa>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a63      	ldr	r2, [pc, #396]	; (8003bb8 <HAL_DMA_IRQHandler+0x1f8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01a      	beq.n	8003a64 <HAL_DMA_IRQHandler+0xa4>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a62      	ldr	r2, [pc, #392]	; (8003bbc <HAL_DMA_IRQHandler+0x1fc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d012      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x9e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a60      	ldr	r2, [pc, #384]	; (8003bc0 <HAL_DMA_IRQHandler+0x200>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00a      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x98>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a5f      	ldr	r2, [pc, #380]	; (8003bc4 <HAL_DMA_IRQHandler+0x204>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d102      	bne.n	8003a52 <HAL_DMA_IRQHandler+0x92>
 8003a4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a50:	e00e      	b.n	8003a70 <HAL_DMA_IRQHandler+0xb0>
 8003a52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a56:	e00b      	b.n	8003a70 <HAL_DMA_IRQHandler+0xb0>
 8003a58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a5c:	e008      	b.n	8003a70 <HAL_DMA_IRQHandler+0xb0>
 8003a5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a62:	e005      	b.n	8003a70 <HAL_DMA_IRQHandler+0xb0>
 8003a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a68:	e002      	b.n	8003a70 <HAL_DMA_IRQHandler+0xb0>
 8003a6a:	2340      	movs	r3, #64	; 0x40
 8003a6c:	e000      	b.n	8003a70 <HAL_DMA_IRQHandler+0xb0>
 8003a6e:	2304      	movs	r3, #4
 8003a70:	4a55      	ldr	r2, [pc, #340]	; (8003bc8 <HAL_DMA_IRQHandler+0x208>)
 8003a72:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8094 	beq.w	8003ba6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a86:	e08e      	b.n	8003ba6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d056      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x186>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d051      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 020a 	bic.w	r2, r2, #10
 8003abe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a38      	ldr	r2, [pc, #224]	; (8003bb0 <HAL_DMA_IRQHandler+0x1f0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d029      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x166>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a37      	ldr	r2, [pc, #220]	; (8003bb4 <HAL_DMA_IRQHandler+0x1f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d022      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x162>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a35      	ldr	r2, [pc, #212]	; (8003bb8 <HAL_DMA_IRQHandler+0x1f8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01a      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x15c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a34      	ldr	r2, [pc, #208]	; (8003bbc <HAL_DMA_IRQHandler+0x1fc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d012      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x156>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a32      	ldr	r2, [pc, #200]	; (8003bc0 <HAL_DMA_IRQHandler+0x200>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00a      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x150>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a31      	ldr	r2, [pc, #196]	; (8003bc4 <HAL_DMA_IRQHandler+0x204>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d102      	bne.n	8003b0a <HAL_DMA_IRQHandler+0x14a>
 8003b04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b08:	e00e      	b.n	8003b28 <HAL_DMA_IRQHandler+0x168>
 8003b0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b0e:	e00b      	b.n	8003b28 <HAL_DMA_IRQHandler+0x168>
 8003b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b14:	e008      	b.n	8003b28 <HAL_DMA_IRQHandler+0x168>
 8003b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b1a:	e005      	b.n	8003b28 <HAL_DMA_IRQHandler+0x168>
 8003b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b20:	e002      	b.n	8003b28 <HAL_DMA_IRQHandler+0x168>
 8003b22:	2320      	movs	r3, #32
 8003b24:	e000      	b.n	8003b28 <HAL_DMA_IRQHandler+0x168>
 8003b26:	2302      	movs	r3, #2
 8003b28:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <HAL_DMA_IRQHandler+0x208>)
 8003b2a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d034      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b44:	e02f      	b.n	8003ba6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d028      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x1e8>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d023      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 020e 	bic.w	r2, r2, #14
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d004      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
    }
  }
  return;
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
}
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40020008 	.word	0x40020008
 8003bb4:	4002001c 	.word	0x4002001c
 8003bb8:	40020030 	.word	0x40020030
 8003bbc:	40020044 	.word	0x40020044
 8003bc0:	40020058 	.word	0x40020058
 8003bc4:	4002006c 	.word	0x4002006c
 8003bc8:	40020000 	.word	0x40020000

08003bcc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	2101      	movs	r1, #1
 8003be4:	fa01 f202 	lsl.w	r2, r1, r2
 8003be8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d108      	bne.n	8003c0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c0a:	e007      	b.n	8003c1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	60da      	str	r2, [r3, #12]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b08b      	sub	sp, #44	; 0x2c
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c36:	2300      	movs	r3, #0
 8003c38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c3a:	e169      	b.n	8003f10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	f040 8158 	bne.w	8003f0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4a9a      	ldr	r2, [pc, #616]	; (8003ec8 <HAL_GPIO_Init+0x2a0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d05e      	beq.n	8003d22 <HAL_GPIO_Init+0xfa>
 8003c64:	4a98      	ldr	r2, [pc, #608]	; (8003ec8 <HAL_GPIO_Init+0x2a0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d875      	bhi.n	8003d56 <HAL_GPIO_Init+0x12e>
 8003c6a:	4a98      	ldr	r2, [pc, #608]	; (8003ecc <HAL_GPIO_Init+0x2a4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d058      	beq.n	8003d22 <HAL_GPIO_Init+0xfa>
 8003c70:	4a96      	ldr	r2, [pc, #600]	; (8003ecc <HAL_GPIO_Init+0x2a4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d86f      	bhi.n	8003d56 <HAL_GPIO_Init+0x12e>
 8003c76:	4a96      	ldr	r2, [pc, #600]	; (8003ed0 <HAL_GPIO_Init+0x2a8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d052      	beq.n	8003d22 <HAL_GPIO_Init+0xfa>
 8003c7c:	4a94      	ldr	r2, [pc, #592]	; (8003ed0 <HAL_GPIO_Init+0x2a8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d869      	bhi.n	8003d56 <HAL_GPIO_Init+0x12e>
 8003c82:	4a94      	ldr	r2, [pc, #592]	; (8003ed4 <HAL_GPIO_Init+0x2ac>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d04c      	beq.n	8003d22 <HAL_GPIO_Init+0xfa>
 8003c88:	4a92      	ldr	r2, [pc, #584]	; (8003ed4 <HAL_GPIO_Init+0x2ac>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d863      	bhi.n	8003d56 <HAL_GPIO_Init+0x12e>
 8003c8e:	4a92      	ldr	r2, [pc, #584]	; (8003ed8 <HAL_GPIO_Init+0x2b0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d046      	beq.n	8003d22 <HAL_GPIO_Init+0xfa>
 8003c94:	4a90      	ldr	r2, [pc, #576]	; (8003ed8 <HAL_GPIO_Init+0x2b0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d85d      	bhi.n	8003d56 <HAL_GPIO_Init+0x12e>
 8003c9a:	2b12      	cmp	r3, #18
 8003c9c:	d82a      	bhi.n	8003cf4 <HAL_GPIO_Init+0xcc>
 8003c9e:	2b12      	cmp	r3, #18
 8003ca0:	d859      	bhi.n	8003d56 <HAL_GPIO_Init+0x12e>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <HAL_GPIO_Init+0x80>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003d23 	.word	0x08003d23
 8003cac:	08003cfd 	.word	0x08003cfd
 8003cb0:	08003d0f 	.word	0x08003d0f
 8003cb4:	08003d51 	.word	0x08003d51
 8003cb8:	08003d57 	.word	0x08003d57
 8003cbc:	08003d57 	.word	0x08003d57
 8003cc0:	08003d57 	.word	0x08003d57
 8003cc4:	08003d57 	.word	0x08003d57
 8003cc8:	08003d57 	.word	0x08003d57
 8003ccc:	08003d57 	.word	0x08003d57
 8003cd0:	08003d57 	.word	0x08003d57
 8003cd4:	08003d57 	.word	0x08003d57
 8003cd8:	08003d57 	.word	0x08003d57
 8003cdc:	08003d57 	.word	0x08003d57
 8003ce0:	08003d57 	.word	0x08003d57
 8003ce4:	08003d57 	.word	0x08003d57
 8003ce8:	08003d57 	.word	0x08003d57
 8003cec:	08003d05 	.word	0x08003d05
 8003cf0:	08003d19 	.word	0x08003d19
 8003cf4:	4a79      	ldr	r2, [pc, #484]	; (8003edc <HAL_GPIO_Init+0x2b4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cfa:	e02c      	b.n	8003d56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	623b      	str	r3, [r7, #32]
          break;
 8003d02:	e029      	b.n	8003d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	623b      	str	r3, [r7, #32]
          break;
 8003d0c:	e024      	b.n	8003d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	3308      	adds	r3, #8
 8003d14:	623b      	str	r3, [r7, #32]
          break;
 8003d16:	e01f      	b.n	8003d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	623b      	str	r3, [r7, #32]
          break;
 8003d20:	e01a      	b.n	8003d58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d102      	bne.n	8003d30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d2a:	2304      	movs	r3, #4
 8003d2c:	623b      	str	r3, [r7, #32]
          break;
 8003d2e:	e013      	b.n	8003d58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d105      	bne.n	8003d44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d38:	2308      	movs	r3, #8
 8003d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	611a      	str	r2, [r3, #16]
          break;
 8003d42:	e009      	b.n	8003d58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d44:	2308      	movs	r3, #8
 8003d46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	615a      	str	r2, [r3, #20]
          break;
 8003d4e:	e003      	b.n	8003d58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d50:	2300      	movs	r3, #0
 8003d52:	623b      	str	r3, [r7, #32]
          break;
 8003d54:	e000      	b.n	8003d58 <HAL_GPIO_Init+0x130>
          break;
 8003d56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2bff      	cmp	r3, #255	; 0xff
 8003d5c:	d801      	bhi.n	8003d62 <HAL_GPIO_Init+0x13a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	e001      	b.n	8003d66 <HAL_GPIO_Init+0x13e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2bff      	cmp	r3, #255	; 0xff
 8003d6c:	d802      	bhi.n	8003d74 <HAL_GPIO_Init+0x14c>
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	e002      	b.n	8003d7a <HAL_GPIO_Init+0x152>
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	3b08      	subs	r3, #8
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	210f      	movs	r1, #15
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	fa01 f303 	lsl.w	r3, r1, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	6a39      	ldr	r1, [r7, #32]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	fa01 f303 	lsl.w	r3, r1, r3
 8003d94:	431a      	orrs	r2, r3
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80b1 	beq.w	8003f0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003da8:	4b4d      	ldr	r3, [pc, #308]	; (8003ee0 <HAL_GPIO_Init+0x2b8>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4a4c      	ldr	r2, [pc, #304]	; (8003ee0 <HAL_GPIO_Init+0x2b8>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6193      	str	r3, [r2, #24]
 8003db4:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <HAL_GPIO_Init+0x2b8>)
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dc0:	4a48      	ldr	r2, [pc, #288]	; (8003ee4 <HAL_GPIO_Init+0x2bc>)
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	089b      	lsrs	r3, r3, #2
 8003dc6:	3302      	adds	r3, #2
 8003dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4013      	ands	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <HAL_GPIO_Init+0x2c0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <HAL_GPIO_Init+0x1ec>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3f      	ldr	r2, [pc, #252]	; (8003eec <HAL_GPIO_Init+0x2c4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00d      	beq.n	8003e10 <HAL_GPIO_Init+0x1e8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3e      	ldr	r2, [pc, #248]	; (8003ef0 <HAL_GPIO_Init+0x2c8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d007      	beq.n	8003e0c <HAL_GPIO_Init+0x1e4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3d      	ldr	r2, [pc, #244]	; (8003ef4 <HAL_GPIO_Init+0x2cc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <HAL_GPIO_Init+0x1e0>
 8003e04:	2303      	movs	r3, #3
 8003e06:	e006      	b.n	8003e16 <HAL_GPIO_Init+0x1ee>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	e004      	b.n	8003e16 <HAL_GPIO_Init+0x1ee>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e002      	b.n	8003e16 <HAL_GPIO_Init+0x1ee>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_GPIO_Init+0x1ee>
 8003e14:	2300      	movs	r3, #0
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	f002 0203 	and.w	r2, r2, #3
 8003e1c:	0092      	lsls	r2, r2, #2
 8003e1e:	4093      	lsls	r3, r2
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e26:	492f      	ldr	r1, [pc, #188]	; (8003ee4 <HAL_GPIO_Init+0x2bc>)
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d006      	beq.n	8003e4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e40:	4b2d      	ldr	r3, [pc, #180]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	492c      	ldr	r1, [pc, #176]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	608b      	str	r3, [r1, #8]
 8003e4c:	e006      	b.n	8003e5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	4928      	ldr	r1, [pc, #160]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d006      	beq.n	8003e76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	4922      	ldr	r1, [pc, #136]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60cb      	str	r3, [r1, #12]
 8003e74:	e006      	b.n	8003e84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	491e      	ldr	r1, [pc, #120]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d006      	beq.n	8003e9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e90:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4918      	ldr	r1, [pc, #96]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e9e:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	4914      	ldr	r1, [pc, #80]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d021      	beq.n	8003efc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	490e      	ldr	r1, [pc, #56]	; (8003ef8 <HAL_GPIO_Init+0x2d0>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	600b      	str	r3, [r1, #0]
 8003ec4:	e021      	b.n	8003f0a <HAL_GPIO_Init+0x2e2>
 8003ec6:	bf00      	nop
 8003ec8:	10320000 	.word	0x10320000
 8003ecc:	10310000 	.word	0x10310000
 8003ed0:	10220000 	.word	0x10220000
 8003ed4:	10210000 	.word	0x10210000
 8003ed8:	10120000 	.word	0x10120000
 8003edc:	10110000 	.word	0x10110000
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40010800 	.word	0x40010800
 8003eec:	40010c00 	.word	0x40010c00
 8003ef0:	40011000 	.word	0x40011000
 8003ef4:	40011400 	.word	0x40011400
 8003ef8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003efc:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	4909      	ldr	r1, [pc, #36]	; (8003f2c <HAL_GPIO_Init+0x304>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f47f ae8e 	bne.w	8003c3c <HAL_GPIO_Init+0x14>
  }
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	372c      	adds	r7, #44	; 0x2c
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	40010400 	.word	0x40010400

08003f30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	887b      	ldrh	r3, [r7, #2]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e001      	b.n	8003f52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	807b      	strh	r3, [r7, #2]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f6e:	787b      	ldrb	r3, [r7, #1]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f74:	887a      	ldrh	r2, [r7, #2]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f7a:	e003      	b.n	8003f84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f7c:	887b      	ldrh	r3, [r7, #2]
 8003f7e:	041a      	lsls	r2, r3, #16
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	611a      	str	r2, [r3, #16]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fa0:	887a      	ldrh	r2, [r7, #2]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	041a      	lsls	r2, r3, #16
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	43d9      	mvns	r1, r3
 8003fac:	887b      	ldrh	r3, [r7, #2]
 8003fae:	400b      	ands	r3, r1
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e272      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 8087 	beq.w	80040ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fe0:	4b92      	ldr	r3, [pc, #584]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d00c      	beq.n	8004006 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fec:	4b8f      	ldr	r3, [pc, #572]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d112      	bne.n	800401e <HAL_RCC_OscConfig+0x5e>
 8003ff8:	4b8c      	ldr	r3, [pc, #560]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004004:	d10b      	bne.n	800401e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004006:	4b89      	ldr	r3, [pc, #548]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d06c      	beq.n	80040ec <HAL_RCC_OscConfig+0x12c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d168      	bne.n	80040ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e24c      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004026:	d106      	bne.n	8004036 <HAL_RCC_OscConfig+0x76>
 8004028:	4b80      	ldr	r3, [pc, #512]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a7f      	ldr	r2, [pc, #508]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 800402e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e02e      	b.n	8004094 <HAL_RCC_OscConfig+0xd4>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0x98>
 800403e:	4b7b      	ldr	r3, [pc, #492]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a7a      	ldr	r2, [pc, #488]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b78      	ldr	r3, [pc, #480]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a77      	ldr	r2, [pc, #476]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e01d      	b.n	8004094 <HAL_RCC_OscConfig+0xd4>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0xbc>
 8004062:	4b72      	ldr	r3, [pc, #456]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a71      	ldr	r2, [pc, #452]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b6f      	ldr	r3, [pc, #444]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6e      	ldr	r2, [pc, #440]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e00b      	b.n	8004094 <HAL_RCC_OscConfig+0xd4>
 800407c:	4b6b      	ldr	r3, [pc, #428]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a6a      	ldr	r2, [pc, #424]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b68      	ldr	r3, [pc, #416]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a67      	ldr	r2, [pc, #412]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 800408e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004092:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fe fe48 	bl	8002d30 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fe fe44 	bl	8002d30 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e200      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	4b5d      	ldr	r3, [pc, #372]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0xe4>
 80040c2:	e014      	b.n	80040ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fe fe34 	bl	8002d30 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fe fe30 	bl	8002d30 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e1ec      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	4b53      	ldr	r3, [pc, #332]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x10c>
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d063      	beq.n	80041c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040fa:	4b4c      	ldr	r3, [pc, #304]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004106:	4b49      	ldr	r3, [pc, #292]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	2b08      	cmp	r3, #8
 8004110:	d11c      	bne.n	800414c <HAL_RCC_OscConfig+0x18c>
 8004112:	4b46      	ldr	r3, [pc, #280]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d116      	bne.n	800414c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411e:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <HAL_RCC_OscConfig+0x176>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e1c0      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4939      	ldr	r1, [pc, #228]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414a:	e03a      	b.n	80041c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004154:	4b36      	ldr	r3, [pc, #216]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fe fde9 	bl	8002d30 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004162:	f7fe fde5 	bl	8002d30 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e1a1      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004174:	4b2d      	ldr	r3, [pc, #180]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004180:	4b2a      	ldr	r3, [pc, #168]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4927      	ldr	r1, [pc, #156]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]
 8004194:	e015      	b.n	80041c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004196:	4b26      	ldr	r3, [pc, #152]	; (8004230 <HAL_RCC_OscConfig+0x270>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fe fdc8 	bl	8002d30 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a4:	f7fe fdc4 	bl	8002d30 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e180      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d03a      	beq.n	8004244 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d019      	beq.n	800420a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d6:	4b17      	ldr	r3, [pc, #92]	; (8004234 <HAL_RCC_OscConfig+0x274>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041dc:	f7fe fda8 	bl	8002d30 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e4:	f7fe fda4 	bl	8002d30 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e160      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <HAL_RCC_OscConfig+0x26c>)
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004202:	2001      	movs	r0, #1
 8004204:	f000 face 	bl	80047a4 <RCC_Delay>
 8004208:	e01c      	b.n	8004244 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420a:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <HAL_RCC_OscConfig+0x274>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004210:	f7fe fd8e 	bl	8002d30 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004216:	e00f      	b.n	8004238 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004218:	f7fe fd8a 	bl	8002d30 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d908      	bls.n	8004238 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e146      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
 8004230:	42420000 	.word	0x42420000
 8004234:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004238:	4b92      	ldr	r3, [pc, #584]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e9      	bne.n	8004218 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80a6 	beq.w	800439e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004256:	4b8b      	ldr	r3, [pc, #556]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10d      	bne.n	800427e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004262:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	4a87      	ldr	r2, [pc, #540]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426c:	61d3      	str	r3, [r2, #28]
 800426e:	4b85      	ldr	r3, [pc, #532]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427e:	4b82      	ldr	r3, [pc, #520]	; (8004488 <HAL_RCC_OscConfig+0x4c8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d118      	bne.n	80042bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800428a:	4b7f      	ldr	r3, [pc, #508]	; (8004488 <HAL_RCC_OscConfig+0x4c8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7e      	ldr	r2, [pc, #504]	; (8004488 <HAL_RCC_OscConfig+0x4c8>)
 8004290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004296:	f7fe fd4b 	bl	8002d30 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800429e:	f7fe fd47 	bl	8002d30 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b64      	cmp	r3, #100	; 0x64
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e103      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b0:	4b75      	ldr	r3, [pc, #468]	; (8004488 <HAL_RCC_OscConfig+0x4c8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0f0      	beq.n	800429e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d106      	bne.n	80042d2 <HAL_RCC_OscConfig+0x312>
 80042c4:	4b6f      	ldr	r3, [pc, #444]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	4a6e      	ldr	r2, [pc, #440]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	6213      	str	r3, [r2, #32]
 80042d0:	e02d      	b.n	800432e <HAL_RCC_OscConfig+0x36e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x334>
 80042da:	4b6a      	ldr	r3, [pc, #424]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	4a69      	ldr	r2, [pc, #420]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	6213      	str	r3, [r2, #32]
 80042e6:	4b67      	ldr	r3, [pc, #412]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4a66      	ldr	r2, [pc, #408]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	f023 0304 	bic.w	r3, r3, #4
 80042f0:	6213      	str	r3, [r2, #32]
 80042f2:	e01c      	b.n	800432e <HAL_RCC_OscConfig+0x36e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b05      	cmp	r3, #5
 80042fa:	d10c      	bne.n	8004316 <HAL_RCC_OscConfig+0x356>
 80042fc:	4b61      	ldr	r3, [pc, #388]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	4a60      	ldr	r2, [pc, #384]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004302:	f043 0304 	orr.w	r3, r3, #4
 8004306:	6213      	str	r3, [r2, #32]
 8004308:	4b5e      	ldr	r3, [pc, #376]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	4a5d      	ldr	r2, [pc, #372]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	6213      	str	r3, [r2, #32]
 8004314:	e00b      	b.n	800432e <HAL_RCC_OscConfig+0x36e>
 8004316:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	4a5a      	ldr	r2, [pc, #360]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	6213      	str	r3, [r2, #32]
 8004322:	4b58      	ldr	r3, [pc, #352]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	4a57      	ldr	r2, [pc, #348]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004328:	f023 0304 	bic.w	r3, r3, #4
 800432c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d015      	beq.n	8004362 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004336:	f7fe fcfb 	bl	8002d30 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433e:	f7fe fcf7 	bl	8002d30 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	; 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e0b1      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	4b4b      	ldr	r3, [pc, #300]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ee      	beq.n	800433e <HAL_RCC_OscConfig+0x37e>
 8004360:	e014      	b.n	800438c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004362:	f7fe fce5 	bl	8002d30 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004368:	e00a      	b.n	8004380 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f7fe fce1 	bl	8002d30 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e09b      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004380:	4b40      	ldr	r3, [pc, #256]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ee      	bne.n	800436a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d105      	bne.n	800439e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004392:	4b3c      	ldr	r3, [pc, #240]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	4a3b      	ldr	r2, [pc, #236]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 8087 	beq.w	80044b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043a8:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d061      	beq.n	8004478 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d146      	bne.n	800444a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043bc:	4b33      	ldr	r3, [pc, #204]	; (800448c <HAL_RCC_OscConfig+0x4cc>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c2:	f7fe fcb5 	bl	8002d30 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ca:	f7fe fcb1 	bl	8002d30 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e06d      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043dc:	4b29      	ldr	r3, [pc, #164]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f0:	d108      	bne.n	8004404 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043f2:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	4921      	ldr	r1, [pc, #132]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004404:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a19      	ldr	r1, [r3, #32]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	430b      	orrs	r3, r1
 8004416:	491b      	ldr	r1, [pc, #108]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_OscConfig+0x4cc>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fe fc85 	bl	8002d30 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442a:	f7fe fc81 	bl	8002d30 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e03d      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800443c:	4b11      	ldr	r3, [pc, #68]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x46a>
 8004448:	e035      	b.n	80044b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_RCC_OscConfig+0x4cc>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fe fc6e 	bl	8002d30 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004458:	f7fe fc6a 	bl	8002d30 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e026      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_RCC_OscConfig+0x4c4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x498>
 8004476:	e01e      	b.n	80044b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e019      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
 8004484:	40021000 	.word	0x40021000
 8004488:	40007000 	.word	0x40007000
 800448c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <HAL_RCC_OscConfig+0x500>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000

080044c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0d0      	b.n	800467a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d8:	4b6a      	ldr	r3, [pc, #424]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d910      	bls.n	8004508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b67      	ldr	r3, [pc, #412]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 0207 	bic.w	r2, r3, #7
 80044ee:	4965      	ldr	r1, [pc, #404]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f6:	4b63      	ldr	r3, [pc, #396]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0b8      	b.n	800467a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004520:	4b59      	ldr	r3, [pc, #356]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4a58      	ldr	r2, [pc, #352]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800452a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004538:	4b53      	ldr	r3, [pc, #332]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4a52      	ldr	r2, [pc, #328]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 800453e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004542:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004544:	4b50      	ldr	r3, [pc, #320]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	494d      	ldr	r1, [pc, #308]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d040      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	4b47      	ldr	r3, [pc, #284]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d115      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e07f      	b.n	800467a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	4b41      	ldr	r3, [pc, #260]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e073      	b.n	800467a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e06b      	b.n	800467a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a2:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f023 0203 	bic.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4936      	ldr	r1, [pc, #216]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b4:	f7fe fbbc 	bl	8002d30 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045bc:	f7fe fbb8 	bl	8002d30 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e053      	b.n	800467a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	4b2d      	ldr	r3, [pc, #180]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 020c 	and.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1eb      	bne.n	80045bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e4:	4b27      	ldr	r3, [pc, #156]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d210      	bcs.n	8004614 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 0207 	bic.w	r2, r3, #7
 80045fa:	4922      	ldr	r1, [pc, #136]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b20      	ldr	r3, [pc, #128]	; (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e032      	b.n	800467a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004620:	4b19      	ldr	r3, [pc, #100]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4916      	ldr	r1, [pc, #88]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	490e      	ldr	r1, [pc, #56]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004652:	f000 f821 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004656:	4602      	mov	r2, r0
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	490a      	ldr	r1, [pc, #40]	; (800468c <HAL_RCC_ClockConfig+0x1c8>)
 8004664:	5ccb      	ldrb	r3, [r1, r3]
 8004666:	fa22 f303 	lsr.w	r3, r2, r3
 800466a:	4a09      	ldr	r2, [pc, #36]	; (8004690 <HAL_RCC_ClockConfig+0x1cc>)
 800466c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCC_ClockConfig+0x1d0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fb1a 	bl	8002cac <HAL_InitTick>

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40022000 	.word	0x40022000
 8004688:	40021000 	.word	0x40021000
 800468c:	08006cf8 	.word	0x08006cf8
 8004690:	20000004 	.word	0x20000004
 8004694:	20000008 	.word	0x20000008

08004698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	2300      	movs	r3, #0
 80046ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046b2:	4b1e      	ldr	r3, [pc, #120]	; (800472c <HAL_RCC_GetSysClockFreq+0x94>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d002      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x30>
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x36>
 80046c6:	e027      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046c8:	4b19      	ldr	r3, [pc, #100]	; (8004730 <HAL_RCC_GetSysClockFreq+0x98>)
 80046ca:	613b      	str	r3, [r7, #16]
      break;
 80046cc:	e027      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	0c9b      	lsrs	r3, r3, #18
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	4a17      	ldr	r2, [pc, #92]	; (8004734 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046d8:	5cd3      	ldrb	r3, [r2, r3]
 80046da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d010      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046e6:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_RCC_GetSysClockFreq+0x94>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	0c5b      	lsrs	r3, r3, #17
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	4a11      	ldr	r2, [pc, #68]	; (8004738 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046f2:	5cd3      	ldrb	r3, [r2, r3]
 80046f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a0d      	ldr	r2, [pc, #52]	; (8004730 <HAL_RCC_GetSysClockFreq+0x98>)
 80046fa:	fb03 f202 	mul.w	r2, r3, r2
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e004      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a0c      	ldr	r2, [pc, #48]	; (800473c <HAL_RCC_GetSysClockFreq+0xa4>)
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	613b      	str	r3, [r7, #16]
      break;
 8004716:	e002      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetSysClockFreq+0x98>)
 800471a:	613b      	str	r3, [r7, #16]
      break;
 800471c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800471e:	693b      	ldr	r3, [r7, #16]
}
 8004720:	4618      	mov	r0, r3
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	007a1200 	.word	0x007a1200
 8004734:	08006d10 	.word	0x08006d10
 8004738:	08006d20 	.word	0x08006d20
 800473c:	003d0900 	.word	0x003d0900

08004740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004744:	4b02      	ldr	r3, [pc, #8]	; (8004750 <HAL_RCC_GetHCLKFreq+0x10>)
 8004746:	681b      	ldr	r3, [r3, #0]
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	20000004 	.word	0x20000004

08004754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004758:	f7ff fff2 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 800475c:	4602      	mov	r2, r0
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	4903      	ldr	r1, [pc, #12]	; (8004778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800476a:	5ccb      	ldrb	r3, [r1, r3]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000
 8004778:	08006d08 	.word	0x08006d08

0800477c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004780:	f7ff ffde 	bl	8004740 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b05      	ldr	r3, [pc, #20]	; (800479c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	0adb      	lsrs	r3, r3, #11
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4903      	ldr	r1, [pc, #12]	; (80047a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004798:	4618      	mov	r0, r3
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	08006d08 	.word	0x08006d08

080047a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <RCC_Delay+0x34>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <RCC_Delay+0x38>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	0a5b      	lsrs	r3, r3, #9
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047c0:	bf00      	nop
  }
  while (Delay --);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1e5a      	subs	r2, r3, #1
 80047c6:	60fa      	str	r2, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f9      	bne.n	80047c0 <RCC_Delay+0x1c>
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	20000004 	.word	0x20000004
 80047dc:	10624dd3 	.word	0x10624dd3

080047e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d07d      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047fc:	2300      	movs	r3, #0
 80047fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004800:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10d      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480c:	4b4c      	ldr	r3, [pc, #304]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4a4b      	ldr	r2, [pc, #300]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	61d3      	str	r3, [r2, #28]
 8004818:	4b49      	ldr	r3, [pc, #292]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004824:	2301      	movs	r3, #1
 8004826:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	4b46      	ldr	r3, [pc, #280]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d118      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004834:	4b43      	ldr	r3, [pc, #268]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a42      	ldr	r2, [pc, #264]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800483a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800483e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004840:	f7fe fa76 	bl	8002d30 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004846:	e008      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004848:	f7fe fa72 	bl	8002d30 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e06d      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485a:	4b3a      	ldr	r3, [pc, #232]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004866:	4b36      	ldr	r3, [pc, #216]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d02e      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	429a      	cmp	r2, r3
 8004882:	d027      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004884:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800488e:	4b2e      	ldr	r3, [pc, #184]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004890:	2201      	movs	r2, #1
 8004892:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004894:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800489a:	4a29      	ldr	r2, [pc, #164]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d014      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048aa:	f7fe fa41 	bl	8002d30 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b0:	e00a      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b2:	f7fe fa3d 	bl	8002d30 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e036      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ee      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d4:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4917      	ldr	r1, [pc, #92]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d105      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	4a13      	ldr	r2, [pc, #76]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004904:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	490b      	ldr	r1, [pc, #44]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004912:	4313      	orrs	r3, r2
 8004914:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b00      	cmp	r3, #0
 8004920:	d008      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4904      	ldr	r1, [pc, #16]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
 8004944:	40007000 	.word	0x40007000
 8004948:	42420440 	.word	0x42420440

0800494c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e041      	b.n	80049e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fd ffda 	bl	800292c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f000 faa2 	bl	8004ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d001      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e03a      	b.n	8004a7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <HAL_TIM_Base_Start_IT+0x98>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00e      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x58>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2e:	d009      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x58>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a14      	ldr	r2, [pc, #80]	; (8004a88 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x58>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a13      	ldr	r2, [pc, #76]	; (8004a8c <HAL_TIM_Base_Start_IT+0xa0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d111      	bne.n	8004a68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b06      	cmp	r3, #6
 8004a54:	d010      	beq.n	8004a78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0201 	orr.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a66:	e007      	b.n	8004a78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800

08004a90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6a1a      	ldr	r2, [r3, #32]
 8004aae:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10f      	bne.n	8004ad8 <HAL_TIM_Base_Stop_IT+0x48>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6a1a      	ldr	r2, [r3, #32]
 8004abe:	f240 4344 	movw	r3, #1092	; 0x444
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <HAL_TIM_Base_Stop_IT+0x48>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0202 	mvn.w	r2, #2
 8004b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9b4 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f9a7 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f9b6 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0204 	mvn.w	r2, #4
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f98a 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f97d 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f98c 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d122      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0208 	mvn.w	r2, #8
 8004bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2204      	movs	r2, #4
 8004bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f960 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f953 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f962 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d122      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d11b      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0210 	mvn.w	r2, #16
 8004c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2208      	movs	r2, #8
 8004c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f936 	bl	8004e9c <HAL_TIM_IC_CaptureCallback>
 8004c30:	e005      	b.n	8004c3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f929 	bl	8004e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f938 	bl	8004eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d10e      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d107      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0201 	mvn.w	r2, #1
 8004c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc faa6 	bl	80011bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	2b80      	cmp	r3, #128	; 0x80
 8004c7c:	d10e      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b80      	cmp	r3, #128	; 0x80
 8004c8a:	d107      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa7b 	bl	8005192 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	d107      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f8fc 	bl	8004ec0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0220 	mvn.w	r2, #32
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa46 	bl	8005180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIM_ConfigClockSource+0x1c>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0b4      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x186>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d50:	d03e      	beq.n	8004dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8004d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d56:	f200 8087 	bhi.w	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	f000 8086 	beq.w	8004e6e <HAL_TIM_ConfigClockSource+0x172>
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	d87f      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d68:	2b70      	cmp	r3, #112	; 0x70
 8004d6a:	d01a      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0xa6>
 8004d6c:	2b70      	cmp	r3, #112	; 0x70
 8004d6e:	d87b      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b60      	cmp	r3, #96	; 0x60
 8004d72:	d050      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0x11a>
 8004d74:	2b60      	cmp	r3, #96	; 0x60
 8004d76:	d877      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d78:	2b50      	cmp	r3, #80	; 0x50
 8004d7a:	d03c      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0xfa>
 8004d7c:	2b50      	cmp	r3, #80	; 0x50
 8004d7e:	d873      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d058      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x13a>
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d86f      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b30      	cmp	r3, #48	; 0x30
 8004d8a:	d064      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004d8c:	2b30      	cmp	r3, #48	; 0x30
 8004d8e:	d86b      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d060      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d867      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d05c      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d05a      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004da0:	e062      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6899      	ldr	r1, [r3, #8]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f000 f968 	bl	8005086 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	609a      	str	r2, [r3, #8]
      break;
 8004dce:	e04f      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	6899      	ldr	r1, [r3, #8]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f000 f951 	bl	8005086 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df2:	609a      	str	r2, [r3, #8]
      break;
 8004df4:	e03c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6859      	ldr	r1, [r3, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f000 f8c8 	bl	8004f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2150      	movs	r1, #80	; 0x50
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f91f 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004e14:	e02c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6859      	ldr	r1, [r3, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f000 f8e6 	bl	8004ff4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2160      	movs	r1, #96	; 0x60
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f90f 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004e34:	e01c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	461a      	mov	r2, r3
 8004e44:	f000 f8a8 	bl	8004f98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2140      	movs	r1, #64	; 0x40
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f8ff 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004e54:	e00c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f000 f8f6 	bl	8005052 <TIM_ITRx_SetConfig>
      break;
 8004e66:	e003      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6c:	e000      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr
	...

08004ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a29      	ldr	r2, [pc, #164]	; (8004f8c <TIM_Base_SetConfig+0xb8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <TIM_Base_SetConfig+0x30>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef2:	d007      	beq.n	8004f04 <TIM_Base_SetConfig+0x30>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <TIM_Base_SetConfig+0xbc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_Base_SetConfig+0x30>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a25      	ldr	r2, [pc, #148]	; (8004f94 <TIM_Base_SetConfig+0xc0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d108      	bne.n	8004f16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <TIM_Base_SetConfig+0xb8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00b      	beq.n	8004f36 <TIM_Base_SetConfig+0x62>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f24:	d007      	beq.n	8004f36 <TIM_Base_SetConfig+0x62>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <TIM_Base_SetConfig+0xbc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d003      	beq.n	8004f36 <TIM_Base_SetConfig+0x62>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <TIM_Base_SetConfig+0xc0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d108      	bne.n	8004f48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a07      	ldr	r2, [pc, #28]	; (8004f8c <TIM_Base_SetConfig+0xb8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d103      	bne.n	8004f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	615a      	str	r2, [r3, #20]
}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800

08004f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f023 0201 	bic.w	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f023 030a 	bic.w	r3, r3, #10
 8004fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0210 	bic.w	r2, r3, #16
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800501e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	031b      	lsls	r3, r3, #12
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005030:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	621a      	str	r2, [r3, #32]
}
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	f043 0307 	orr.w	r3, r3, #7
 8005074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr

08005086 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005086:	b480      	push	{r7}
 8005088:	b087      	sub	sp, #28
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	021a      	lsls	r2, r3, #8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	609a      	str	r2, [r3, #8]
}
 80050ba:	bf00      	nop
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050d8:	2302      	movs	r3, #2
 80050da:	e046      	b.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a16      	ldr	r2, [pc, #88]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00e      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005128:	d009      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a12      	ldr	r2, [pc, #72]	; (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a10      	ldr	r2, [pc, #64]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d10c      	bne.n	8005158 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	4313      	orrs	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40000400 	.word	0x40000400
 800517c:	40000800 	.word	0x40000800

08005180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr

080051a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e042      	b.n	800523c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fd fc26 	bl	8002a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2224      	movs	r2, #36	; 0x24
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fc7f 	bl	8005aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800520c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800521c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b0ba      	sub	sp, #232	; 0xe8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800526a:	2300      	movs	r3, #0
 800526c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005270:	2300      	movs	r3, #0
 8005272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <HAL_UART_IRQHandler+0x66>
 8005296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fb63 	bl	800596e <UART_Receive_IT>
      return;
 80052a8:	e25b      	b.n	8005762 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80de 	beq.w	8005470 <HAL_UART_IRQHandler+0x22c>
 80052b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80d1 	beq.w	8005470 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <HAL_UART_IRQHandler+0xae>
 80052da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	f043 0201 	orr.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <HAL_UART_IRQHandler+0xd2>
 80052fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	f043 0202 	orr.w	r2, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <HAL_UART_IRQHandler+0xf6>
 8005322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	f043 0204 	orr.w	r2, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800533a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b00      	cmp	r3, #0
 8005344:	d011      	beq.n	800536a <HAL_UART_IRQHandler+0x126>
 8005346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	f043 0208 	orr.w	r2, r3, #8
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 81f2 	beq.w	8005758 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_UART_IRQHandler+0x14e>
 8005380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 faee 	bl	800596e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <HAL_UART_IRQHandler+0x17a>
 80053b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d04f      	beq.n	800545e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9f8 	bl	80057b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d041      	beq.n	8005456 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3314      	adds	r3, #20
 80053fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800540a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1d9      	bne.n	80053d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d013      	beq.n	800544e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	4a7e      	ldr	r2, [pc, #504]	; (8005624 <HAL_UART_IRQHandler+0x3e0>)
 800542c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fa4c 	bl	80038d0 <HAL_DMA_Abort_IT>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d016      	beq.n	800546c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005448:	4610      	mov	r0, r2
 800544a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	e00e      	b.n	800546c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f99c 	bl	800578c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	e00a      	b.n	800546c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f998 	bl	800578c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	e006      	b.n	800546c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f994 	bl	800578c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800546a:	e175      	b.n	8005758 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546c:	bf00      	nop
    return;
 800546e:	e173      	b.n	8005758 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	2b01      	cmp	r3, #1
 8005476:	f040 814f 	bne.w	8005718 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 8148 	beq.w	8005718 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8141 	beq.w	8005718 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005496:	2300      	movs	r3, #0
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80b6 	beq.w	8005628 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8145 	beq.w	800575c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054da:	429a      	cmp	r2, r3
 80054dc:	f080 813e 	bcs.w	800575c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	f000 8088 	beq.w	8005604 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800550a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800550e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005512:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	330c      	adds	r3, #12
 800551c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005520:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800552c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1d9      	bne.n	80054f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3314      	adds	r3, #20
 8005546:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3314      	adds	r3, #20
 8005560:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005564:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005568:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800556c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e1      	bne.n	8005540 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3314      	adds	r3, #20
 8005582:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800558c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800558e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e3      	bne.n	800557c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	330c      	adds	r3, #12
 80055c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d4:	f023 0310 	bic.w	r3, r3, #16
 80055d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80055e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e3      	bne.n	80055c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe f92a 	bl	8003858 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005612:	b29b      	uxth	r3, r3
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	b29b      	uxth	r3, r3
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f8bf 	bl	800579e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005620:	e09c      	b.n	800575c <HAL_UART_IRQHandler+0x518>
 8005622:	bf00      	nop
 8005624:	08005879 	.word	0x08005879
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005630:	b29b      	uxth	r3, r3
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 808e 	beq.w	8005760 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 8089 	beq.w	8005760 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800565e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005672:	647a      	str	r2, [r7, #68]	; 0x44
 8005674:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005678:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e3      	bne.n	800564e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3314      	adds	r3, #20
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	623b      	str	r3, [r7, #32]
   return(result);
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3314      	adds	r3, #20
 80056a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056aa:	633a      	str	r2, [r7, #48]	; 0x30
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e3      	bne.n	8005686 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	60fb      	str	r3, [r7, #12]
   return(result);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0310 	bic.w	r3, r3, #16
 80056e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	330c      	adds	r3, #12
 80056ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056f0:	61fa      	str	r2, [r7, #28]
 80056f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	69b9      	ldr	r1, [r7, #24]
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	617b      	str	r3, [r7, #20]
   return(result);
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e3      	bne.n	80056cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800570a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f844 	bl	800579e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005716:	e023      	b.n	8005760 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <HAL_UART_IRQHandler+0x4f4>
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f8b5 	bl	80058a0 <UART_Transmit_IT>
    return;
 8005736:	e014      	b.n	8005762 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00e      	beq.n	8005762 <HAL_UART_IRQHandler+0x51e>
 8005744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f8f4 	bl	800593e <UART_EndTransmit_IT>
    return;
 8005756:	e004      	b.n	8005762 <HAL_UART_IRQHandler+0x51e>
    return;
 8005758:	bf00      	nop
 800575a:	e002      	b.n	8005762 <HAL_UART_IRQHandler+0x51e>
      return;
 800575c:	bf00      	nop
 800575e:	e000      	b.n	8005762 <HAL_UART_IRQHandler+0x51e>
      return;
 8005760:	bf00      	nop
  }
}
 8005762:	37e8      	adds	r7, #232	; 0xe8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	460b      	mov	r3, r1
 80057a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b095      	sub	sp, #84	; 0x54
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	330c      	adds	r3, #12
 80057da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057dc:	643a      	str	r2, [r7, #64]	; 0x40
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e5      	bne.n	80057bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f023 0301 	bic.w	r3, r3, #1
 8005806:	64bb      	str	r3, [r7, #72]	; 0x48
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3314      	adds	r3, #20
 800580e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005810:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e5      	bne.n	80057f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	2b01      	cmp	r3, #1
 800582a:	d119      	bne.n	8005860 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	330c      	adds	r3, #12
 8005832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	60bb      	str	r3, [r7, #8]
   return(result);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f023 0310 	bic.w	r3, r3, #16
 8005842:	647b      	str	r3, [r7, #68]	; 0x44
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800584c:	61ba      	str	r2, [r7, #24]
 800584e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6979      	ldr	r1, [r7, #20]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	613b      	str	r3, [r7, #16]
   return(result);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e5      	bne.n	800582c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800586e:	bf00      	nop
 8005870:	3754      	adds	r7, #84	; 0x54
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff ff7a 	bl	800578c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b21      	cmp	r3, #33	; 0x21
 80058b2:	d13e      	bne.n	8005932 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058bc:	d114      	bne.n	80058e8 <UART_Transmit_IT+0x48>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d110      	bne.n	80058e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	1c9a      	adds	r2, r3, #2
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	621a      	str	r2, [r3, #32]
 80058e6:	e008      	b.n	80058fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	1c59      	adds	r1, r3, #1
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6211      	str	r1, [r2, #32]
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29b      	uxth	r3, r3
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4619      	mov	r1, r3
 8005908:	84d1      	strh	r1, [r2, #38]	; 0x26
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10f      	bne.n	800592e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800591c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800592c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e000      	b.n	8005934 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
  }
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005954:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ff02 	bl	8005768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b08c      	sub	sp, #48	; 0x30
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b22      	cmp	r3, #34	; 0x22
 8005980:	f040 80ae 	bne.w	8005ae0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598c:	d117      	bne.n	80059be <UART_Receive_IT+0x50>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d113      	bne.n	80059be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b6:	1c9a      	adds	r2, r3, #2
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
 80059bc:	e026      	b.n	8005a0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059c4:	2300      	movs	r3, #0
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d0:	d007      	beq.n	80059e2 <UART_Receive_IT+0x74>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <UART_Receive_IT+0x82>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e008      	b.n	8005a02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d15d      	bne.n	8005adc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0220 	bic.w	r2, r2, #32
 8005a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695a      	ldr	r2, [r3, #20]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d135      	bne.n	8005ad2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f023 0310 	bic.w	r3, r3, #16
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8c:	623a      	str	r2, [r7, #32]
 8005a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	69f9      	ldr	r1, [r7, #28]
 8005a92:	6a3a      	ldr	r2, [r7, #32]
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e5      	bne.n	8005a6c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	2b10      	cmp	r3, #16
 8005aac:	d10a      	bne.n	8005ac4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff fe67 	bl	800579e <HAL_UARTEx_RxEventCallback>
 8005ad0:	e002      	b.n	8005ad8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff fe51 	bl	800577a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e002      	b.n	8005ae2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	e000      	b.n	8005ae2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ae0:	2302      	movs	r3, #2
  }
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3730      	adds	r7, #48	; 0x30
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b26:	f023 030c 	bic.w	r3, r3, #12
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	430b      	orrs	r3, r1
 8005b32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2c      	ldr	r2, [pc, #176]	; (8005c00 <UART_SetConfig+0x114>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d103      	bne.n	8005b5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b54:	f7fe fe12 	bl	800477c <HAL_RCC_GetPCLK2Freq>
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	e002      	b.n	8005b62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b5c:	f7fe fdfa 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 8005b60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009a      	lsls	r2, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	4a22      	ldr	r2, [pc, #136]	; (8005c04 <UART_SetConfig+0x118>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	0119      	lsls	r1, r3, #4
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009a      	lsls	r2, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b98:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <UART_SetConfig+0x118>)
 8005b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	2064      	movs	r0, #100	; 0x64
 8005ba2:	fb00 f303 	mul.w	r3, r0, r3
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	3332      	adds	r3, #50	; 0x32
 8005bac:	4a15      	ldr	r2, [pc, #84]	; (8005c04 <UART_SetConfig+0x118>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb8:	4419      	add	r1, r3
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009a      	lsls	r2, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <UART_SetConfig+0x118>)
 8005bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	2064      	movs	r0, #100	; 0x64
 8005bda:	fb00 f303 	mul.w	r3, r0, r3
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	3332      	adds	r3, #50	; 0x32
 8005be4:	4a07      	ldr	r2, [pc, #28]	; (8005c04 <UART_SetConfig+0x118>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	f003 020f 	and.w	r2, r3, #15
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40013800 	.word	0x40013800
 8005c04:	51eb851f 	.word	0x51eb851f

08005c08 <__libc_init_array>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	4d0c      	ldr	r5, [pc, #48]	; (8005c40 <__libc_init_array+0x38>)
 8005c0e:	4c0d      	ldr	r4, [pc, #52]	; (8005c44 <__libc_init_array+0x3c>)
 8005c10:	1b64      	subs	r4, r4, r5
 8005c12:	10a4      	asrs	r4, r4, #2
 8005c14:	42a6      	cmp	r6, r4
 8005c16:	d109      	bne.n	8005c2c <__libc_init_array+0x24>
 8005c18:	f001 f860 	bl	8006cdc <_init>
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	4d0a      	ldr	r5, [pc, #40]	; (8005c48 <__libc_init_array+0x40>)
 8005c20:	4c0a      	ldr	r4, [pc, #40]	; (8005c4c <__libc_init_array+0x44>)
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	42a6      	cmp	r6, r4
 8005c28:	d105      	bne.n	8005c36 <__libc_init_array+0x2e>
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c30:	4798      	blx	r3
 8005c32:	3601      	adds	r6, #1
 8005c34:	e7ee      	b.n	8005c14 <__libc_init_array+0xc>
 8005c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3a:	4798      	blx	r3
 8005c3c:	3601      	adds	r6, #1
 8005c3e:	e7f2      	b.n	8005c26 <__libc_init_array+0x1e>
 8005c40:	08006f00 	.word	0x08006f00
 8005c44:	08006f00 	.word	0x08006f00
 8005c48:	08006f00 	.word	0x08006f00
 8005c4c:	08006f04 	.word	0x08006f04

08005c50 <memset>:
 8005c50:	4603      	mov	r3, r0
 8005c52:	4402      	add	r2, r0
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d100      	bne.n	8005c5a <memset+0xa>
 8005c58:	4770      	bx	lr
 8005c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c5e:	e7f9      	b.n	8005c54 <memset+0x4>

08005c60 <cos>:
 8005c60:	b530      	push	{r4, r5, lr}
 8005c62:	4a20      	ldr	r2, [pc, #128]	; (8005ce4 <cos+0x84>)
 8005c64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	dc06      	bgt.n	8005c7c <cos+0x1c>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2300      	movs	r3, #0
 8005c72:	b007      	add	sp, #28
 8005c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c78:	f000 ba76 	b.w	8006168 <__kernel_cos>
 8005c7c:	4a1a      	ldr	r2, [pc, #104]	; (8005ce8 <cos+0x88>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	dd05      	ble.n	8005c8e <cos+0x2e>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	f7fa fb91 	bl	80003ac <__aeabi_dsub>
 8005c8a:	b007      	add	sp, #28
 8005c8c:	bd30      	pop	{r4, r5, pc}
 8005c8e:	aa02      	add	r2, sp, #8
 8005c90:	f000 f872 	bl	8005d78 <__ieee754_rem_pio2>
 8005c94:	f000 0003 	and.w	r0, r0, #3
 8005c98:	2801      	cmp	r0, #1
 8005c9a:	d009      	beq.n	8005cb0 <cos+0x50>
 8005c9c:	2802      	cmp	r0, #2
 8005c9e:	d011      	beq.n	8005cc4 <cos+0x64>
 8005ca0:	b9b8      	cbnz	r0, 8005cd2 <cos+0x72>
 8005ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005caa:	f000 fa5d 	bl	8006168 <__kernel_cos>
 8005cae:	e7ec      	b.n	8005c8a <cos+0x2a>
 8005cb0:	9000      	str	r0, [sp, #0]
 8005cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cba:	f000 fe55 	bl	8006968 <__kernel_sin>
 8005cbe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005cc2:	e7e2      	b.n	8005c8a <cos+0x2a>
 8005cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ccc:	f000 fa4c 	bl	8006168 <__kernel_cos>
 8005cd0:	e7f5      	b.n	8005cbe <cos+0x5e>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cde:	f000 fe43 	bl	8006968 <__kernel_sin>
 8005ce2:	e7d2      	b.n	8005c8a <cos+0x2a>
 8005ce4:	3fe921fb 	.word	0x3fe921fb
 8005ce8:	7fefffff 	.word	0x7fefffff

08005cec <sin>:
 8005cec:	b530      	push	{r4, r5, lr}
 8005cee:	4a20      	ldr	r2, [pc, #128]	; (8005d70 <sin+0x84>)
 8005cf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	dc06      	bgt.n	8005d08 <sin+0x1c>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	2300      	movs	r3, #0
 8005d02:	f000 fe31 	bl	8006968 <__kernel_sin>
 8005d06:	e006      	b.n	8005d16 <sin+0x2a>
 8005d08:	4a1a      	ldr	r2, [pc, #104]	; (8005d74 <sin+0x88>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	dd05      	ble.n	8005d1a <sin+0x2e>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	f7fa fb4b 	bl	80003ac <__aeabi_dsub>
 8005d16:	b007      	add	sp, #28
 8005d18:	bd30      	pop	{r4, r5, pc}
 8005d1a:	aa02      	add	r2, sp, #8
 8005d1c:	f000 f82c 	bl	8005d78 <__ieee754_rem_pio2>
 8005d20:	f000 0003 	and.w	r0, r0, #3
 8005d24:	2801      	cmp	r0, #1
 8005d26:	d009      	beq.n	8005d3c <sin+0x50>
 8005d28:	2802      	cmp	r0, #2
 8005d2a:	d00e      	beq.n	8005d4a <sin+0x5e>
 8005d2c:	b9c0      	cbnz	r0, 8005d60 <sin+0x74>
 8005d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d32:	2301      	movs	r3, #1
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d3a:	e7e2      	b.n	8005d02 <sin+0x16>
 8005d3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d44:	f000 fa10 	bl	8006168 <__kernel_cos>
 8005d48:	e7e5      	b.n	8005d16 <sin+0x2a>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d56:	f000 fe07 	bl	8006968 <__kernel_sin>
 8005d5a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005d5e:	e7da      	b.n	8005d16 <sin+0x2a>
 8005d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d68:	f000 f9fe 	bl	8006168 <__kernel_cos>
 8005d6c:	e7f5      	b.n	8005d5a <sin+0x6e>
 8005d6e:	bf00      	nop
 8005d70:	3fe921fb 	.word	0x3fe921fb
 8005d74:	7fefffff 	.word	0x7fefffff

08005d78 <__ieee754_rem_pio2>:
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	4ac4      	ldr	r2, [pc, #784]	; (8006090 <__ieee754_rem_pio2+0x318>)
 8005d80:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005d84:	b08d      	sub	sp, #52	; 0x34
 8005d86:	4592      	cmp	sl, r2
 8005d88:	9104      	str	r1, [sp, #16]
 8005d8a:	dc07      	bgt.n	8005d9c <__ieee754_rem_pio2+0x24>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e9c4 0100 	strd	r0, r1, [r4]
 8005d94:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005d98:	2500      	movs	r5, #0
 8005d9a:	e024      	b.n	8005de6 <__ieee754_rem_pio2+0x6e>
 8005d9c:	4abd      	ldr	r2, [pc, #756]	; (8006094 <__ieee754_rem_pio2+0x31c>)
 8005d9e:	4592      	cmp	sl, r2
 8005da0:	dc72      	bgt.n	8005e88 <__ieee754_rem_pio2+0x110>
 8005da2:	9b04      	ldr	r3, [sp, #16]
 8005da4:	4dbc      	ldr	r5, [pc, #752]	; (8006098 <__ieee754_rem_pio2+0x320>)
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	a3ab      	add	r3, pc, #684	; (adr r3, 8006058 <__ieee754_rem_pio2+0x2e0>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	dd36      	ble.n	8005e1e <__ieee754_rem_pio2+0xa6>
 8005db0:	f7fa fafc 	bl	80003ac <__aeabi_dsub>
 8005db4:	45aa      	cmp	sl, r5
 8005db6:	4606      	mov	r6, r0
 8005db8:	460f      	mov	r7, r1
 8005dba:	d018      	beq.n	8005dee <__ieee754_rem_pio2+0x76>
 8005dbc:	a3a8      	add	r3, pc, #672	; (adr r3, 8006060 <__ieee754_rem_pio2+0x2e8>)
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f7fa faf3 	bl	80003ac <__aeabi_dsub>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4630      	mov	r0, r6
 8005dcc:	e9c4 2300 	strd	r2, r3, [r4]
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	f7fa faeb 	bl	80003ac <__aeabi_dsub>
 8005dd6:	a3a2      	add	r3, pc, #648	; (adr r3, 8006060 <__ieee754_rem_pio2+0x2e8>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f7fa fae6 	bl	80003ac <__aeabi_dsub>
 8005de0:	2501      	movs	r5, #1
 8005de2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005de6:	4628      	mov	r0, r5
 8005de8:	b00d      	add	sp, #52	; 0x34
 8005dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dee:	a39e      	add	r3, pc, #632	; (adr r3, 8006068 <__ieee754_rem_pio2+0x2f0>)
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f7fa fada 	bl	80003ac <__aeabi_dsub>
 8005df8:	a39d      	add	r3, pc, #628	; (adr r3, 8006070 <__ieee754_rem_pio2+0x2f8>)
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	4606      	mov	r6, r0
 8005e00:	460f      	mov	r7, r1
 8005e02:	f7fa fad3 	bl	80003ac <__aeabi_dsub>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	e9c4 2300 	strd	r2, r3, [r4]
 8005e10:	4639      	mov	r1, r7
 8005e12:	f7fa facb 	bl	80003ac <__aeabi_dsub>
 8005e16:	a396      	add	r3, pc, #600	; (adr r3, 8006070 <__ieee754_rem_pio2+0x2f8>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	e7de      	b.n	8005ddc <__ieee754_rem_pio2+0x64>
 8005e1e:	f7fa fac7 	bl	80003b0 <__adddf3>
 8005e22:	45aa      	cmp	sl, r5
 8005e24:	4606      	mov	r6, r0
 8005e26:	460f      	mov	r7, r1
 8005e28:	d016      	beq.n	8005e58 <__ieee754_rem_pio2+0xe0>
 8005e2a:	a38d      	add	r3, pc, #564	; (adr r3, 8006060 <__ieee754_rem_pio2+0x2e8>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f7fa fabe 	bl	80003b0 <__adddf3>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4630      	mov	r0, r6
 8005e3a:	e9c4 2300 	strd	r2, r3, [r4]
 8005e3e:	4639      	mov	r1, r7
 8005e40:	f7fa fab4 	bl	80003ac <__aeabi_dsub>
 8005e44:	a386      	add	r3, pc, #536	; (adr r3, 8006060 <__ieee754_rem_pio2+0x2e8>)
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f7fa fab1 	bl	80003b0 <__adddf3>
 8005e4e:	f04f 35ff 	mov.w	r5, #4294967295
 8005e52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e56:	e7c6      	b.n	8005de6 <__ieee754_rem_pio2+0x6e>
 8005e58:	a383      	add	r3, pc, #524	; (adr r3, 8006068 <__ieee754_rem_pio2+0x2f0>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa faa7 	bl	80003b0 <__adddf3>
 8005e62:	a383      	add	r3, pc, #524	; (adr r3, 8006070 <__ieee754_rem_pio2+0x2f8>)
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	4606      	mov	r6, r0
 8005e6a:	460f      	mov	r7, r1
 8005e6c:	f7fa faa0 	bl	80003b0 <__adddf3>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4630      	mov	r0, r6
 8005e76:	e9c4 2300 	strd	r2, r3, [r4]
 8005e7a:	4639      	mov	r1, r7
 8005e7c:	f7fa fa96 	bl	80003ac <__aeabi_dsub>
 8005e80:	a37b      	add	r3, pc, #492	; (adr r3, 8006070 <__ieee754_rem_pio2+0x2f8>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	e7e0      	b.n	8005e4a <__ieee754_rem_pio2+0xd2>
 8005e88:	4a84      	ldr	r2, [pc, #528]	; (800609c <__ieee754_rem_pio2+0x324>)
 8005e8a:	4592      	cmp	sl, r2
 8005e8c:	f300 80d5 	bgt.w	800603a <__ieee754_rem_pio2+0x2c2>
 8005e90:	f000 fe20 	bl	8006ad4 <fabs>
 8005e94:	a378      	add	r3, pc, #480	; (adr r3, 8006078 <__ieee754_rem_pio2+0x300>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	460f      	mov	r7, r1
 8005e9e:	f7fa f957 	bl	8000150 <__aeabi_dmul>
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	4b7e      	ldr	r3, [pc, #504]	; (80060a0 <__ieee754_rem_pio2+0x328>)
 8005ea6:	f7fa fa83 	bl	80003b0 <__adddf3>
 8005eaa:	f7fa fcbf 	bl	800082c <__aeabi_d2iz>
 8005eae:	4605      	mov	r5, r0
 8005eb0:	f7fa fbca 	bl	8000648 <__aeabi_i2d>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ebc:	a366      	add	r3, pc, #408	; (adr r3, 8006058 <__ieee754_rem_pio2+0x2e0>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f7fa f945 	bl	8000150 <__aeabi_dmul>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4630      	mov	r0, r6
 8005ecc:	4639      	mov	r1, r7
 8005ece:	f7fa fa6d 	bl	80003ac <__aeabi_dsub>
 8005ed2:	a363      	add	r3, pc, #396	; (adr r3, 8006060 <__ieee754_rem_pio2+0x2e8>)
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	4680      	mov	r8, r0
 8005eda:	4689      	mov	r9, r1
 8005edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee0:	f7fa f936 	bl	8000150 <__aeabi_dmul>
 8005ee4:	2d1f      	cmp	r5, #31
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	460f      	mov	r7, r1
 8005eea:	dc0e      	bgt.n	8005f0a <__ieee754_rem_pio2+0x192>
 8005eec:	4b6d      	ldr	r3, [pc, #436]	; (80060a4 <__ieee754_rem_pio2+0x32c>)
 8005eee:	1e6a      	subs	r2, r5, #1
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	4553      	cmp	r3, sl
 8005ef6:	d008      	beq.n	8005f0a <__ieee754_rem_pio2+0x192>
 8005ef8:	4632      	mov	r2, r6
 8005efa:	463b      	mov	r3, r7
 8005efc:	4640      	mov	r0, r8
 8005efe:	4649      	mov	r1, r9
 8005f00:	f7fa fa54 	bl	80003ac <__aeabi_dsub>
 8005f04:	e9c4 0100 	strd	r0, r1, [r4]
 8005f08:	e013      	b.n	8005f32 <__ieee754_rem_pio2+0x1ba>
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	4640      	mov	r0, r8
 8005f10:	4649      	mov	r1, r9
 8005f12:	f7fa fa4b 	bl	80003ac <__aeabi_dsub>
 8005f16:	ea4f 532a 	mov.w	r3, sl, asr #20
 8005f1a:	9305      	str	r3, [sp, #20]
 8005f1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f20:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8005f24:	f1ba 0f10 	cmp.w	sl, #16
 8005f28:	dc1f      	bgt.n	8005f6a <__ieee754_rem_pio2+0x1f2>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	e9c4 2300 	strd	r2, r3, [r4]
 8005f32:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005f36:	4640      	mov	r0, r8
 8005f38:	4653      	mov	r3, sl
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	f7fa fa36 	bl	80003ac <__aeabi_dsub>
 8005f40:	4632      	mov	r2, r6
 8005f42:	463b      	mov	r3, r7
 8005f44:	f7fa fa32 	bl	80003ac <__aeabi_dsub>
 8005f48:	460b      	mov	r3, r1
 8005f4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f4e:	9904      	ldr	r1, [sp, #16]
 8005f50:	4602      	mov	r2, r0
 8005f52:	2900      	cmp	r1, #0
 8005f54:	f6bf af47 	bge.w	8005de6 <__ieee754_rem_pio2+0x6e>
 8005f58:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8005f5c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005f60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f64:	60e3      	str	r3, [r4, #12]
 8005f66:	426d      	negs	r5, r5
 8005f68:	e73d      	b.n	8005de6 <__ieee754_rem_pio2+0x6e>
 8005f6a:	a33f      	add	r3, pc, #252	; (adr r3, 8006068 <__ieee754_rem_pio2+0x2f0>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f74:	f7fa f8ec 	bl	8000150 <__aeabi_dmul>
 8005f78:	4606      	mov	r6, r0
 8005f7a:	460f      	mov	r7, r1
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4640      	mov	r0, r8
 8005f82:	4649      	mov	r1, r9
 8005f84:	f7fa fa12 	bl	80003ac <__aeabi_dsub>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4682      	mov	sl, r0
 8005f8e:	468b      	mov	fp, r1
 8005f90:	4640      	mov	r0, r8
 8005f92:	4649      	mov	r1, r9
 8005f94:	f7fa fa0a 	bl	80003ac <__aeabi_dsub>
 8005f98:	4632      	mov	r2, r6
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	f7fa fa06 	bl	80003ac <__aeabi_dsub>
 8005fa0:	a333      	add	r3, pc, #204	; (adr r3, 8006070 <__ieee754_rem_pio2+0x2f8>)
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	460f      	mov	r7, r1
 8005faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fae:	f7fa f8cf 	bl	8000150 <__aeabi_dmul>
 8005fb2:	4632      	mov	r2, r6
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	f7fa f9f9 	bl	80003ac <__aeabi_dsub>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4606      	mov	r6, r0
 8005fc0:	460f      	mov	r7, r1
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	f7fa f9f1 	bl	80003ac <__aeabi_dsub>
 8005fca:	9a05      	ldr	r2, [sp, #20]
 8005fcc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b31      	cmp	r3, #49	; 0x31
 8005fd4:	dc06      	bgt.n	8005fe4 <__ieee754_rem_pio2+0x26c>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	46d0      	mov	r8, sl
 8005fdc:	46d9      	mov	r9, fp
 8005fde:	e9c4 2300 	strd	r2, r3, [r4]
 8005fe2:	e7a6      	b.n	8005f32 <__ieee754_rem_pio2+0x1ba>
 8005fe4:	a326      	add	r3, pc, #152	; (adr r3, 8006080 <__ieee754_rem_pio2+0x308>)
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fee:	f7fa f8af 	bl	8000150 <__aeabi_dmul>
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	460f      	mov	r7, r1
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	4650      	mov	r0, sl
 8005ffc:	4659      	mov	r1, fp
 8005ffe:	f7fa f9d5 	bl	80003ac <__aeabi_dsub>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4680      	mov	r8, r0
 8006008:	4689      	mov	r9, r1
 800600a:	4650      	mov	r0, sl
 800600c:	4659      	mov	r1, fp
 800600e:	f7fa f9cd 	bl	80003ac <__aeabi_dsub>
 8006012:	4632      	mov	r2, r6
 8006014:	463b      	mov	r3, r7
 8006016:	f7fa f9c9 	bl	80003ac <__aeabi_dsub>
 800601a:	a31b      	add	r3, pc, #108	; (adr r3, 8006088 <__ieee754_rem_pio2+0x310>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	4606      	mov	r6, r0
 8006022:	460f      	mov	r7, r1
 8006024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006028:	f7fa f892 	bl	8000150 <__aeabi_dmul>
 800602c:	4632      	mov	r2, r6
 800602e:	463b      	mov	r3, r7
 8006030:	f7fa f9bc 	bl	80003ac <__aeabi_dsub>
 8006034:	4606      	mov	r6, r0
 8006036:	460f      	mov	r7, r1
 8006038:	e75e      	b.n	8005ef8 <__ieee754_rem_pio2+0x180>
 800603a:	4a1b      	ldr	r2, [pc, #108]	; (80060a8 <__ieee754_rem_pio2+0x330>)
 800603c:	4592      	cmp	sl, r2
 800603e:	dd35      	ble.n	80060ac <__ieee754_rem_pio2+0x334>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	f7fa f9b2 	bl	80003ac <__aeabi_dsub>
 8006048:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800604c:	e9c4 0100 	strd	r0, r1, [r4]
 8006050:	e6a2      	b.n	8005d98 <__ieee754_rem_pio2+0x20>
 8006052:	bf00      	nop
 8006054:	f3af 8000 	nop.w
 8006058:	54400000 	.word	0x54400000
 800605c:	3ff921fb 	.word	0x3ff921fb
 8006060:	1a626331 	.word	0x1a626331
 8006064:	3dd0b461 	.word	0x3dd0b461
 8006068:	1a600000 	.word	0x1a600000
 800606c:	3dd0b461 	.word	0x3dd0b461
 8006070:	2e037073 	.word	0x2e037073
 8006074:	3ba3198a 	.word	0x3ba3198a
 8006078:	6dc9c883 	.word	0x6dc9c883
 800607c:	3fe45f30 	.word	0x3fe45f30
 8006080:	2e000000 	.word	0x2e000000
 8006084:	3ba3198a 	.word	0x3ba3198a
 8006088:	252049c1 	.word	0x252049c1
 800608c:	397b839a 	.word	0x397b839a
 8006090:	3fe921fb 	.word	0x3fe921fb
 8006094:	4002d97b 	.word	0x4002d97b
 8006098:	3ff921fb 	.word	0x3ff921fb
 800609c:	413921fb 	.word	0x413921fb
 80060a0:	3fe00000 	.word	0x3fe00000
 80060a4:	08006d24 	.word	0x08006d24
 80060a8:	7fefffff 	.word	0x7fefffff
 80060ac:	ea4f 552a 	mov.w	r5, sl, asr #20
 80060b0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80060b4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80060b8:	460f      	mov	r7, r1
 80060ba:	4606      	mov	r6, r0
 80060bc:	f7fa fbb6 	bl	800082c <__aeabi_d2iz>
 80060c0:	f7fa fac2 	bl	8000648 <__aeabi_i2d>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4630      	mov	r0, r6
 80060ca:	4639      	mov	r1, r7
 80060cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80060d0:	f7fa f96c 	bl	80003ac <__aeabi_dsub>
 80060d4:	2200      	movs	r2, #0
 80060d6:	4b22      	ldr	r3, [pc, #136]	; (8006160 <__ieee754_rem_pio2+0x3e8>)
 80060d8:	f7fa f83a 	bl	8000150 <__aeabi_dmul>
 80060dc:	460f      	mov	r7, r1
 80060de:	4606      	mov	r6, r0
 80060e0:	f7fa fba4 	bl	800082c <__aeabi_d2iz>
 80060e4:	f7fa fab0 	bl	8000648 <__aeabi_i2d>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4630      	mov	r0, r6
 80060ee:	4639      	mov	r1, r7
 80060f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060f4:	f7fa f95a 	bl	80003ac <__aeabi_dsub>
 80060f8:	2200      	movs	r2, #0
 80060fa:	4b19      	ldr	r3, [pc, #100]	; (8006160 <__ieee754_rem_pio2+0x3e8>)
 80060fc:	f7fa f828 	bl	8000150 <__aeabi_dmul>
 8006100:	f04f 0803 	mov.w	r8, #3
 8006104:	2600      	movs	r6, #0
 8006106:	2700      	movs	r7, #0
 8006108:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800610c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8006110:	4632      	mov	r2, r6
 8006112:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8006116:	463b      	mov	r3, r7
 8006118:	46c2      	mov	sl, r8
 800611a:	f108 38ff 	add.w	r8, r8, #4294967295
 800611e:	f7fa fb53 	bl	80007c8 <__aeabi_dcmpeq>
 8006122:	2800      	cmp	r0, #0
 8006124:	d1f4      	bne.n	8006110 <__ieee754_rem_pio2+0x398>
 8006126:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <__ieee754_rem_pio2+0x3ec>)
 8006128:	462a      	mov	r2, r5
 800612a:	9301      	str	r3, [sp, #4]
 800612c:	2302      	movs	r3, #2
 800612e:	4621      	mov	r1, r4
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	a806      	add	r0, sp, #24
 8006134:	4653      	mov	r3, sl
 8006136:	f000 f8d5 	bl	80062e4 <__kernel_rem_pio2>
 800613a:	9b04      	ldr	r3, [sp, #16]
 800613c:	4605      	mov	r5, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	f6bf ae51 	bge.w	8005de6 <__ieee754_rem_pio2+0x6e>
 8006144:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006148:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800614c:	e9c4 2300 	strd	r2, r3, [r4]
 8006150:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006158:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800615c:	e703      	b.n	8005f66 <__ieee754_rem_pio2+0x1ee>
 800615e:	bf00      	nop
 8006160:	41700000 	.word	0x41700000
 8006164:	08006da4 	.word	0x08006da4

08006168 <__kernel_cos>:
 8006168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006170:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006174:	4680      	mov	r8, r0
 8006176:	460f      	mov	r7, r1
 8006178:	e9cd 2300 	strd	r2, r3, [sp]
 800617c:	da04      	bge.n	8006188 <__kernel_cos+0x20>
 800617e:	f7fa fb55 	bl	800082c <__aeabi_d2iz>
 8006182:	2800      	cmp	r0, #0
 8006184:	f000 8086 	beq.w	8006294 <__kernel_cos+0x12c>
 8006188:	4642      	mov	r2, r8
 800618a:	463b      	mov	r3, r7
 800618c:	4640      	mov	r0, r8
 800618e:	4639      	mov	r1, r7
 8006190:	f7f9 ffde 	bl	8000150 <__aeabi_dmul>
 8006194:	2200      	movs	r2, #0
 8006196:	4b4e      	ldr	r3, [pc, #312]	; (80062d0 <__kernel_cos+0x168>)
 8006198:	4604      	mov	r4, r0
 800619a:	460d      	mov	r5, r1
 800619c:	f7f9 ffd8 	bl	8000150 <__aeabi_dmul>
 80061a0:	a33f      	add	r3, pc, #252	; (adr r3, 80062a0 <__kernel_cos+0x138>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	4682      	mov	sl, r0
 80061a8:	468b      	mov	fp, r1
 80061aa:	4620      	mov	r0, r4
 80061ac:	4629      	mov	r1, r5
 80061ae:	f7f9 ffcf 	bl	8000150 <__aeabi_dmul>
 80061b2:	a33d      	add	r3, pc, #244	; (adr r3, 80062a8 <__kernel_cos+0x140>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f7fa f8fa 	bl	80003b0 <__adddf3>
 80061bc:	4622      	mov	r2, r4
 80061be:	462b      	mov	r3, r5
 80061c0:	f7f9 ffc6 	bl	8000150 <__aeabi_dmul>
 80061c4:	a33a      	add	r3, pc, #232	; (adr r3, 80062b0 <__kernel_cos+0x148>)
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f7fa f8ef 	bl	80003ac <__aeabi_dsub>
 80061ce:	4622      	mov	r2, r4
 80061d0:	462b      	mov	r3, r5
 80061d2:	f7f9 ffbd 	bl	8000150 <__aeabi_dmul>
 80061d6:	a338      	add	r3, pc, #224	; (adr r3, 80062b8 <__kernel_cos+0x150>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f7fa f8e8 	bl	80003b0 <__adddf3>
 80061e0:	4622      	mov	r2, r4
 80061e2:	462b      	mov	r3, r5
 80061e4:	f7f9 ffb4 	bl	8000150 <__aeabi_dmul>
 80061e8:	a335      	add	r3, pc, #212	; (adr r3, 80062c0 <__kernel_cos+0x158>)
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	f7fa f8dd 	bl	80003ac <__aeabi_dsub>
 80061f2:	4622      	mov	r2, r4
 80061f4:	462b      	mov	r3, r5
 80061f6:	f7f9 ffab 	bl	8000150 <__aeabi_dmul>
 80061fa:	a333      	add	r3, pc, #204	; (adr r3, 80062c8 <__kernel_cos+0x160>)
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f7fa f8d6 	bl	80003b0 <__adddf3>
 8006204:	4622      	mov	r2, r4
 8006206:	462b      	mov	r3, r5
 8006208:	f7f9 ffa2 	bl	8000150 <__aeabi_dmul>
 800620c:	4622      	mov	r2, r4
 800620e:	462b      	mov	r3, r5
 8006210:	f7f9 ff9e 	bl	8000150 <__aeabi_dmul>
 8006214:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006218:	4604      	mov	r4, r0
 800621a:	460d      	mov	r5, r1
 800621c:	4640      	mov	r0, r8
 800621e:	4639      	mov	r1, r7
 8006220:	f7f9 ff96 	bl	8000150 <__aeabi_dmul>
 8006224:	460b      	mov	r3, r1
 8006226:	4602      	mov	r2, r0
 8006228:	4629      	mov	r1, r5
 800622a:	4620      	mov	r0, r4
 800622c:	f7fa f8be 	bl	80003ac <__aeabi_dsub>
 8006230:	4b28      	ldr	r3, [pc, #160]	; (80062d4 <__kernel_cos+0x16c>)
 8006232:	4680      	mov	r8, r0
 8006234:	429e      	cmp	r6, r3
 8006236:	4689      	mov	r9, r1
 8006238:	dc0e      	bgt.n	8006258 <__kernel_cos+0xf0>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4650      	mov	r0, sl
 8006240:	4659      	mov	r1, fp
 8006242:	f7fa f8b3 	bl	80003ac <__aeabi_dsub>
 8006246:	4602      	mov	r2, r0
 8006248:	2000      	movs	r0, #0
 800624a:	460b      	mov	r3, r1
 800624c:	4922      	ldr	r1, [pc, #136]	; (80062d8 <__kernel_cos+0x170>)
 800624e:	f7fa f8ad 	bl	80003ac <__aeabi_dsub>
 8006252:	b003      	add	sp, #12
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	2400      	movs	r4, #0
 800625a:	4b20      	ldr	r3, [pc, #128]	; (80062dc <__kernel_cos+0x174>)
 800625c:	4622      	mov	r2, r4
 800625e:	429e      	cmp	r6, r3
 8006260:	bfcc      	ite	gt
 8006262:	4d1f      	ldrgt	r5, [pc, #124]	; (80062e0 <__kernel_cos+0x178>)
 8006264:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006268:	462b      	mov	r3, r5
 800626a:	2000      	movs	r0, #0
 800626c:	491a      	ldr	r1, [pc, #104]	; (80062d8 <__kernel_cos+0x170>)
 800626e:	f7fa f89d 	bl	80003ac <__aeabi_dsub>
 8006272:	4622      	mov	r2, r4
 8006274:	4606      	mov	r6, r0
 8006276:	460f      	mov	r7, r1
 8006278:	462b      	mov	r3, r5
 800627a:	4650      	mov	r0, sl
 800627c:	4659      	mov	r1, fp
 800627e:	f7fa f895 	bl	80003ac <__aeabi_dsub>
 8006282:	4642      	mov	r2, r8
 8006284:	464b      	mov	r3, r9
 8006286:	f7fa f891 	bl	80003ac <__aeabi_dsub>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4630      	mov	r0, r6
 8006290:	4639      	mov	r1, r7
 8006292:	e7dc      	b.n	800624e <__kernel_cos+0xe6>
 8006294:	2000      	movs	r0, #0
 8006296:	4910      	ldr	r1, [pc, #64]	; (80062d8 <__kernel_cos+0x170>)
 8006298:	e7db      	b.n	8006252 <__kernel_cos+0xea>
 800629a:	bf00      	nop
 800629c:	f3af 8000 	nop.w
 80062a0:	be8838d4 	.word	0xbe8838d4
 80062a4:	bda8fae9 	.word	0xbda8fae9
 80062a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80062ac:	3e21ee9e 	.word	0x3e21ee9e
 80062b0:	809c52ad 	.word	0x809c52ad
 80062b4:	3e927e4f 	.word	0x3e927e4f
 80062b8:	19cb1590 	.word	0x19cb1590
 80062bc:	3efa01a0 	.word	0x3efa01a0
 80062c0:	16c15177 	.word	0x16c15177
 80062c4:	3f56c16c 	.word	0x3f56c16c
 80062c8:	5555554c 	.word	0x5555554c
 80062cc:	3fa55555 	.word	0x3fa55555
 80062d0:	3fe00000 	.word	0x3fe00000
 80062d4:	3fd33332 	.word	0x3fd33332
 80062d8:	3ff00000 	.word	0x3ff00000
 80062dc:	3fe90000 	.word	0x3fe90000
 80062e0:	3fd20000 	.word	0x3fd20000

080062e4 <__kernel_rem_pio2>:
 80062e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80062ec:	9308      	str	r3, [sp, #32]
 80062ee:	9106      	str	r1, [sp, #24]
 80062f0:	4bb6      	ldr	r3, [pc, #728]	; (80065cc <__kernel_rem_pio2+0x2e8>)
 80062f2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80062f4:	f112 0f14 	cmn.w	r2, #20
 80062f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80062fc:	bfa8      	it	ge
 80062fe:	1ed4      	subge	r4, r2, #3
 8006300:	9302      	str	r3, [sp, #8]
 8006302:	9b08      	ldr	r3, [sp, #32]
 8006304:	bfb8      	it	lt
 8006306:	2400      	movlt	r4, #0
 8006308:	f103 33ff 	add.w	r3, r3, #4294967295
 800630c:	9307      	str	r3, [sp, #28]
 800630e:	bfa4      	itt	ge
 8006310:	2318      	movge	r3, #24
 8006312:	fb94 f4f3 	sdivge	r4, r4, r3
 8006316:	f06f 0317 	mvn.w	r3, #23
 800631a:	fb04 3303 	mla	r3, r4, r3, r3
 800631e:	eb03 0b02 	add.w	fp, r3, r2
 8006322:	9a07      	ldr	r2, [sp, #28]
 8006324:	9b02      	ldr	r3, [sp, #8]
 8006326:	1aa7      	subs	r7, r4, r2
 8006328:	eb03 0802 	add.w	r8, r3, r2
 800632c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800632e:	2500      	movs	r5, #0
 8006330:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006334:	2200      	movs	r2, #0
 8006336:	2300      	movs	r3, #0
 8006338:	9009      	str	r0, [sp, #36]	; 0x24
 800633a:	ae20      	add	r6, sp, #128	; 0x80
 800633c:	4545      	cmp	r5, r8
 800633e:	dd14      	ble.n	800636a <__kernel_rem_pio2+0x86>
 8006340:	f04f 0800 	mov.w	r8, #0
 8006344:	9a08      	ldr	r2, [sp, #32]
 8006346:	ab20      	add	r3, sp, #128	; 0x80
 8006348:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800634c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8006350:	9b02      	ldr	r3, [sp, #8]
 8006352:	4598      	cmp	r8, r3
 8006354:	dc35      	bgt.n	80063c2 <__kernel_rem_pio2+0xde>
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	2200      	movs	r2, #0
 800635a:	f1a3 0908 	sub.w	r9, r3, #8
 800635e:	2300      	movs	r3, #0
 8006360:	462f      	mov	r7, r5
 8006362:	2600      	movs	r6, #0
 8006364:	e9cd 2300 	strd	r2, r3, [sp]
 8006368:	e01f      	b.n	80063aa <__kernel_rem_pio2+0xc6>
 800636a:	42ef      	cmn	r7, r5
 800636c:	d40b      	bmi.n	8006386 <__kernel_rem_pio2+0xa2>
 800636e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006372:	e9cd 2300 	strd	r2, r3, [sp]
 8006376:	f7fa f967 	bl	8000648 <__aeabi_i2d>
 800637a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800637e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006382:	3501      	adds	r5, #1
 8006384:	e7da      	b.n	800633c <__kernel_rem_pio2+0x58>
 8006386:	4610      	mov	r0, r2
 8006388:	4619      	mov	r1, r3
 800638a:	e7f8      	b.n	800637e <__kernel_rem_pio2+0x9a>
 800638c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006390:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006394:	f7f9 fedc 	bl	8000150 <__aeabi_dmul>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063a0:	f7fa f806 	bl	80003b0 <__adddf3>
 80063a4:	e9cd 0100 	strd	r0, r1, [sp]
 80063a8:	3601      	adds	r6, #1
 80063aa:	9b07      	ldr	r3, [sp, #28]
 80063ac:	3f08      	subs	r7, #8
 80063ae:	429e      	cmp	r6, r3
 80063b0:	ddec      	ble.n	800638c <__kernel_rem_pio2+0xa8>
 80063b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063b6:	f108 0801 	add.w	r8, r8, #1
 80063ba:	e8ea 2302 	strd	r2, r3, [sl], #8
 80063be:	3508      	adds	r5, #8
 80063c0:	e7c6      	b.n	8006350 <__kernel_rem_pio2+0x6c>
 80063c2:	9b02      	ldr	r3, [sp, #8]
 80063c4:	aa0c      	add	r2, sp, #48	; 0x30
 80063c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80063ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80063cc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80063ce:	9e02      	ldr	r6, [sp, #8]
 80063d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80063d4:	930a      	str	r3, [sp, #40]	; 0x28
 80063d6:	ab98      	add	r3, sp, #608	; 0x260
 80063d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063dc:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80063e0:	ab70      	add	r3, sp, #448	; 0x1c0
 80063e2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80063e6:	46d0      	mov	r8, sl
 80063e8:	46b1      	mov	r9, r6
 80063ea:	af0c      	add	r7, sp, #48	; 0x30
 80063ec:	9700      	str	r7, [sp, #0]
 80063ee:	f1b9 0f00 	cmp.w	r9, #0
 80063f2:	f1a8 0808 	sub.w	r8, r8, #8
 80063f6:	dc71      	bgt.n	80064dc <__kernel_rem_pio2+0x1f8>
 80063f8:	465a      	mov	r2, fp
 80063fa:	4620      	mov	r0, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	f000 fbef 	bl	8006be0 <scalbn>
 8006402:	2200      	movs	r2, #0
 8006404:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006408:	4604      	mov	r4, r0
 800640a:	460d      	mov	r5, r1
 800640c:	f7f9 fea0 	bl	8000150 <__aeabi_dmul>
 8006410:	f000 fb66 	bl	8006ae0 <floor>
 8006414:	2200      	movs	r2, #0
 8006416:	4b6e      	ldr	r3, [pc, #440]	; (80065d0 <__kernel_rem_pio2+0x2ec>)
 8006418:	f7f9 fe9a 	bl	8000150 <__aeabi_dmul>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4620      	mov	r0, r4
 8006422:	4629      	mov	r1, r5
 8006424:	f7f9 ffc2 	bl	80003ac <__aeabi_dsub>
 8006428:	460d      	mov	r5, r1
 800642a:	4604      	mov	r4, r0
 800642c:	f7fa f9fe 	bl	800082c <__aeabi_d2iz>
 8006430:	9004      	str	r0, [sp, #16]
 8006432:	f7fa f909 	bl	8000648 <__aeabi_i2d>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4620      	mov	r0, r4
 800643c:	4629      	mov	r1, r5
 800643e:	f7f9 ffb5 	bl	80003ac <__aeabi_dsub>
 8006442:	f1bb 0f00 	cmp.w	fp, #0
 8006446:	4680      	mov	r8, r0
 8006448:	4689      	mov	r9, r1
 800644a:	dd70      	ble.n	800652e <__kernel_rem_pio2+0x24a>
 800644c:	1e72      	subs	r2, r6, #1
 800644e:	ab0c      	add	r3, sp, #48	; 0x30
 8006450:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006454:	9c04      	ldr	r4, [sp, #16]
 8006456:	f1cb 0118 	rsb	r1, fp, #24
 800645a:	fa40 f301 	asr.w	r3, r0, r1
 800645e:	441c      	add	r4, r3
 8006460:	408b      	lsls	r3, r1
 8006462:	1ac0      	subs	r0, r0, r3
 8006464:	ab0c      	add	r3, sp, #48	; 0x30
 8006466:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800646a:	f1cb 0317 	rsb	r3, fp, #23
 800646e:	9404      	str	r4, [sp, #16]
 8006470:	fa40 f303 	asr.w	r3, r0, r3
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	9b00      	ldr	r3, [sp, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	dd66      	ble.n	800654a <__kernel_rem_pio2+0x266>
 800647c:	2200      	movs	r2, #0
 800647e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006482:	4614      	mov	r4, r2
 8006484:	9b04      	ldr	r3, [sp, #16]
 8006486:	3301      	adds	r3, #1
 8006488:	9304      	str	r3, [sp, #16]
 800648a:	4296      	cmp	r6, r2
 800648c:	f300 80ac 	bgt.w	80065e8 <__kernel_rem_pio2+0x304>
 8006490:	f1bb 0f00 	cmp.w	fp, #0
 8006494:	dd07      	ble.n	80064a6 <__kernel_rem_pio2+0x1c2>
 8006496:	f1bb 0f01 	cmp.w	fp, #1
 800649a:	f000 80b4 	beq.w	8006606 <__kernel_rem_pio2+0x322>
 800649e:	f1bb 0f02 	cmp.w	fp, #2
 80064a2:	f000 80ba 	beq.w	800661a <__kernel_rem_pio2+0x336>
 80064a6:	9b00      	ldr	r3, [sp, #0]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d14e      	bne.n	800654a <__kernel_rem_pio2+0x266>
 80064ac:	4642      	mov	r2, r8
 80064ae:	464b      	mov	r3, r9
 80064b0:	2000      	movs	r0, #0
 80064b2:	4948      	ldr	r1, [pc, #288]	; (80065d4 <__kernel_rem_pio2+0x2f0>)
 80064b4:	f7f9 ff7a 	bl	80003ac <__aeabi_dsub>
 80064b8:	4680      	mov	r8, r0
 80064ba:	4689      	mov	r9, r1
 80064bc:	2c00      	cmp	r4, #0
 80064be:	d044      	beq.n	800654a <__kernel_rem_pio2+0x266>
 80064c0:	465a      	mov	r2, fp
 80064c2:	2000      	movs	r0, #0
 80064c4:	4943      	ldr	r1, [pc, #268]	; (80065d4 <__kernel_rem_pio2+0x2f0>)
 80064c6:	f000 fb8b 	bl	8006be0 <scalbn>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4640      	mov	r0, r8
 80064d0:	4649      	mov	r1, r9
 80064d2:	f7f9 ff6b 	bl	80003ac <__aeabi_dsub>
 80064d6:	4680      	mov	r8, r0
 80064d8:	4689      	mov	r9, r1
 80064da:	e036      	b.n	800654a <__kernel_rem_pio2+0x266>
 80064dc:	2200      	movs	r2, #0
 80064de:	4b3e      	ldr	r3, [pc, #248]	; (80065d8 <__kernel_rem_pio2+0x2f4>)
 80064e0:	4620      	mov	r0, r4
 80064e2:	4629      	mov	r1, r5
 80064e4:	f7f9 fe34 	bl	8000150 <__aeabi_dmul>
 80064e8:	f7fa f9a0 	bl	800082c <__aeabi_d2iz>
 80064ec:	f7fa f8ac 	bl	8000648 <__aeabi_i2d>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064f8:	2200      	movs	r2, #0
 80064fa:	4b38      	ldr	r3, [pc, #224]	; (80065dc <__kernel_rem_pio2+0x2f8>)
 80064fc:	f7f9 fe28 	bl	8000150 <__aeabi_dmul>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f7f9 ff50 	bl	80003ac <__aeabi_dsub>
 800650c:	f7fa f98e 	bl	800082c <__aeabi_d2iz>
 8006510:	9b00      	ldr	r3, [sp, #0]
 8006512:	f109 39ff 	add.w	r9, r9, #4294967295
 8006516:	f843 0b04 	str.w	r0, [r3], #4
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006520:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006524:	f7f9 ff44 	bl	80003b0 <__adddf3>
 8006528:	4604      	mov	r4, r0
 800652a:	460d      	mov	r5, r1
 800652c:	e75f      	b.n	80063ee <__kernel_rem_pio2+0x10a>
 800652e:	d105      	bne.n	800653c <__kernel_rem_pio2+0x258>
 8006530:	1e73      	subs	r3, r6, #1
 8006532:	aa0c      	add	r2, sp, #48	; 0x30
 8006534:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006538:	15c3      	asrs	r3, r0, #23
 800653a:	e79b      	b.n	8006474 <__kernel_rem_pio2+0x190>
 800653c:	2200      	movs	r2, #0
 800653e:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <__kernel_rem_pio2+0x2fc>)
 8006540:	f7fa f960 	bl	8000804 <__aeabi_dcmpge>
 8006544:	2800      	cmp	r0, #0
 8006546:	d13e      	bne.n	80065c6 <__kernel_rem_pio2+0x2e2>
 8006548:	9000      	str	r0, [sp, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	2300      	movs	r3, #0
 800654e:	4640      	mov	r0, r8
 8006550:	4649      	mov	r1, r9
 8006552:	f7fa f939 	bl	80007c8 <__aeabi_dcmpeq>
 8006556:	2800      	cmp	r0, #0
 8006558:	f000 80b1 	beq.w	80066be <__kernel_rem_pio2+0x3da>
 800655c:	1e74      	subs	r4, r6, #1
 800655e:	4623      	mov	r3, r4
 8006560:	2200      	movs	r2, #0
 8006562:	9902      	ldr	r1, [sp, #8]
 8006564:	428b      	cmp	r3, r1
 8006566:	da5f      	bge.n	8006628 <__kernel_rem_pio2+0x344>
 8006568:	2a00      	cmp	r2, #0
 800656a:	d074      	beq.n	8006656 <__kernel_rem_pio2+0x372>
 800656c:	ab0c      	add	r3, sp, #48	; 0x30
 800656e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006572:	f1ab 0b18 	sub.w	fp, fp, #24
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 809f 	beq.w	80066ba <__kernel_rem_pio2+0x3d6>
 800657c:	465a      	mov	r2, fp
 800657e:	2000      	movs	r0, #0
 8006580:	4914      	ldr	r1, [pc, #80]	; (80065d4 <__kernel_rem_pio2+0x2f0>)
 8006582:	f000 fb2d 	bl	8006be0 <scalbn>
 8006586:	46a2      	mov	sl, r4
 8006588:	4606      	mov	r6, r0
 800658a:	460f      	mov	r7, r1
 800658c:	f04f 0800 	mov.w	r8, #0
 8006590:	ab70      	add	r3, sp, #448	; 0x1c0
 8006592:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80065d8 <__kernel_rem_pio2+0x2f4>
 8006596:	00e5      	lsls	r5, r4, #3
 8006598:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800659c:	f1ba 0f00 	cmp.w	sl, #0
 80065a0:	f280 80c3 	bge.w	800672a <__kernel_rem_pio2+0x446>
 80065a4:	4626      	mov	r6, r4
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	f2c0 80f5 	blt.w	8006796 <__kernel_rem_pio2+0x4b2>
 80065ac:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <__kernel_rem_pio2+0x300>)
 80065ae:	f04f 0a00 	mov.w	sl, #0
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	ab70      	add	r3, sp, #448	; 0x1c0
 80065b6:	f04f 0b00 	mov.w	fp, #0
 80065ba:	f04f 0800 	mov.w	r8, #0
 80065be:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80065c2:	1ba7      	subs	r7, r4, r6
 80065c4:	e0db      	b.n	800677e <__kernel_rem_pio2+0x49a>
 80065c6:	2302      	movs	r3, #2
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	e757      	b.n	800647c <__kernel_rem_pio2+0x198>
 80065cc:	08006ef0 	.word	0x08006ef0
 80065d0:	40200000 	.word	0x40200000
 80065d4:	3ff00000 	.word	0x3ff00000
 80065d8:	3e700000 	.word	0x3e700000
 80065dc:	41700000 	.word	0x41700000
 80065e0:	3fe00000 	.word	0x3fe00000
 80065e4:	08006eb0 	.word	0x08006eb0
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	b944      	cbnz	r4, 80065fe <__kernel_rem_pio2+0x31a>
 80065ec:	b11b      	cbz	r3, 80065f6 <__kernel_rem_pio2+0x312>
 80065ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	2301      	movs	r3, #1
 80065f6:	461c      	mov	r4, r3
 80065f8:	3201      	adds	r2, #1
 80065fa:	3704      	adds	r7, #4
 80065fc:	e745      	b.n	800648a <__kernel_rem_pio2+0x1a6>
 80065fe:	1acb      	subs	r3, r1, r3
 8006600:	603b      	str	r3, [r7, #0]
 8006602:	4623      	mov	r3, r4
 8006604:	e7f7      	b.n	80065f6 <__kernel_rem_pio2+0x312>
 8006606:	1e72      	subs	r2, r6, #1
 8006608:	ab0c      	add	r3, sp, #48	; 0x30
 800660a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006612:	a90c      	add	r1, sp, #48	; 0x30
 8006614:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006618:	e745      	b.n	80064a6 <__kernel_rem_pio2+0x1c2>
 800661a:	1e72      	subs	r2, r6, #1
 800661c:	ab0c      	add	r3, sp, #48	; 0x30
 800661e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006622:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006626:	e7f4      	b.n	8006612 <__kernel_rem_pio2+0x32e>
 8006628:	a90c      	add	r1, sp, #48	; 0x30
 800662a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800662e:	3b01      	subs	r3, #1
 8006630:	430a      	orrs	r2, r1
 8006632:	e796      	b.n	8006562 <__kernel_rem_pio2+0x27e>
 8006634:	3401      	adds	r4, #1
 8006636:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800663a:	2a00      	cmp	r2, #0
 800663c:	d0fa      	beq.n	8006634 <__kernel_rem_pio2+0x350>
 800663e:	9b08      	ldr	r3, [sp, #32]
 8006640:	f106 0801 	add.w	r8, r6, #1
 8006644:	18f5      	adds	r5, r6, r3
 8006646:	ab20      	add	r3, sp, #128	; 0x80
 8006648:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800664c:	4434      	add	r4, r6
 800664e:	4544      	cmp	r4, r8
 8006650:	da04      	bge.n	800665c <__kernel_rem_pio2+0x378>
 8006652:	4626      	mov	r6, r4
 8006654:	e6bf      	b.n	80063d6 <__kernel_rem_pio2+0xf2>
 8006656:	2401      	movs	r4, #1
 8006658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800665a:	e7ec      	b.n	8006636 <__kernel_rem_pio2+0x352>
 800665c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800665e:	f04f 0900 	mov.w	r9, #0
 8006662:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006666:	f7f9 ffef 	bl	8000648 <__aeabi_i2d>
 800666a:	2600      	movs	r6, #0
 800666c:	2700      	movs	r7, #0
 800666e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006670:	e9c5 0100 	strd	r0, r1, [r5]
 8006674:	3b08      	subs	r3, #8
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	9504      	str	r5, [sp, #16]
 800667a:	9b07      	ldr	r3, [sp, #28]
 800667c:	4599      	cmp	r9, r3
 800667e:	dd05      	ble.n	800668c <__kernel_rem_pio2+0x3a8>
 8006680:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8006684:	f108 0801 	add.w	r8, r8, #1
 8006688:	3508      	adds	r5, #8
 800668a:	e7e0      	b.n	800664e <__kernel_rem_pio2+0x36a>
 800668c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006690:	9900      	ldr	r1, [sp, #0]
 8006692:	f109 0901 	add.w	r9, r9, #1
 8006696:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800669a:	9100      	str	r1, [sp, #0]
 800669c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80066a0:	f8cd c010 	str.w	ip, [sp, #16]
 80066a4:	f7f9 fd54 	bl	8000150 <__aeabi_dmul>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4630      	mov	r0, r6
 80066ae:	4639      	mov	r1, r7
 80066b0:	f7f9 fe7e 	bl	80003b0 <__adddf3>
 80066b4:	4606      	mov	r6, r0
 80066b6:	460f      	mov	r7, r1
 80066b8:	e7df      	b.n	800667a <__kernel_rem_pio2+0x396>
 80066ba:	3c01      	subs	r4, #1
 80066bc:	e756      	b.n	800656c <__kernel_rem_pio2+0x288>
 80066be:	f1cb 0200 	rsb	r2, fp, #0
 80066c2:	4640      	mov	r0, r8
 80066c4:	4649      	mov	r1, r9
 80066c6:	f000 fa8b 	bl	8006be0 <scalbn>
 80066ca:	2200      	movs	r2, #0
 80066cc:	4ba4      	ldr	r3, [pc, #656]	; (8006960 <__kernel_rem_pio2+0x67c>)
 80066ce:	4604      	mov	r4, r0
 80066d0:	460d      	mov	r5, r1
 80066d2:	f7fa f897 	bl	8000804 <__aeabi_dcmpge>
 80066d6:	b1f8      	cbz	r0, 8006718 <__kernel_rem_pio2+0x434>
 80066d8:	2200      	movs	r2, #0
 80066da:	4ba2      	ldr	r3, [pc, #648]	; (8006964 <__kernel_rem_pio2+0x680>)
 80066dc:	4620      	mov	r0, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	f7f9 fd36 	bl	8000150 <__aeabi_dmul>
 80066e4:	f7fa f8a2 	bl	800082c <__aeabi_d2iz>
 80066e8:	4607      	mov	r7, r0
 80066ea:	f7f9 ffad 	bl	8000648 <__aeabi_i2d>
 80066ee:	2200      	movs	r2, #0
 80066f0:	4b9b      	ldr	r3, [pc, #620]	; (8006960 <__kernel_rem_pio2+0x67c>)
 80066f2:	f7f9 fd2d 	bl	8000150 <__aeabi_dmul>
 80066f6:	460b      	mov	r3, r1
 80066f8:	4602      	mov	r2, r0
 80066fa:	4629      	mov	r1, r5
 80066fc:	4620      	mov	r0, r4
 80066fe:	f7f9 fe55 	bl	80003ac <__aeabi_dsub>
 8006702:	f7fa f893 	bl	800082c <__aeabi_d2iz>
 8006706:	1c74      	adds	r4, r6, #1
 8006708:	ab0c      	add	r3, sp, #48	; 0x30
 800670a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800670e:	f10b 0b18 	add.w	fp, fp, #24
 8006712:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8006716:	e731      	b.n	800657c <__kernel_rem_pio2+0x298>
 8006718:	4620      	mov	r0, r4
 800671a:	4629      	mov	r1, r5
 800671c:	f7fa f886 	bl	800082c <__aeabi_d2iz>
 8006720:	ab0c      	add	r3, sp, #48	; 0x30
 8006722:	4634      	mov	r4, r6
 8006724:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006728:	e728      	b.n	800657c <__kernel_rem_pio2+0x298>
 800672a:	ab0c      	add	r3, sp, #48	; 0x30
 800672c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006730:	f7f9 ff8a 	bl	8000648 <__aeabi_i2d>
 8006734:	4632      	mov	r2, r6
 8006736:	463b      	mov	r3, r7
 8006738:	f7f9 fd0a 	bl	8000150 <__aeabi_dmul>
 800673c:	4642      	mov	r2, r8
 800673e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8006742:	464b      	mov	r3, r9
 8006744:	4630      	mov	r0, r6
 8006746:	4639      	mov	r1, r7
 8006748:	f7f9 fd02 	bl	8000150 <__aeabi_dmul>
 800674c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006750:	4606      	mov	r6, r0
 8006752:	460f      	mov	r7, r1
 8006754:	e722      	b.n	800659c <__kernel_rem_pio2+0x2b8>
 8006756:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800675a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800675e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8006762:	f8cd c01c 	str.w	ip, [sp, #28]
 8006766:	f7f9 fcf3 	bl	8000150 <__aeabi_dmul>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4650      	mov	r0, sl
 8006770:	4659      	mov	r1, fp
 8006772:	f7f9 fe1d 	bl	80003b0 <__adddf3>
 8006776:	4682      	mov	sl, r0
 8006778:	468b      	mov	fp, r1
 800677a:	f108 0801 	add.w	r8, r8, #1
 800677e:	9b02      	ldr	r3, [sp, #8]
 8006780:	4598      	cmp	r8, r3
 8006782:	dc01      	bgt.n	8006788 <__kernel_rem_pio2+0x4a4>
 8006784:	45b8      	cmp	r8, r7
 8006786:	dde6      	ble.n	8006756 <__kernel_rem_pio2+0x472>
 8006788:	ab48      	add	r3, sp, #288	; 0x120
 800678a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800678e:	e9c7 ab00 	strd	sl, fp, [r7]
 8006792:	3e01      	subs	r6, #1
 8006794:	e707      	b.n	80065a6 <__kernel_rem_pio2+0x2c2>
 8006796:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006798:	2b02      	cmp	r3, #2
 800679a:	dc09      	bgt.n	80067b0 <__kernel_rem_pio2+0x4cc>
 800679c:	2b00      	cmp	r3, #0
 800679e:	dc32      	bgt.n	8006806 <__kernel_rem_pio2+0x522>
 80067a0:	d05a      	beq.n	8006858 <__kernel_rem_pio2+0x574>
 80067a2:	9b04      	ldr	r3, [sp, #16]
 80067a4:	f003 0007 	and.w	r0, r3, #7
 80067a8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d1f5      	bne.n	80067a2 <__kernel_rem_pio2+0x4be>
 80067b6:	ab48      	add	r3, sp, #288	; 0x120
 80067b8:	441d      	add	r5, r3
 80067ba:	46aa      	mov	sl, r5
 80067bc:	46a3      	mov	fp, r4
 80067be:	f1bb 0f00 	cmp.w	fp, #0
 80067c2:	dc76      	bgt.n	80068b2 <__kernel_rem_pio2+0x5ce>
 80067c4:	46aa      	mov	sl, r5
 80067c6:	46a3      	mov	fp, r4
 80067c8:	f1bb 0f01 	cmp.w	fp, #1
 80067cc:	f300 8090 	bgt.w	80068f0 <__kernel_rem_pio2+0x60c>
 80067d0:	2700      	movs	r7, #0
 80067d2:	463e      	mov	r6, r7
 80067d4:	2c01      	cmp	r4, #1
 80067d6:	f300 80aa 	bgt.w	800692e <__kernel_rem_pio2+0x64a>
 80067da:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80067de:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80067e2:	9b00      	ldr	r3, [sp, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f040 80ac 	bne.w	8006942 <__kernel_rem_pio2+0x65e>
 80067ea:	4603      	mov	r3, r0
 80067ec:	462a      	mov	r2, r5
 80067ee:	9806      	ldr	r0, [sp, #24]
 80067f0:	e9c0 2300 	strd	r2, r3, [r0]
 80067f4:	4622      	mov	r2, r4
 80067f6:	460b      	mov	r3, r1
 80067f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80067fc:	463a      	mov	r2, r7
 80067fe:	4633      	mov	r3, r6
 8006800:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006804:	e7cd      	b.n	80067a2 <__kernel_rem_pio2+0x4be>
 8006806:	2000      	movs	r0, #0
 8006808:	46a0      	mov	r8, r4
 800680a:	4601      	mov	r1, r0
 800680c:	ab48      	add	r3, sp, #288	; 0x120
 800680e:	441d      	add	r5, r3
 8006810:	f1b8 0f00 	cmp.w	r8, #0
 8006814:	da3a      	bge.n	800688c <__kernel_rem_pio2+0x5a8>
 8006816:	9b00      	ldr	r3, [sp, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d03e      	beq.n	800689a <__kernel_rem_pio2+0x5b6>
 800681c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8006820:	4602      	mov	r2, r0
 8006822:	462b      	mov	r3, r5
 8006824:	9d06      	ldr	r5, [sp, #24]
 8006826:	2601      	movs	r6, #1
 8006828:	e9c5 2300 	strd	r2, r3, [r5]
 800682c:	460b      	mov	r3, r1
 800682e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006832:	f7f9 fdbb 	bl	80003ac <__aeabi_dsub>
 8006836:	4684      	mov	ip, r0
 8006838:	460f      	mov	r7, r1
 800683a:	ad48      	add	r5, sp, #288	; 0x120
 800683c:	42b4      	cmp	r4, r6
 800683e:	f105 0508 	add.w	r5, r5, #8
 8006842:	da2c      	bge.n	800689e <__kernel_rem_pio2+0x5ba>
 8006844:	9b00      	ldr	r3, [sp, #0]
 8006846:	b10b      	cbz	r3, 800684c <__kernel_rem_pio2+0x568>
 8006848:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800684c:	4662      	mov	r2, ip
 800684e:	463b      	mov	r3, r7
 8006850:	9906      	ldr	r1, [sp, #24]
 8006852:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006856:	e7a4      	b.n	80067a2 <__kernel_rem_pio2+0x4be>
 8006858:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800685a:	ab48      	add	r3, sp, #288	; 0x120
 800685c:	4637      	mov	r7, r6
 800685e:	441d      	add	r5, r3
 8006860:	2c00      	cmp	r4, #0
 8006862:	da09      	bge.n	8006878 <__kernel_rem_pio2+0x594>
 8006864:	9b00      	ldr	r3, [sp, #0]
 8006866:	b10b      	cbz	r3, 800686c <__kernel_rem_pio2+0x588>
 8006868:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800686c:	4632      	mov	r2, r6
 800686e:	463b      	mov	r3, r7
 8006870:	9906      	ldr	r1, [sp, #24]
 8006872:	e9c1 2300 	strd	r2, r3, [r1]
 8006876:	e794      	b.n	80067a2 <__kernel_rem_pio2+0x4be>
 8006878:	4630      	mov	r0, r6
 800687a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800687e:	4639      	mov	r1, r7
 8006880:	f7f9 fd96 	bl	80003b0 <__adddf3>
 8006884:	3c01      	subs	r4, #1
 8006886:	4606      	mov	r6, r0
 8006888:	460f      	mov	r7, r1
 800688a:	e7e9      	b.n	8006860 <__kernel_rem_pio2+0x57c>
 800688c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006890:	f7f9 fd8e 	bl	80003b0 <__adddf3>
 8006894:	f108 38ff 	add.w	r8, r8, #4294967295
 8006898:	e7ba      	b.n	8006810 <__kernel_rem_pio2+0x52c>
 800689a:	460d      	mov	r5, r1
 800689c:	e7c0      	b.n	8006820 <__kernel_rem_pio2+0x53c>
 800689e:	4660      	mov	r0, ip
 80068a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068a4:	4639      	mov	r1, r7
 80068a6:	f7f9 fd83 	bl	80003b0 <__adddf3>
 80068aa:	3601      	adds	r6, #1
 80068ac:	4684      	mov	ip, r0
 80068ae:	460f      	mov	r7, r1
 80068b0:	e7c4      	b.n	800683c <__kernel_rem_pio2+0x558>
 80068b2:	e9da 6700 	ldrd	r6, r7, [sl]
 80068b6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80068ba:	4632      	mov	r2, r6
 80068bc:	463b      	mov	r3, r7
 80068be:	4640      	mov	r0, r8
 80068c0:	4649      	mov	r1, r9
 80068c2:	f7f9 fd75 	bl	80003b0 <__adddf3>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ce:	4640      	mov	r0, r8
 80068d0:	4649      	mov	r1, r9
 80068d2:	f7f9 fd6b 	bl	80003ac <__aeabi_dsub>
 80068d6:	4632      	mov	r2, r6
 80068d8:	463b      	mov	r3, r7
 80068da:	f7f9 fd69 	bl	80003b0 <__adddf3>
 80068de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068e2:	e86a 0102 	strd	r0, r1, [sl], #-8
 80068e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068ea:	e9ca 2300 	strd	r2, r3, [sl]
 80068ee:	e766      	b.n	80067be <__kernel_rem_pio2+0x4da>
 80068f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80068f4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80068f8:	4642      	mov	r2, r8
 80068fa:	464b      	mov	r3, r9
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7f9 fd56 	bl	80003b0 <__adddf3>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800690c:	4630      	mov	r0, r6
 800690e:	4639      	mov	r1, r7
 8006910:	f7f9 fd4c 	bl	80003ac <__aeabi_dsub>
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	f7f9 fd4a 	bl	80003b0 <__adddf3>
 800691c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006920:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006924:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006928:	e9ca 2300 	strd	r2, r3, [sl]
 800692c:	e74c      	b.n	80067c8 <__kernel_rem_pio2+0x4e4>
 800692e:	4638      	mov	r0, r7
 8006930:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006934:	4631      	mov	r1, r6
 8006936:	f7f9 fd3b 	bl	80003b0 <__adddf3>
 800693a:	3c01      	subs	r4, #1
 800693c:	4607      	mov	r7, r0
 800693e:	460e      	mov	r6, r1
 8006940:	e748      	b.n	80067d4 <__kernel_rem_pio2+0x4f0>
 8006942:	9b06      	ldr	r3, [sp, #24]
 8006944:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006948:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800694c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006950:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8006954:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8006958:	601d      	str	r5, [r3, #0]
 800695a:	615e      	str	r6, [r3, #20]
 800695c:	e721      	b.n	80067a2 <__kernel_rem_pio2+0x4be>
 800695e:	bf00      	nop
 8006960:	41700000 	.word	0x41700000
 8006964:	3e700000 	.word	0x3e700000

08006968 <__kernel_sin>:
 8006968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	e9cd 2300 	strd	r2, r3, [sp]
 8006972:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006976:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800697a:	4682      	mov	sl, r0
 800697c:	460c      	mov	r4, r1
 800697e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006980:	da03      	bge.n	800698a <__kernel_sin+0x22>
 8006982:	f7f9 ff53 	bl	800082c <__aeabi_d2iz>
 8006986:	2800      	cmp	r0, #0
 8006988:	d050      	beq.n	8006a2c <__kernel_sin+0xc4>
 800698a:	4652      	mov	r2, sl
 800698c:	4623      	mov	r3, r4
 800698e:	4650      	mov	r0, sl
 8006990:	4621      	mov	r1, r4
 8006992:	f7f9 fbdd 	bl	8000150 <__aeabi_dmul>
 8006996:	4606      	mov	r6, r0
 8006998:	460f      	mov	r7, r1
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4650      	mov	r0, sl
 80069a0:	4621      	mov	r1, r4
 80069a2:	f7f9 fbd5 	bl	8000150 <__aeabi_dmul>
 80069a6:	a33e      	add	r3, pc, #248	; (adr r3, 8006aa0 <__kernel_sin+0x138>)
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	4680      	mov	r8, r0
 80069ae:	4689      	mov	r9, r1
 80069b0:	4630      	mov	r0, r6
 80069b2:	4639      	mov	r1, r7
 80069b4:	f7f9 fbcc 	bl	8000150 <__aeabi_dmul>
 80069b8:	a33b      	add	r3, pc, #236	; (adr r3, 8006aa8 <__kernel_sin+0x140>)
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f7f9 fcf5 	bl	80003ac <__aeabi_dsub>
 80069c2:	4632      	mov	r2, r6
 80069c4:	463b      	mov	r3, r7
 80069c6:	f7f9 fbc3 	bl	8000150 <__aeabi_dmul>
 80069ca:	a339      	add	r3, pc, #228	; (adr r3, 8006ab0 <__kernel_sin+0x148>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f7f9 fcee 	bl	80003b0 <__adddf3>
 80069d4:	4632      	mov	r2, r6
 80069d6:	463b      	mov	r3, r7
 80069d8:	f7f9 fbba 	bl	8000150 <__aeabi_dmul>
 80069dc:	a336      	add	r3, pc, #216	; (adr r3, 8006ab8 <__kernel_sin+0x150>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f7f9 fce3 	bl	80003ac <__aeabi_dsub>
 80069e6:	4632      	mov	r2, r6
 80069e8:	463b      	mov	r3, r7
 80069ea:	f7f9 fbb1 	bl	8000150 <__aeabi_dmul>
 80069ee:	a334      	add	r3, pc, #208	; (adr r3, 8006ac0 <__kernel_sin+0x158>)
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f7f9 fcdc 	bl	80003b0 <__adddf3>
 80069f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069fc:	b9dd      	cbnz	r5, 8006a36 <__kernel_sin+0xce>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4630      	mov	r0, r6
 8006a04:	4639      	mov	r1, r7
 8006a06:	f7f9 fba3 	bl	8000150 <__aeabi_dmul>
 8006a0a:	a32f      	add	r3, pc, #188	; (adr r3, 8006ac8 <__kernel_sin+0x160>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fccc 	bl	80003ac <__aeabi_dsub>
 8006a14:	4642      	mov	r2, r8
 8006a16:	464b      	mov	r3, r9
 8006a18:	f7f9 fb9a 	bl	8000150 <__aeabi_dmul>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4650      	mov	r0, sl
 8006a22:	4621      	mov	r1, r4
 8006a24:	f7f9 fcc4 	bl	80003b0 <__adddf3>
 8006a28:	4682      	mov	sl, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	4621      	mov	r1, r4
 8006a30:	b006      	add	sp, #24
 8006a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a36:	2200      	movs	r2, #0
 8006a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a3c:	4b24      	ldr	r3, [pc, #144]	; (8006ad0 <__kernel_sin+0x168>)
 8006a3e:	f7f9 fb87 	bl	8000150 <__aeabi_dmul>
 8006a42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	f7f9 fb7f 	bl	8000150 <__aeabi_dmul>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a5a:	f7f9 fca7 	bl	80003ac <__aeabi_dsub>
 8006a5e:	4632      	mov	r2, r6
 8006a60:	463b      	mov	r3, r7
 8006a62:	f7f9 fb75 	bl	8000150 <__aeabi_dmul>
 8006a66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a6a:	f7f9 fc9f 	bl	80003ac <__aeabi_dsub>
 8006a6e:	a316      	add	r3, pc, #88	; (adr r3, 8006ac8 <__kernel_sin+0x160>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	4606      	mov	r6, r0
 8006a76:	460f      	mov	r7, r1
 8006a78:	4640      	mov	r0, r8
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	f7f9 fb68 	bl	8000150 <__aeabi_dmul>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4630      	mov	r0, r6
 8006a86:	4639      	mov	r1, r7
 8006a88:	f7f9 fc92 	bl	80003b0 <__adddf3>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4650      	mov	r0, sl
 8006a92:	4621      	mov	r1, r4
 8006a94:	f7f9 fc8a 	bl	80003ac <__aeabi_dsub>
 8006a98:	e7c6      	b.n	8006a28 <__kernel_sin+0xc0>
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w
 8006aa0:	5acfd57c 	.word	0x5acfd57c
 8006aa4:	3de5d93a 	.word	0x3de5d93a
 8006aa8:	8a2b9ceb 	.word	0x8a2b9ceb
 8006aac:	3e5ae5e6 	.word	0x3e5ae5e6
 8006ab0:	57b1fe7d 	.word	0x57b1fe7d
 8006ab4:	3ec71de3 	.word	0x3ec71de3
 8006ab8:	19c161d5 	.word	0x19c161d5
 8006abc:	3f2a01a0 	.word	0x3f2a01a0
 8006ac0:	1110f8a6 	.word	0x1110f8a6
 8006ac4:	3f811111 	.word	0x3f811111
 8006ac8:	55555549 	.word	0x55555549
 8006acc:	3fc55555 	.word	0x3fc55555
 8006ad0:	3fe00000 	.word	0x3fe00000

08006ad4 <fabs>:
 8006ad4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006ad8:	4770      	bx	lr
 8006ada:	0000      	movs	r0, r0
 8006adc:	0000      	movs	r0, r0
	...

08006ae0 <floor>:
 8006ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006ae8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006aec:	2e13      	cmp	r6, #19
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4607      	mov	r7, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	4605      	mov	r5, r0
 8006af8:	dc33      	bgt.n	8006b62 <floor+0x82>
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	da14      	bge.n	8006b28 <floor+0x48>
 8006afe:	a334      	add	r3, pc, #208	; (adr r3, 8006bd0 <floor+0xf0>)
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f7f9 fc54 	bl	80003b0 <__adddf3>
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f7f9 fe84 	bl	8000818 <__aeabi_dcmpgt>
 8006b10:	b138      	cbz	r0, 8006b22 <floor+0x42>
 8006b12:	2c00      	cmp	r4, #0
 8006b14:	da58      	bge.n	8006bc8 <floor+0xe8>
 8006b16:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006b1a:	431d      	orrs	r5, r3
 8006b1c:	d001      	beq.n	8006b22 <floor+0x42>
 8006b1e:	2500      	movs	r5, #0
 8006b20:	4c2d      	ldr	r4, [pc, #180]	; (8006bd8 <floor+0xf8>)
 8006b22:	4623      	mov	r3, r4
 8006b24:	462f      	mov	r7, r5
 8006b26:	e025      	b.n	8006b74 <floor+0x94>
 8006b28:	4a2c      	ldr	r2, [pc, #176]	; (8006bdc <floor+0xfc>)
 8006b2a:	fa42 f806 	asr.w	r8, r2, r6
 8006b2e:	ea01 0208 	and.w	r2, r1, r8
 8006b32:	4302      	orrs	r2, r0
 8006b34:	d01e      	beq.n	8006b74 <floor+0x94>
 8006b36:	a326      	add	r3, pc, #152	; (adr r3, 8006bd0 <floor+0xf0>)
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f7f9 fc38 	bl	80003b0 <__adddf3>
 8006b40:	2200      	movs	r2, #0
 8006b42:	2300      	movs	r3, #0
 8006b44:	f7f9 fe68 	bl	8000818 <__aeabi_dcmpgt>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d0ea      	beq.n	8006b22 <floor+0x42>
 8006b4c:	2c00      	cmp	r4, #0
 8006b4e:	bfbe      	ittt	lt
 8006b50:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006b54:	fa43 f606 	asrlt.w	r6, r3, r6
 8006b58:	19a4      	addlt	r4, r4, r6
 8006b5a:	2500      	movs	r5, #0
 8006b5c:	ea24 0408 	bic.w	r4, r4, r8
 8006b60:	e7df      	b.n	8006b22 <floor+0x42>
 8006b62:	2e33      	cmp	r6, #51	; 0x33
 8006b64:	dd0a      	ble.n	8006b7c <floor+0x9c>
 8006b66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006b6a:	d103      	bne.n	8006b74 <floor+0x94>
 8006b6c:	f7f9 fc20 	bl	80003b0 <__adddf3>
 8006b70:	4607      	mov	r7, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4638      	mov	r0, r7
 8006b76:	4619      	mov	r1, r3
 8006b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b80:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006b84:	fa22 f808 	lsr.w	r8, r2, r8
 8006b88:	ea18 0f00 	tst.w	r8, r0
 8006b8c:	d0f2      	beq.n	8006b74 <floor+0x94>
 8006b8e:	a310      	add	r3, pc, #64	; (adr r3, 8006bd0 <floor+0xf0>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f7f9 fc0c 	bl	80003b0 <__adddf3>
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f7f9 fe3c 	bl	8000818 <__aeabi_dcmpgt>
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d0be      	beq.n	8006b22 <floor+0x42>
 8006ba4:	2c00      	cmp	r4, #0
 8006ba6:	da02      	bge.n	8006bae <floor+0xce>
 8006ba8:	2e14      	cmp	r6, #20
 8006baa:	d103      	bne.n	8006bb4 <floor+0xd4>
 8006bac:	3401      	adds	r4, #1
 8006bae:	ea25 0508 	bic.w	r5, r5, r8
 8006bb2:	e7b6      	b.n	8006b22 <floor+0x42>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006bba:	fa03 f606 	lsl.w	r6, r3, r6
 8006bbe:	4435      	add	r5, r6
 8006bc0:	42bd      	cmp	r5, r7
 8006bc2:	bf38      	it	cc
 8006bc4:	18e4      	addcc	r4, r4, r3
 8006bc6:	e7f2      	b.n	8006bae <floor+0xce>
 8006bc8:	2500      	movs	r5, #0
 8006bca:	462c      	mov	r4, r5
 8006bcc:	e7a9      	b.n	8006b22 <floor+0x42>
 8006bce:	bf00      	nop
 8006bd0:	8800759c 	.word	0x8800759c
 8006bd4:	7e37e43c 	.word	0x7e37e43c
 8006bd8:	bff00000 	.word	0xbff00000
 8006bdc:	000fffff 	.word	0x000fffff

08006be0 <scalbn>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006be6:	4604      	mov	r4, r0
 8006be8:	460d      	mov	r5, r1
 8006bea:	4617      	mov	r7, r2
 8006bec:	460b      	mov	r3, r1
 8006bee:	b996      	cbnz	r6, 8006c16 <scalbn+0x36>
 8006bf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006bf4:	4303      	orrs	r3, r0
 8006bf6:	d039      	beq.n	8006c6c <scalbn+0x8c>
 8006bf8:	4b33      	ldr	r3, [pc, #204]	; (8006cc8 <scalbn+0xe8>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f7f9 faa8 	bl	8000150 <__aeabi_dmul>
 8006c00:	4b32      	ldr	r3, [pc, #200]	; (8006ccc <scalbn+0xec>)
 8006c02:	4604      	mov	r4, r0
 8006c04:	429f      	cmp	r7, r3
 8006c06:	460d      	mov	r5, r1
 8006c08:	da0f      	bge.n	8006c2a <scalbn+0x4a>
 8006c0a:	a32b      	add	r3, pc, #172	; (adr r3, 8006cb8 <scalbn+0xd8>)
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f7f9 fa9e 	bl	8000150 <__aeabi_dmul>
 8006c14:	e006      	b.n	8006c24 <scalbn+0x44>
 8006c16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006c1a:	4296      	cmp	r6, r2
 8006c1c:	d10a      	bne.n	8006c34 <scalbn+0x54>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	f7f9 fbc6 	bl	80003b0 <__adddf3>
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	e020      	b.n	8006c6c <scalbn+0x8c>
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c30:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006c34:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006c38:	19b9      	adds	r1, r7, r6
 8006c3a:	4291      	cmp	r1, r2
 8006c3c:	dd0e      	ble.n	8006c5c <scalbn+0x7c>
 8006c3e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006c42:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006c46:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006c4a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006c4e:	4820      	ldr	r0, [pc, #128]	; (8006cd0 <scalbn+0xf0>)
 8006c50:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006c54:	a31a      	add	r3, pc, #104	; (adr r3, 8006cc0 <scalbn+0xe0>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	e7d9      	b.n	8006c10 <scalbn+0x30>
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	dd08      	ble.n	8006c72 <scalbn+0x92>
 8006c60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c68:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	4629      	mov	r1, r5
 8006c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c72:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006c76:	da12      	bge.n	8006c9e <scalbn+0xbe>
 8006c78:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c7c:	429f      	cmp	r7, r3
 8006c7e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006c82:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006c86:	dcdc      	bgt.n	8006c42 <scalbn+0x62>
 8006c88:	a30b      	add	r3, pc, #44	; (adr r3, 8006cb8 <scalbn+0xd8>)
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006c92:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006c96:	480f      	ldr	r0, [pc, #60]	; (8006cd4 <scalbn+0xf4>)
 8006c98:	f041 011f 	orr.w	r1, r1, #31
 8006c9c:	e7b8      	b.n	8006c10 <scalbn+0x30>
 8006c9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ca2:	3136      	adds	r1, #54	; 0x36
 8006ca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ca8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006cac:	4620      	mov	r0, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <scalbn+0xf8>)
 8006cb4:	e7ac      	b.n	8006c10 <scalbn+0x30>
 8006cb6:	bf00      	nop
 8006cb8:	c2f8f359 	.word	0xc2f8f359
 8006cbc:	01a56e1f 	.word	0x01a56e1f
 8006cc0:	8800759c 	.word	0x8800759c
 8006cc4:	7e37e43c 	.word	0x7e37e43c
 8006cc8:	43500000 	.word	0x43500000
 8006ccc:	ffff3cb0 	.word	0xffff3cb0
 8006cd0:	8800759c 	.word	0x8800759c
 8006cd4:	c2f8f359 	.word	0xc2f8f359
 8006cd8:	3c900000 	.word	0x3c900000

08006cdc <_init>:
 8006cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cde:	bf00      	nop
 8006ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce2:	bc08      	pop	{r3}
 8006ce4:	469e      	mov	lr, r3
 8006ce6:	4770      	bx	lr

08006ce8 <_fini>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	bf00      	nop
 8006cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cee:	bc08      	pop	{r3}
 8006cf0:	469e      	mov	lr, r3
 8006cf2:	4770      	bx	lr
